"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.edgeSchema = void 0;
const builder_1 = require("./builder");
const required_attribute_resource = new builder_1.SchemaBuilder()
    .addAllPrimitiveTypes({ required: true, computed: false })
    .build();
const optional_attribute_resource = new builder_1.SchemaBuilder()
    .addAllPrimitiveTypes({ required: false, computed: false })
    .build();
const optional_computed_attribute_resource = new builder_1.SchemaBuilder()
    .addAllPrimitiveTypes({ required: false, computed: true })
    .build();
const list_block_resource = new builder_1.SchemaBuilder()
    .listBlock({
    name: "opt",
    block: new builder_1.SchemaBuilder().addAllPrimitivePermutations().asBlock(),
    minItems: 0,
    maxItems: 42,
})
    .listBlock({
    name: "req",
    block: new builder_1.SchemaBuilder().addAllPrimitivePermutations().asBlock(),
    minItems: 1,
    maxItems: 42,
})
    .listBlock({
    name: "singleopt",
    block: new builder_1.SchemaBuilder().addAllPrimitivePermutations().asBlock(),
    minItems: 0,
    maxItems: 1,
})
    .listBlock({
    name: "singlereq",
    block: new builder_1.SchemaBuilder().addAllPrimitivePermutations().asBlock(),
    minItems: 1,
    maxItems: 1,
})
    .build();
exports.edgeSchema = builder_1.schema({
    name: "edge",
    provider: new builder_1.SchemaBuilder().addAllPrimitivePermutations().build(),
    resources: {
        required_attribute_resource,
        optional_attribute_resource,
        optional_computed_attribute_resource,
        list_block_resource,
    },
    dataSources: {},
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx1Q0FBdUQ7QUFFdkQsTUFBTSwyQkFBMkIsR0FBRyxJQUFJLHVCQUFDLEVBQUU7S0FDeEMsb0JBQW9CLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQztLQUN6RCxLQUFLLEVBQUUsQ0FBQztBQUVYLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSx1QkFBQyxFQUFFO0tBQ3hDLG9CQUFvQixDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7S0FDMUQsS0FBSyxFQUFFLENBQUM7QUFFWCxNQUFNLG9DQUFvQyxHQUFHLElBQUksdUJBQUMsRUFBRTtLQUNqRCxvQkFBb0IsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDO0tBQ3pELEtBQUssRUFBRSxDQUFDO0FBRVgsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLHVCQUFDLEVBQUU7S0FDaEMsU0FBUyxDQUFDO0lBQ1QsSUFBSSxFQUFFLEtBQUs7SUFDWCxLQUFLLEVBQUUsSUFBSSx1QkFBQyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsQ0FBQyxPQUFPLEVBQUU7SUFDdEQsUUFBUSxFQUFFLENBQUM7SUFDWCxRQUFRLEVBQUUsRUFBRTtDQUNiLENBQUM7S0FDRCxTQUFTLENBQUM7SUFDVCxJQUFJLEVBQUUsS0FBSztJQUNYLEtBQUssRUFBRSxJQUFJLHVCQUFDLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxDQUFDLE9BQU8sRUFBRTtJQUN0RCxRQUFRLEVBQUUsQ0FBQztJQUNYLFFBQVEsRUFBRSxFQUFFO0NBQ2IsQ0FBQztLQUNELFNBQVMsQ0FBQztJQUNULElBQUksRUFBRSxXQUFXO0lBQ2pCLEtBQUssRUFBRSxJQUFJLHVCQUFDLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxDQUFDLE9BQU8sRUFBRTtJQUN0RCxRQUFRLEVBQUUsQ0FBQztJQUNYLFFBQVEsRUFBRSxDQUFDO0NBQ1osQ0FBQztLQUNELFNBQVMsQ0FBQztJQUNULElBQUksRUFBRSxXQUFXO0lBQ2pCLEtBQUssRUFBRSxJQUFJLHVCQUFDLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxDQUFDLE9BQU8sRUFBRTtJQUN0RCxRQUFRLEVBQUUsQ0FBQztJQUNYLFFBQVEsRUFBRSxDQUFDO0NBQ1osQ0FBQztLQUNELEtBQUssRUFBRSxDQUFDO0FBRUUsUUFBQSxVQUFVLEdBQW1CLGdCQUFNLENBQUM7SUFDL0MsSUFBSSxFQUFFLE1BQU07SUFDWixRQUFRLEVBQUUsSUFBSSx1QkFBQyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsQ0FBQyxLQUFLLEVBQUU7SUFDdkQsU0FBUyxFQUFFO1FBQ1QsMkJBQTJCO1FBQzNCLDJCQUEyQjtRQUMzQixvQ0FBb0M7UUFDcEMsbUJBQW1CO0tBQ3BCO0lBQ0QsV0FBVyxFQUFFLEVBQUU7Q0FDaEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvdmlkZXJTY2hlbWEgfSBmcm9tIFwiLi4vLi4vXCI7XG5pbXBvcnQgeyBzY2hlbWEsIFNjaGVtYUJ1aWxkZXIgYXMgUyB9IGZyb20gXCIuL2J1aWxkZXJcIjtcblxuY29uc3QgcmVxdWlyZWRfYXR0cmlidXRlX3Jlc291cmNlID0gbmV3IFMoKVxuICAuYWRkQWxsUHJpbWl0aXZlVHlwZXMoeyByZXF1aXJlZDogdHJ1ZSwgY29tcHV0ZWQ6IGZhbHNlIH0pXG4gIC5idWlsZCgpO1xuXG5jb25zdCBvcHRpb25hbF9hdHRyaWJ1dGVfcmVzb3VyY2UgPSBuZXcgUygpXG4gIC5hZGRBbGxQcmltaXRpdmVUeXBlcyh7IHJlcXVpcmVkOiBmYWxzZSwgY29tcHV0ZWQ6IGZhbHNlIH0pXG4gIC5idWlsZCgpO1xuXG5jb25zdCBvcHRpb25hbF9jb21wdXRlZF9hdHRyaWJ1dGVfcmVzb3VyY2UgPSBuZXcgUygpXG4gIC5hZGRBbGxQcmltaXRpdmVUeXBlcyh7IHJlcXVpcmVkOiBmYWxzZSwgY29tcHV0ZWQ6IHRydWUgfSlcbiAgLmJ1aWxkKCk7XG5cbmNvbnN0IGxpc3RfYmxvY2tfcmVzb3VyY2UgPSBuZXcgUygpXG4gIC5saXN0QmxvY2soe1xuICAgIG5hbWU6IFwib3B0XCIsXG4gICAgYmxvY2s6IG5ldyBTKCkuYWRkQWxsUHJpbWl0aXZlUGVybXV0YXRpb25zKCkuYXNCbG9jaygpLFxuICAgIG1pbkl0ZW1zOiAwLFxuICAgIG1heEl0ZW1zOiA0MixcbiAgfSlcbiAgLmxpc3RCbG9jayh7XG4gICAgbmFtZTogXCJyZXFcIixcbiAgICBibG9jazogbmV3IFMoKS5hZGRBbGxQcmltaXRpdmVQZXJtdXRhdGlvbnMoKS5hc0Jsb2NrKCksXG4gICAgbWluSXRlbXM6IDEsXG4gICAgbWF4SXRlbXM6IDQyLFxuICB9KVxuICAubGlzdEJsb2NrKHtcbiAgICBuYW1lOiBcInNpbmdsZW9wdFwiLFxuICAgIGJsb2NrOiBuZXcgUygpLmFkZEFsbFByaW1pdGl2ZVBlcm11dGF0aW9ucygpLmFzQmxvY2soKSxcbiAgICBtaW5JdGVtczogMCxcbiAgICBtYXhJdGVtczogMSxcbiAgfSlcbiAgLmxpc3RCbG9jayh7XG4gICAgbmFtZTogXCJzaW5nbGVyZXFcIixcbiAgICBibG9jazogbmV3IFMoKS5hZGRBbGxQcmltaXRpdmVQZXJtdXRhdGlvbnMoKS5hc0Jsb2NrKCksXG4gICAgbWluSXRlbXM6IDEsXG4gICAgbWF4SXRlbXM6IDEsXG4gIH0pXG4gIC5idWlsZCgpO1xuXG5leHBvcnQgY29uc3QgZWRnZVNjaGVtYTogUHJvdmlkZXJTY2hlbWEgPSBzY2hlbWEoe1xuICBuYW1lOiBcImVkZ2VcIixcbiAgcHJvdmlkZXI6IG5ldyBTKCkuYWRkQWxsUHJpbWl0aXZlUGVybXV0YXRpb25zKCkuYnVpbGQoKSxcbiAgcmVzb3VyY2VzOiB7XG4gICAgcmVxdWlyZWRfYXR0cmlidXRlX3Jlc291cmNlLFxuICAgIG9wdGlvbmFsX2F0dHJpYnV0ZV9yZXNvdXJjZSxcbiAgICBvcHRpb25hbF9jb21wdXRlZF9hdHRyaWJ1dGVfcmVzb3VyY2UsXG4gICAgbGlzdF9ibG9ja19yZXNvdXJjZSxcbiAgfSxcbiAgZGF0YVNvdXJjZXM6IHt9LFxufSk7XG4iXX0=