"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.determineGoModuleName = exports.ConstructsMaker = exports.ConstructsMakerProviderTarget = exports.ConstructsMakerModuleTarget = exports.ConstructsMakerTarget = exports.generateJsiiLanguage = exports.LANGUAGES = exports.Language = void 0;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const codemaker_1 = require("codemaker");
const util_1 = require("../util");
const srcmak = __importStar(require("jsii-srcmak"));
const config_1 = require("../config");
const provider_schema_1 = require("./generator/provider-schema");
const provider_generator_1 = require("./generator/provider-generator");
const module_generator_1 = require("./generator/module-generator");
var Language;
(function (Language) {
    Language["TYPESCRIPT"] = "typescript";
    Language["PYTHON"] = "python";
    Language["CSHARP"] = "csharp";
    Language["JAVA"] = "java";
    Language["GO"] = "go";
})(Language = exports.Language || (exports.Language = {}));
exports.LANGUAGES = [
    Language.TYPESCRIPT,
    Language.PYTHON,
    Language.JAVA,
    Language.CSHARP,
    Language.GO,
];
async function generateJsiiLanguage(code, opts) {
    await util_1.mkdtemp(async (staging) => {
        // this is not typescript, so we generate in a staging directory and
        // use jsii-srcmak to compile and extract the language-specific source
        // into our project.
        await code.save(staging);
        await srcmak.srcmak(staging, opts);
    });
}
exports.generateJsiiLanguage = generateJsiiLanguage;
class ConstructsMakerTarget {
    constructor(constraint, targetLanguage) {
        this.constraint = constraint;
        this.targetLanguage = targetLanguage;
        if (this.constraint instanceof config_1.TerraformModuleConstraint) {
            this.fileName = `${this.typesPath(this.constraint.fileName)}.ts`;
        }
        else {
            this.fileName = `${this.typesPath(this.constraint.name)}.ts`;
        }
    }
    static from(constraint, targetLanguage) {
        if (constraint instanceof config_1.TerraformModuleConstraint) {
            return new ConstructsMakerModuleTarget(constraint, targetLanguage);
        }
        else {
            return new ConstructsMakerProviderTarget(constraint, targetLanguage);
        }
    }
    get version() {
        return this.constraint.version;
    }
    get source() {
        return this.constraint.source;
    }
    get name() {
        return this.constraint.name;
    }
    get fqn() {
        return this.constraint.fqn;
    }
    get namespace() {
        return this.constraint.namespace;
    }
    get moduleKey() {
        return this.fqn.replace(/\//gi, "_");
    }
}
exports.ConstructsMakerTarget = ConstructsMakerTarget;
class ConstructsMakerModuleTarget extends ConstructsMakerTarget {
    get isModule() {
        return true;
    }
    get isProvider() {
        return false;
    }
    get srcMakName() {
        switch (this.targetLanguage) {
            case Language.GO:
                return this.name;
            case Language.JAVA:
            case Language.CSHARP:
            case Language.PYTHON:
            default:
                return this.simplifiedName;
        }
    }
    get trackingPayload() {
        return {
            name: this.name,
            fullName: this.fqn,
            version: this.version,
            type: "module",
        };
    }
    typesPath(name) {
        return `modules/${name}`;
    }
    get simplifiedName() {
        var _a, _b;
        return ((_b = (_a = this.namespace) === null || _a === void 0 ? void 0 : _a.replace(/\//gi, ".").replace(/-/gi, "_")) !== null && _b !== void 0 ? _b : this.name);
    }
}
exports.ConstructsMakerModuleTarget = ConstructsMakerModuleTarget;
class ConstructsMakerProviderTarget extends ConstructsMakerTarget {
    get isModule() {
        return false;
    }
    get isProvider() {
        return true;
    }
    get srcMakName() {
        switch (this.targetLanguage) {
            case Language.JAVA:
                // "null" is a reserved keyword and can't be used as a package name
                return this.isNullProvider ? "nullprovider" : this.simplifiedName;
            case Language.CSHARP:
                // "null" is a reserved keyword and can't be used as a namespace
                return this.isNullProvider ? "Providers.Null" : this.simplifiedName;
            case Language.PYTHON:
                return this.simplifiedName;
            case Language.GO:
                return this.name.replace(/-/gi, "_");
            default:
                return this.constraint.fqn;
        }
    }
    get trackingPayload() {
        return {
            name: this.name,
            fullName: this.source,
            version: this.version,
            type: "provider",
        };
    }
    typesPath(name) {
        return `providers/${name}/index`;
    }
    get isNullProvider() {
        return this.constraint.name === "null";
    }
    get simplifiedName() {
        return this.name.replace(/\//gi, ".").replace(/-/gi, "_");
    }
}
exports.ConstructsMakerProviderTarget = ConstructsMakerProviderTarget;
class ConstructsMaker {
    constructor(options, constraints, reportTelemetry = () => { }) {
        this.options = options;
        this.constraints = constraints;
        this.reportTelemetry = reportTelemetry;
        this.codeMakerOutdir = path.resolve(this.options.codeMakerOutput);
        fs.mkdirpSync(this.codeMakerOutdir);
        this.code = new codemaker_1.CodeMaker();
        this.targets = this.constraints.map((constraint) => ConstructsMakerTarget.from(constraint, this.options.targetLanguage));
    }
    async generateTypeScript() {
        const schema = await provider_schema_1.readSchema(this.targets);
        const moduleTargets = this.targets.filter((target) => target instanceof ConstructsMakerModuleTarget);
        for (const target of moduleTargets) {
            target.spec = schema.moduleSchema[target.moduleKey];
        }
        const providerTargets = this.targets.filter((target) => target instanceof ConstructsMakerProviderTarget);
        if (providerTargets.length > 0) {
            new provider_generator_1.TerraformProviderGenerator(this.code, schema.providerSchema, providerTargets);
        }
        if (moduleTargets.length > 0) {
            new module_generator_1.ModuleGenerator(this.code, moduleTargets);
        }
    }
    async generate() {
        var _a;
        await this.generateTypeScript();
        if (this.isJavascriptTarget) {
            await this.save();
        }
        if (!this.isJavascriptTarget || this.options.outputJsii) {
            for (const target of this.targets) {
                // these are the module dependencies we compile against
                const deps = ["@types/node", "constructs", "cdktf"];
                const opts = {
                    entrypoint: target.fileName,
                    deps: deps.map((dep) => path.dirname(require.resolve(`${dep}/package.json`))),
                    moduleKey: target.moduleKey,
                };
                // used for testing.
                if (this.options.outputJsii) {
                    opts.jsii = { path: this.options.outputJsii };
                }
                if (this.isPythonTarget) {
                    opts.python = {
                        outdir: this.codeMakerOutdir,
                        moduleName: target.srcMakName,
                    };
                }
                if (this.isJavaTarget) {
                    opts.java = {
                        outdir: ".",
                        package: `imports.${target.srcMakName}`,
                    };
                }
                if (this.isCsharpTarget) {
                    opts.csharp = {
                        outdir: this.codeMakerOutdir,
                        namespace: target.srcMakName,
                    };
                }
                if (this.isGoTarget) {
                    // TODO: check if needed for modules somehow
                    // const targetType = target.isProvider ? 'provider' : 'module';
                    // jsii-srcmac will produce a folder inside this dir named after "packageName"
                    // so this results in e.g. .gen/hashicorp/random
                    const outdir = path.join(this.codeMakerOutdir, (_a = target.namespace) !== null && _a !== void 0 ? _a : "");
                    opts.golang = {
                        outdir,
                        moduleName: await exports.determineGoModuleName(outdir),
                        packageName: target.srcMakName,
                    };
                }
                if (process.env.NODE_OPTIONS &&
                    !process.env.NODE_OPTIONS.includes(`--max-old-space-size`)) {
                    console.warn(`found NODE_OPTIONS environment variable without a setting for --max-old-space-size.
The provider generation needs a substantial amount of memory (~13GB) for some providers and languages.
So cdktf-cli sets it to NODE_OPTIONS="--max-old-space-size=16384" by default. As your environment already contains
a NODE_OPTIONS variable, we won't override it. Hence, the provider generation might fail with an out of memory error.`);
                }
                else {
                    // increase memory to allow generating large providers (i.e. aws or azurerm for Go)
                    // srcmak is going to spawn a childprocess (for jsii-pacmak) which is going to be affected by this env var
                    process.env.NODE_OPTIONS = "--max-old-space-size=16384";
                }
                await generateJsiiLanguage(this.code, opts);
            }
        }
        for (const target of this.targets) {
            await this.reportTelemetry({
                payload: target.trackingPayload,
                language: target.targetLanguage,
            });
        }
    }
    async save(outdir = this.codeMakerOutdir) {
        await this.code.save(outdir);
    }
    get isJavascriptTarget() {
        return this.options.targetLanguage === Language.TYPESCRIPT;
    }
    get isPythonTarget() {
        return this.options.targetLanguage === Language.PYTHON;
    }
    get isJavaTarget() {
        return this.options.targetLanguage === Language.JAVA;
    }
    get isCsharpTarget() {
        return this.options.targetLanguage === Language.CSHARP;
    }
    get isGoTarget() {
        return this.options.targetLanguage === Language.GO;
    }
}
exports.ConstructsMaker = ConstructsMaker;
/**
 * searches for the closest `go.mod` file and returns the nested go module name for `dir`
 * e.g. (/dir/.gen/) => cdk.tf/stack/.gen if the parent dir of .gen has a go.mod for "module cdk.tf/stack"
 *
 * @param dir the directory to start the search from (searches upwards)
 * @returns the package name for `dir`
 * @throws an Error if no go.mod was found
 */
exports.determineGoModuleName = async (dir) => {
    let previousDir;
    let currentDir = path.resolve(dir);
    do {
        let files = [];
        try {
            files = await fs.readdir(currentDir);
        }
        catch (e) {
            // directory might not exist yet, but we still walk upwards from there, so ignore 'ENOENT'
            if (e.code !== "ENOENT") {
                throw e;
            }
        }
        if (files.includes("go.mod")) {
            const file = path.resolve(currentDir, "go.mod");
            const gomod = await fs.readFile(file);
            const match = /^module\s*(\S*)\s*$/m.exec(gomod.toString());
            if (match && match[1]) {
                const childdir = path.relative(currentDir, dir).replace(/\\/g, "/"); // replace '\' with '/' for windows paths
                return childdir.length > 0 ? `${match[1]}/${childdir}` : match[1];
            }
            throw new Error(`Could not determine the root Go module name. Found ${file} but failed to regex match the module name directive`);
        }
        // go up one directory. As dirname('/') will return '/' we cancel the loop
        // as soon as the dir does not change anymore.
        previousDir = currentDir;
        currentDir = path.dirname(currentDir);
    } while (currentDir !== previousDir);
    throw new Error(`Could not determine the root Go module name. No go.mod found in ${dir} and any parent directories`);
};
//# sourceMappingURL=data:application/json;base64,