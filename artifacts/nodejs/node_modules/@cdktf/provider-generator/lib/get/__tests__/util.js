"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectModuleToMatchSnapshot = exports.expectImportMatchSnapshot = void 0;
const fs = __importStar(require("fs"));
const util_1 = require("../../util");
const constructs_maker_1 = require("../constructs-maker");
const path = __importStar(require("path"));
const config_1 = require("../../config");
function expectImportMatchSnapshot(constraint) {
    jest.setTimeout(240000);
    test(constraint.name, async () => {
        await util_1.mkdtemp(async (workdir) => {
            const jsiiPath = path.join(workdir, ".jsii");
            const maker = new constructs_maker_1.ConstructsMaker({
                codeMakerOutput: workdir,
                outputJsii: jsiiPath,
                targetLanguage: constructs_maker_1.Language.TYPESCRIPT,
            }, [constraint]);
            await maker.generate();
            const manifest = JSON.parse(await fs.promises.readFile(jsiiPath, "utf-8"));
            // patch versions in manifest because they're not stable
            manifest.dependencies.cdktf = "999.999.999";
            manifest.fingerprint = "<fingerprint>";
            manifest.jsiiVersion = "<jsiiVersion>";
            expect(manifest).toMatchSnapshot();
        });
    });
}
exports.expectImportMatchSnapshot = expectImportMatchSnapshot;
function expectModuleToMatchSnapshot(testName, testCategory, fixtureNames) {
    test(testName, async () => {
        await util_1.withTempDir(`${testName.replace(/\s*/, "-")}.test`, async () => {
            const curdir = process.cwd();
            fs.mkdirSync("module");
            fixtureNames.forEach((fixtureName) => {
                fs.copyFileSync(path.join(__dirname, testCategory, "fixtures", fixtureName), path.join(curdir, "module", fixtureName));
            });
            const constraint = new config_1.TerraformModuleConstraint({
                source: "./module",
                name: "module",
                fqn: "module",
            });
            fs.mkdirSync("work");
            const workdir = path.join(curdir, "work");
            const maker = new constructs_maker_1.ConstructsMaker({ codeMakerOutput: workdir, targetLanguage: constructs_maker_1.Language.TYPESCRIPT }, [constraint]);
            await maker.generate();
            const output = fs.readFileSync(path.join(workdir, "modules/module.ts"), "utf-8");
            expect(output).toMatchSnapshot();
        });
    });
}
exports.expectModuleToMatchSnapshot = expectModuleToMatchSnapshot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHVDQUF5QjtBQUN6QixxQ0FBa0Q7QUFDbEQsMERBQWdFO0FBQ2hFLDJDQUE2QjtBQUM3Qix5Q0FHc0I7QUFFdEIsU0FBZ0IseUJBQXlCLENBQ3ZDLFVBQXlDO0lBRXpDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTyxDQUFDLENBQUM7SUFFekIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDL0IsTUFBTSxjQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQzlCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRTdDLE1BQU0sS0FBSyxHQUFHLElBQUksa0NBQWUsQ0FDL0I7Z0JBQ0UsZUFBZSxFQUFFLE9BQU87Z0JBQ3hCLFVBQVUsRUFBRSxRQUFRO2dCQUNwQixjQUFjLEVBQUUsMkJBQVEsQ0FBQyxVQUFVO2FBQ3BDLEVBQ0QsQ0FBQyxVQUFVLENBQUMsQ0FDYixDQUFDO1lBRUYsTUFBTSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFdkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FDekIsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQzlDLENBQUM7WUFFRix3REFBd0Q7WUFDeEQsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDO1lBQzVDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsZUFBZSxDQUFDO1lBQ3ZDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsZUFBZSxDQUFDO1lBRXZDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQWhDRCw4REFnQ0M7QUFFRCxTQUFnQiwyQkFBMkIsQ0FDekMsUUFBZ0IsRUFDaEIsWUFBb0IsRUFDcEIsWUFBc0I7SUFFdEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN4QixNQUFNLGtCQUFXLENBQUMsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ25FLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUM3QixFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXZCLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTtnQkFDbkMsRUFBRSxDQUFDLFlBQVksQ0FDYixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFdBQVcsQ0FBQyxFQUMzRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQ3pDLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztZQUVILE1BQU0sVUFBVSxHQUFHLElBQUksa0NBQXlCLENBQUM7Z0JBQy9DLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixJQUFJLEVBQUUsUUFBUTtnQkFDZCxHQUFHLEVBQUUsUUFBUTthQUNkLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFMUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxrQ0FBZSxDQUMvQixFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLDJCQUFRLENBQUMsVUFBVSxFQUFFLEVBQ2pFLENBQUMsVUFBVSxDQUFDLENBQ2IsQ0FBQztZQUNGLE1BQU0sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRXZCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLG1CQUFtQixDQUFDLEVBQ3ZDLE9BQU8sQ0FDUixDQUFDO1lBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBdkNELGtFQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IHsgbWtkdGVtcCwgd2l0aFRlbXBEaXIgfSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xuaW1wb3J0IHsgTGFuZ3VhZ2UsIENvbnN0cnVjdHNNYWtlciB9IGZyb20gXCIuLi9jb25zdHJ1Y3RzLW1ha2VyXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQge1xuICBUZXJyYWZvcm1EZXBlbmRlbmN5Q29uc3RyYWludCxcbiAgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludCxcbn0gZnJvbSBcIi4uLy4uL2NvbmZpZ1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZXhwZWN0SW1wb3J0TWF0Y2hTbmFwc2hvdChcbiAgY29uc3RyYWludDogVGVycmFmb3JtRGVwZW5kZW5jeUNvbnN0cmFpbnRcbikge1xuICBqZXN0LnNldFRpbWVvdXQoMjQwXzAwMCk7XG5cbiAgdGVzdChjb25zdHJhaW50Lm5hbWUsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBta2R0ZW1wKGFzeW5jICh3b3JrZGlyKSA9PiB7XG4gICAgICBjb25zdCBqc2lpUGF0aCA9IHBhdGguam9pbih3b3JrZGlyLCBcIi5qc2lpXCIpO1xuXG4gICAgICBjb25zdCBtYWtlciA9IG5ldyBDb25zdHJ1Y3RzTWFrZXIoXG4gICAgICAgIHtcbiAgICAgICAgICBjb2RlTWFrZXJPdXRwdXQ6IHdvcmtkaXIsXG4gICAgICAgICAgb3V0cHV0SnNpaToganNpaVBhdGgsXG4gICAgICAgICAgdGFyZ2V0TGFuZ3VhZ2U6IExhbmd1YWdlLlRZUEVTQ1JJUFQsXG4gICAgICAgIH0sXG4gICAgICAgIFtjb25zdHJhaW50XVxuICAgICAgKTtcblxuICAgICAgYXdhaXQgbWFrZXIuZ2VuZXJhdGUoKTtcblxuICAgICAgY29uc3QgbWFuaWZlc3QgPSBKU09OLnBhcnNlKFxuICAgICAgICBhd2FpdCBmcy5wcm9taXNlcy5yZWFkRmlsZShqc2lpUGF0aCwgXCJ1dGYtOFwiKVxuICAgICAgKTtcblxuICAgICAgLy8gcGF0Y2ggdmVyc2lvbnMgaW4gbWFuaWZlc3QgYmVjYXVzZSB0aGV5J3JlIG5vdCBzdGFibGVcbiAgICAgIG1hbmlmZXN0LmRlcGVuZGVuY2llcy5jZGt0ZiA9IFwiOTk5Ljk5OS45OTlcIjtcbiAgICAgIG1hbmlmZXN0LmZpbmdlcnByaW50ID0gXCI8ZmluZ2VycHJpbnQ+XCI7XG4gICAgICBtYW5pZmVzdC5qc2lpVmVyc2lvbiA9IFwiPGpzaWlWZXJzaW9uPlwiO1xuXG4gICAgICBleHBlY3QobWFuaWZlc3QpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4cGVjdE1vZHVsZVRvTWF0Y2hTbmFwc2hvdChcbiAgdGVzdE5hbWU6IHN0cmluZyxcbiAgdGVzdENhdGVnb3J5OiBzdHJpbmcsXG4gIGZpeHR1cmVOYW1lczogc3RyaW5nW11cbikge1xuICB0ZXN0KHRlc3ROYW1lLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgd2l0aFRlbXBEaXIoYCR7dGVzdE5hbWUucmVwbGFjZSgvXFxzKi8sIFwiLVwiKX0udGVzdGAsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGN1cmRpciA9IHByb2Nlc3MuY3dkKCk7XG4gICAgICBmcy5ta2RpclN5bmMoXCJtb2R1bGVcIik7XG5cbiAgICAgIGZpeHR1cmVOYW1lcy5mb3JFYWNoKChmaXh0dXJlTmFtZSkgPT4ge1xuICAgICAgICBmcy5jb3B5RmlsZVN5bmMoXG4gICAgICAgICAgcGF0aC5qb2luKF9fZGlybmFtZSwgdGVzdENhdGVnb3J5LCBcImZpeHR1cmVzXCIsIGZpeHR1cmVOYW1lKSxcbiAgICAgICAgICBwYXRoLmpvaW4oY3VyZGlyLCBcIm1vZHVsZVwiLCBmaXh0dXJlTmFtZSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBjb25zdHJhaW50ID0gbmV3IFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQoe1xuICAgICAgICBzb3VyY2U6IFwiLi9tb2R1bGVcIixcbiAgICAgICAgbmFtZTogXCJtb2R1bGVcIixcbiAgICAgICAgZnFuOiBcIm1vZHVsZVwiLFxuICAgICAgfSk7XG5cbiAgICAgIGZzLm1rZGlyU3luYyhcIndvcmtcIik7XG4gICAgICBjb25zdCB3b3JrZGlyID0gcGF0aC5qb2luKGN1cmRpciwgXCJ3b3JrXCIpO1xuXG4gICAgICBjb25zdCBtYWtlciA9IG5ldyBDb25zdHJ1Y3RzTWFrZXIoXG4gICAgICAgIHsgY29kZU1ha2VyT3V0cHV0OiB3b3JrZGlyLCB0YXJnZXRMYW5ndWFnZTogTGFuZ3VhZ2UuVFlQRVNDUklQVCB9LFxuICAgICAgICBbY29uc3RyYWludF1cbiAgICAgICk7XG4gICAgICBhd2FpdCBtYWtlci5nZW5lcmF0ZSgpO1xuXG4gICAgICBjb25zdCBvdXRwdXQgPSBmcy5yZWFkRmlsZVN5bmMoXG4gICAgICAgIHBhdGguam9pbih3b3JrZGlyLCBcIm1vZHVsZXMvbW9kdWxlLnRzXCIpLFxuICAgICAgICBcInV0Zi04XCJcbiAgICAgICk7XG4gICAgICBleHBlY3Qob3V0cHV0KS50b01hdGNoU25hcHNob3QoKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=