import { Struct } from "./struct";
export interface AttributeTypeModelOptions {
    struct?: Struct;
    isList?: boolean;
    isComputed?: boolean;
    isOptional?: boolean;
    isRequired?: boolean;
    isSingleItem?: boolean;
    isMap?: boolean;
    level?: number;
}
export declare enum TokenizableTypes {
    STRING = "string",
    STRING_LIST = "string[]",
    NUMBER = "number",
    BOOLEAN = "boolean"
}
export interface ComputedComplexOptions {
    name: string;
    type: string;
}
export declare class AttributeTypeModel {
    private _type;
    isList: boolean;
    isComputed: boolean;
    isOptional: boolean;
    isRequired?: boolean;
    isSingleItem?: boolean;
    isMap: boolean;
    struct?: Struct;
    level?: number;
    typeName: string;
    constructor(_type: string, options: AttributeTypeModelOptions);
    get name(): string;
    get storedName(): string;
    get isComplex(): boolean;
    get isPrimitive(): boolean;
    get isString(): boolean;
    get isNumber(): boolean;
    get isStringList(): boolean;
    get isNumberList(): boolean;
    get isBooleanList(): boolean;
    get isBoolean(): boolean;
    get isStringMap(): boolean;
    get isNumberMap(): boolean;
    get isBooleanMap(): boolean;
    get isComputedComplex(): boolean;
    get isRootType(): boolean;
    get isComputedPrimitive(): boolean;
    get isTokenizable(): boolean;
    get innerType(): string;
}
