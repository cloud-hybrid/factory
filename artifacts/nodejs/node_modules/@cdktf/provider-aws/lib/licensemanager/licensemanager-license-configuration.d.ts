import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * AWS License Manager.
 *
 * @stability stable
 */
export interface LicensemanagerLicenseConfigurationConfig extends cdktf.TerraformMetaArguments {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/licensemanager_license_configuration.html#description LicensemanagerLicenseConfiguration#description}.
     *
     * @stability stable
     */
    readonly description?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/licensemanager_license_configuration.html#license_count LicensemanagerLicenseConfiguration#license_count}.
     *
     * @stability stable
     */
    readonly licenseCount?: number;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/licensemanager_license_configuration.html#license_count_hard_limit LicensemanagerLicenseConfiguration#license_count_hard_limit}.
     *
     * @stability stable
     */
    readonly licenseCountHardLimit?: boolean | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/licensemanager_license_configuration.html#license_counting_type LicensemanagerLicenseConfiguration#license_counting_type}.
     *
     * @stability stable
     */
    readonly licenseCountingType: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/licensemanager_license_configuration.html#license_rules LicensemanagerLicenseConfiguration#license_rules}.
     *
     * @stability stable
     */
    readonly licenseRules?: string[];
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/licensemanager_license_configuration.html#name LicensemanagerLicenseConfiguration#name}.
     *
     * @stability stable
     */
    readonly name: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/licensemanager_license_configuration.html#tags LicensemanagerLicenseConfiguration#tags}.
     *
     * @stability stable
     */
    readonly tags?: {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/licensemanager_license_configuration.html#tags_all LicensemanagerLicenseConfiguration#tags_all}.
     *
     * @stability stable
     */
    readonly tagsAll?: {
        [key: string]: string;
    } | cdktf.IResolvable;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/licensemanager_license_configuration.html aws_licensemanager_license_configuration}.
 *
 * @stability stable
 */
export declare class LicensemanagerLicenseConfiguration extends cdktf.TerraformResource {
    /**
     * @stability stable
     */
    static readonly tfResourceType: string;
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/licensemanager_license_configuration.html aws_licensemanager_license_configuration} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config: LicensemanagerLicenseConfigurationConfig);
    /**
     * @stability stable
     */
    get arn(): string;
    private _description?;
    /**
     * @stability stable
     */
    get description(): string;
    /**
     * @stability stable
     */
    set description(value: string);
    /**
     * @stability stable
     */
    resetDescription(): void;
    /**
     * @stability stable
     */
    get descriptionInput(): string | undefined;
    /**
     * @stability stable
     */
    get id(): string;
    private _licenseCount?;
    /**
     * @stability stable
     */
    get licenseCount(): number;
    /**
     * @stability stable
     */
    set licenseCount(value: number);
    /**
     * @stability stable
     */
    resetLicenseCount(): void;
    /**
     * @stability stable
     */
    get licenseCountInput(): number | undefined;
    private _licenseCountHardLimit?;
    /**
     * @stability stable
     */
    get licenseCountHardLimit(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set licenseCountHardLimit(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetLicenseCountHardLimit(): void;
    /**
     * @stability stable
     */
    get licenseCountHardLimitInput(): boolean | cdktf.IResolvable | undefined;
    private _licenseCountingType?;
    /**
     * @stability stable
     */
    get licenseCountingType(): string;
    /**
     * @stability stable
     */
    set licenseCountingType(value: string);
    /**
     * @stability stable
     */
    get licenseCountingTypeInput(): string | undefined;
    private _licenseRules?;
    /**
     * @stability stable
     */
    get licenseRules(): string[];
    /**
     * @stability stable
     */
    set licenseRules(value: string[]);
    /**
     * @stability stable
     */
    resetLicenseRules(): void;
    /**
     * @stability stable
     */
    get licenseRulesInput(): string[] | undefined;
    private _name?;
    /**
     * @stability stable
     */
    get name(): string;
    /**
     * @stability stable
     */
    set name(value: string);
    /**
     * @stability stable
     */
    get nameInput(): string | undefined;
    /**
     * @stability stable
     */
    get ownerAccountId(): string;
    private _tags?;
    /**
     * @stability stable
     */
    get tags(): {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set tags(value: {
        [key: string]: string;
    } | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetTags(): void;
    /**
     * @stability stable
     */
    get tagsInput(): cdktf.IResolvable | {
        [key: string]: string;
    } | undefined;
    private _tagsAll?;
    /**
     * @stability stable
     */
    get tagsAll(): {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set tagsAll(value: {
        [key: string]: string;
    } | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetTagsAll(): void;
    /**
     * @stability stable
     */
    get tagsAllInput(): cdktf.IResolvable | {
        [key: string]: string;
    } | undefined;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
