"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LakeformationDataLakeSettings = exports.lakeformationDataLakeSettingsCreateTableDefaultPermissionsToTerraform = exports.lakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function lakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        permissions: cdktf.listMapper(cdktf.stringToTerraform)(struct.permissions),
        principal: cdktf.stringToTerraform(struct.principal),
    };
}
exports.lakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsToTerraform = lakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsToTerraform;
function lakeformationDataLakeSettingsCreateTableDefaultPermissionsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        permissions: cdktf.listMapper(cdktf.stringToTerraform)(struct.permissions),
        principal: cdktf.stringToTerraform(struct.principal),
    };
}
exports.lakeformationDataLakeSettingsCreateTableDefaultPermissionsToTerraform = lakeformationDataLakeSettingsCreateTableDefaultPermissionsToTerraform;
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/lakeformation_data_lake_settings.html aws_lakeformation_data_lake_settings}.
 *
 * @stability stable
 */
class LakeformationDataLakeSettings extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/lakeformation_data_lake_settings.html aws_lakeformation_data_lake_settings} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws_lakeformation_data_lake_settings',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._admins = config.admins;
        this._catalogId = config.catalogId;
        this._trustedResourceOwners = config.trustedResourceOwners;
        this._createDatabaseDefaultPermissions = config.createDatabaseDefaultPermissions;
        this._createTableDefaultPermissions = config.createTableDefaultPermissions;
    }
    /**
     * @stability stable
     */
    get admins() {
        return this.getListAttribute('admins');
    }
    /**
     * @stability stable
     */
    set admins(value) {
        this._admins = value;
    }
    /**
     * @stability stable
     */
    resetAdmins() {
        this._admins = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get adminsInput() {
        return this._admins;
    }
    /**
     * @stability stable
     */
    get catalogId() {
        return this.getStringAttribute('catalog_id');
    }
    /**
     * @stability stable
     */
    set catalogId(value) {
        this._catalogId = value;
    }
    /**
     * @stability stable
     */
    resetCatalogId() {
        this._catalogId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get catalogIdInput() {
        return this._catalogId;
    }
    // id - computed: true, optional: true, required: false
    /**
     * @stability stable
     */
    get id() {
        return this.getStringAttribute('id');
    }
    /**
     * @stability stable
     */
    get trustedResourceOwners() {
        return this.getListAttribute('trusted_resource_owners');
    }
    /**
     * @stability stable
     */
    set trustedResourceOwners(value) {
        this._trustedResourceOwners = value;
    }
    /**
     * @stability stable
     */
    resetTrustedResourceOwners() {
        this._trustedResourceOwners = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get trustedResourceOwnersInput() {
        return this._trustedResourceOwners;
    }
    /**
     * @stability stable
     */
    get createDatabaseDefaultPermissions() {
        // Getting the computed value is not yet implemented
        return this.interpolationForAttribute('create_database_default_permissions');
    }
    /**
     * @stability stable
     */
    set createDatabaseDefaultPermissions(value) {
        this._createDatabaseDefaultPermissions = value;
    }
    /**
     * @stability stable
     */
    resetCreateDatabaseDefaultPermissions() {
        this._createDatabaseDefaultPermissions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get createDatabaseDefaultPermissionsInput() {
        return this._createDatabaseDefaultPermissions;
    }
    /**
     * @stability stable
     */
    get createTableDefaultPermissions() {
        // Getting the computed value is not yet implemented
        return this.interpolationForAttribute('create_table_default_permissions');
    }
    /**
     * @stability stable
     */
    set createTableDefaultPermissions(value) {
        this._createTableDefaultPermissions = value;
    }
    /**
     * @stability stable
     */
    resetCreateTableDefaultPermissions() {
        this._createTableDefaultPermissions = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get createTableDefaultPermissionsInput() {
        return this._createTableDefaultPermissions;
    }
    // =========
    // SYNTHESIS
    // =========
    /**
     * @stability stable
     */
    synthesizeAttributes() {
        return {
            admins: cdktf.listMapper(cdktf.stringToTerraform)(this._admins),
            catalog_id: cdktf.stringToTerraform(this._catalogId),
            trusted_resource_owners: cdktf.listMapper(cdktf.stringToTerraform)(this._trustedResourceOwners),
            create_database_default_permissions: cdktf.listMapper(lakeformationDataLakeSettingsCreateDatabaseDefaultPermissionsToTerraform)(this._createDatabaseDefaultPermissions),
            create_table_default_permissions: cdktf.listMapper(lakeformationDataLakeSettingsCreateTableDefaultPermissionsToTerraform)(this._createTableDefaultPermissions),
        };
    }
}
exports.LakeformationDataLakeSettings = LakeformationDataLakeSettings;
_a = JSII_RTTI_SYMBOL_1;
LakeformationDataLakeSettings[_a] = { fqn: "@cdktf/provider-aws.lakeformation.LakeformationDataLakeSettings", version: "3.0.1" };
// =================
// STATIC PROPERTIES
// =================
/**
 * @stability stable
 */
LakeformationDataLakeSettings.tfResourceType = "aws_lakeformation_data_lake_settings";
//# sourceMappingURL=data:application/json;base64,