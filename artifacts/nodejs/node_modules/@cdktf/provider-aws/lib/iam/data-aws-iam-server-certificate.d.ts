import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * AWS Identity and Access Management.
 *
 * @stability stable
 */
export interface DataAwsIamServerCertificateConfig extends cdktf.TerraformMetaArguments {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/iam_server_certificate.html#latest DataAwsIamServerCertificate#latest}.
     *
     * @stability stable
     */
    readonly latest?: boolean | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/iam_server_certificate.html#name DataAwsIamServerCertificate#name}.
     *
     * @stability stable
     */
    readonly name?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/iam_server_certificate.html#name_prefix DataAwsIamServerCertificate#name_prefix}.
     *
     * @stability stable
     */
    readonly namePrefix?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/iam_server_certificate.html#path_prefix DataAwsIamServerCertificate#path_prefix}.
     *
     * @stability stable
     */
    readonly pathPrefix?: string;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/d/iam_server_certificate.html aws_iam_server_certificate}.
 *
 * @stability stable
 */
export declare class DataAwsIamServerCertificate extends cdktf.TerraformDataSource {
    /**
     * @stability stable
     */
    static readonly tfResourceType: string;
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/d/iam_server_certificate.html aws_iam_server_certificate} Data Source.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config?: DataAwsIamServerCertificateConfig);
    /**
     * @stability stable
     */
    get arn(): string;
    /**
     * @stability stable
     */
    get certificateBody(): string;
    /**
     * @stability stable
     */
    get certificateChain(): string;
    /**
     * @stability stable
     */
    get expirationDate(): string;
    /**
     * @stability stable
     */
    get id(): string;
    private _latest?;
    /**
     * @stability stable
     */
    get latest(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set latest(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetLatest(): void;
    /**
     * @stability stable
     */
    get latestInput(): boolean | cdktf.IResolvable | undefined;
    private _name?;
    /**
     * @stability stable
     */
    get name(): string;
    /**
     * @stability stable
     */
    set name(value: string);
    /**
     * @stability stable
     */
    resetName(): void;
    /**
     * @stability stable
     */
    get nameInput(): string | undefined;
    private _namePrefix?;
    /**
     * @stability stable
     */
    get namePrefix(): string;
    /**
     * @stability stable
     */
    set namePrefix(value: string);
    /**
     * @stability stable
     */
    resetNamePrefix(): void;
    /**
     * @stability stable
     */
    get namePrefixInput(): string | undefined;
    /**
     * @stability stable
     */
    get path(): string;
    private _pathPrefix?;
    /**
     * @stability stable
     */
    get pathPrefix(): string;
    /**
     * @stability stable
     */
    set pathPrefix(value: string);
    /**
     * @stability stable
     */
    resetPathPrefix(): void;
    /**
     * @stability stable
     */
    get pathPrefixInput(): string | undefined;
    /**
     * @stability stable
     */
    get uploadDate(): string;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
