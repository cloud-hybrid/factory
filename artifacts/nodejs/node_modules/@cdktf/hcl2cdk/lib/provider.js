"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProviderRequirements = exports.getBlockTypeAtPath = void 0;
function getBlockTypeAtPath(schema, path) {
    var _a;
    const parts = path.split(".");
    if (parts.length < 2) {
        // Too short to be a valid path
        return null;
    }
    const isDataSource = parts[0] === "data";
    if (isDataSource) {
        parts.shift();
    }
    const providerName = parts.shift();
    const resourceName = parts.shift();
    const fullProviderName = Object.keys((schema === null || schema === void 0 ? void 0 : schema.provider_schemas) || {}).find((name) => name.endsWith(providerName));
    const fullResourceName = `${providerName}_${resourceName}`;
    if (!fullProviderName) {
        // No provider found with that name
        return null;
    }
    const provider = (_a = schema.provider_schemas) === null || _a === void 0 ? void 0 : _a[fullProviderName];
    if (!provider) {
        // Could not find provider
        return null;
    }
    const resources = isDataSource
        ? provider.data_source_schemas
        : provider.resource_schemas;
    let resource = resources[fullResourceName];
    if (!resource) {
        // Could not find resource
        return null;
    }
    if (parts.length === 0) {
        // No property specified
        return null;
    }
    // We don't care for
    let currentSchema = resource;
    do {
        const part = parts.shift();
        // console.log("Doing part", part);
        if (!currentSchema.block.block_types ||
            !currentSchema.block.block_types.hasOwnProperty(part)) {
            // console.log("didnt find it");
            // Found no block property with this name, there could be an attribute, but we don't care at this point
            return null;
        }
        currentSchema = currentSchema.block.block_types[part];
        // console.log("New schema", currentSchema);
    } while (parts.length > 0);
    return currentSchema;
}
exports.getBlockTypeAtPath = getBlockTypeAtPath;
function getProviderRequirements(plan) {
    var _a;
    // In Terraform one can implicitly define the provider by using resources of that type
    const explicitProviders = Object.keys(plan.provider || {});
    const implicitProviders = Object.keys({ ...plan.resource, ...plan.data })
        .filter((type) => type !== "terraform_remote_state")
        .map((type) => type.split("_")[0]);
    const providerRequirements = Array.from(new Set([...explicitProviders, ...implicitProviders])).reduce((carry, req) => ({ ...carry, [req]: "*" }), {});
    (_a = plan.terraform) === null || _a === void 0 ? void 0 : _a.forEach(({ required_providers }) => (required_providers || []).forEach((providerBlock) => Object.entries(providerBlock).forEach(([key, value]) => {
        let name, version;
        if (typeof value === "string") {
            name = key;
            version = value;
        }
        else {
            name = value.source;
            version = value.version;
        }
        if (!name) {
            return;
        }
        // implicitly only the last part of the path is used (e.g. docker for kreuzwerker/docker)
        const parts = name.split("/");
        if (parts.length > 1) {
            delete providerRequirements[parts.pop() || ""];
        }
        providerRequirements[name] = version || "*";
    })));
    return providerRequirements;
}
exports.getProviderRequirements = getProviderRequirements;
//# sourceMappingURL=data:application/json;base64,