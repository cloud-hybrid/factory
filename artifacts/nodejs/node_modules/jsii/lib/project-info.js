"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadProjectInfo = void 0;
const spec = require("@jsii/spec");
const fs = require("fs-extra");
const log4js = require("log4js");
const path = require("path");
const semver = require("semver");
const ts = require("typescript");
const jsii_diagnostic_1 = require("./jsii-diagnostic");
const utils_1 = require("./utils");
// eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports
const spdx = require('spdx-license-list/simple');
const LOG = log4js.getLogger('jsii/package-info');
async function loadProjectInfo(projectRoot) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
    const packageJsonPath = path.join(projectRoot, 'package.json');
    // eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-require-imports
    const pkg = await fs.readJson(packageJsonPath);
    const diagnostics = [];
    let bundleDependencies;
    for (const name of (_b = (_a = pkg.bundleDependencies) !== null && _a !== void 0 ? _a : pkg.bundledDependencies) !== null && _b !== void 0 ? _b : []) {
        const version = (_c = pkg.dependencies) === null || _c === void 0 ? void 0 : _c[name];
        if (!version) {
            throw new Error(`The "package.json" file has "${name}" in "bundleDependencies", but it is not declared in "dependencies"`);
        }
        if (pkg.peerDependencies && name in pkg.peerDependencies) {
            throw new Error(`The "package.json" file has "${name}" in "bundleDependencies", and also in "peerDependencies"`);
        }
        bundleDependencies = bundleDependencies !== null && bundleDependencies !== void 0 ? bundleDependencies : {};
        bundleDependencies[name] = _resolveVersion(version, projectRoot).version;
    }
    // Check peerDependencies are also in devDependencies
    // You need this to write tests properly. There are probably cases where
    // it makes sense to have this different, so most of what this checking
    // produces is warnings, not errors.
    const devDependencies = (_d = pkg.devDependencies) !== null && _d !== void 0 ? _d : {};
    for (const [name, rng] of Object.entries((_e = pkg.peerDependencies) !== null && _e !== void 0 ? _e : {})) {
        const range = new semver.Range(_resolveVersion(rng, projectRoot).version);
        const minVersion = (_f = semver.minVersion(range)) === null || _f === void 0 ? void 0 : _f.raw;
        if (!(name in devDependencies) ||
            devDependencies[name] !== `${minVersion}`) {
            diagnostics.push(jsii_diagnostic_1.JsiiDiagnostic.JSII_0006_MISSING_DEV_DEPENDENCY.createDetached(name, `${rng}`, `${minVersion}`, `${devDependencies[name]}`));
            continue;
        }
    }
    const bundled = new Set(Object.keys(bundleDependencies !== null && bundleDependencies !== void 0 ? bundleDependencies : {}));
    const dependencies = filterDictByKey((_g = pkg.dependencies) !== null && _g !== void 0 ? _g : {}, (depName) => !bundled.has(depName));
    const peerDependencies = (_h = pkg.peerDependencies) !== null && _h !== void 0 ? _h : {};
    const resolver = new DependencyResolver();
    const resolved = await resolver.discoverDependencyTree(projectRoot, {
        ...dependencies,
        ...peerDependencies,
    });
    const transitiveDependencies = resolver.assemblyClosure(resolved);
    const metadata = mergeMetadata({
        jsii: {
            pacmak: {
                // When `true`, `jsii-pacmak` will use the `Jsii$Default` implementation in code generation even for dependencies.
                hasDefaultInterfaces: true,
            },
        },
    }, (_j = pkg.jsii) === null || _j === void 0 ? void 0 : _j.metadata);
    const projectInfo = {
        projectRoot,
        packageJson: pkg,
        name: _required(pkg.name, 'The "package.json" file must specify the "name" attribute'),
        version: _required(pkg.version, 'The "package.json" file must specify the "version" attribute'),
        deprecated: pkg.deprecated,
        stability: _validateStability(pkg.stability, pkg.deprecated),
        author: _toPerson(_required(pkg.author, 'The "package.json" file must specify the "author" attribute'), 'author'),
        repository: _toRepository(_required(pkg.repository, 'The "package.json" file must specify the "repository" attribute')),
        license: _validateLicense(pkg.license),
        keywords: pkg.keywords,
        main: _required(pkg.main, 'The "package.json" file must specify the "main" attribute'),
        types: _required(pkg.types, 'The "package.json" file must specify the "types" attribute'),
        dependencies,
        peerDependencies,
        dependencyClosure: transitiveDependencies,
        bundleDependencies,
        targets: {
            ..._required(pkg.jsii, 'The "package.json" file must specify the "jsii" attribute').targets,
            js: { npm: pkg.name },
        },
        metadata,
        jsiiVersionFormat: _validateVersionFormat((_k = pkg.jsii.versionFormat) !== null && _k !== void 0 ? _k : 'full'),
        description: pkg.description,
        homepage: pkg.homepage,
        contributors: (_l = pkg.contributors) === null || _l === void 0 ? void 0 : _l.map((contrib, index) => _toPerson(contrib, `contributors[${index}]`, 'contributor')),
        excludeTypescript: (_o = (_m = pkg.jsii) === null || _m === void 0 ? void 0 : _m.excludeTypescript) !== null && _o !== void 0 ? _o : [],
        projectReferences: (_p = pkg.jsii) === null || _p === void 0 ? void 0 : _p.projectReferences,
        tsc: {
            outDir: (_r = (_q = pkg.jsii) === null || _q === void 0 ? void 0 : _q.tsc) === null || _r === void 0 ? void 0 : _r.outDir,
            rootDir: (_t = (_s = pkg.jsii) === null || _s === void 0 ? void 0 : _s.tsc) === null || _t === void 0 ? void 0 : _t.rootDir,
        },
        bin: pkg.bin,
        exports: pkg.exports,
        diagnostics: _loadDiagnostics((_u = pkg.jsii) === null || _u === void 0 ? void 0 : _u.diagnostics),
    };
    return { projectInfo, diagnostics };
}
exports.loadProjectInfo = loadProjectInfo;
function _guessRepositoryType(url) {
    if (url.endsWith('.git')) {
        return 'git';
    }
    const parts = /^([^:]+):\/\//.exec(url);
    if ((parts === null || parts === void 0 ? void 0 : parts[1]) !== 'http' && (parts === null || parts === void 0 ? void 0 : parts[1]) !== 'https') {
        return parts[1];
    }
    throw new Error(`The "package.json" file must specify the "repository.type" attribute (could not guess from ${url})`);
}
class DependencyResolver {
    constructor() {
        this.cache = new Map();
    }
    /**
     * Discover the dependency tree starting at 'root', validating versions as we go along
     *
     * This primes the data structures in this class and should be called first.
     *
     * Return the resolved jsii dependency paths
     */
    async discoverDependencyTree(root, dependencies) {
        const ret = {};
        for (const [name, declaration] of Object.entries(dependencies)) {
            // eslint-disable-next-line no-await-in-loop
            const resolved = await this.resolveDependency(root, name, declaration);
            const actualVersion = resolved.dependencyInfo.assembly.version;
            if (!semver.satisfies(actualVersion, declaration)) {
                throw new Error(`Declared dependency on version ${declaration} of ${name}, but version ${actualVersion} was found`);
            }
            ret[name] = resolved.resolvedFile;
        }
        return ret;
    }
    /**
     * From a set of resolved paths, recursively return all assemblies
     */
    assemblyClosure(resolved) {
        const closure = new Map();
        const queue = Array.from(Object.values(resolved));
        while (queue.length > 0) {
            const next = queue.shift();
            const resolved = this.cache.get(next);
            if (!resolved) {
                throw new Error(`Path ${next} not seen before`);
            }
            if (closure.has(next)) {
                continue;
            }
            closure.set(next, resolved.assembly);
            queue.push(...Object.values(resolved.resolvedDependencies));
        }
        return Array.from(closure.values());
    }
    async resolveDependency(root, name, declaration) {
        const { version: versionString, localPackage } = _resolveVersion(declaration, root);
        const version = new semver.Range(versionString);
        if (!version) {
            throw new Error(`Invalid semver expression for ${name}: ${versionString}`);
        }
        const jsiiFile = await _tryResolveAssembly(name, localPackage, root);
        LOG.debug(`Resolved dependency ${name} to ${jsiiFile}`);
        return {
            resolvedVersion: versionString,
            resolvedFile: jsiiFile,
            dependencyInfo: await this.loadAssemblyAndRecurse(jsiiFile),
        };
    }
    async loadAssemblyAndRecurse(jsiiFile) {
        // Only recurse if we haven't seen this assembly yet
        if (this.cache.has(jsiiFile)) {
            return this.cache.get(jsiiFile);
        }
        // eslint-disable-next-line no-await-in-loop
        const assembly = await this.loadAssembly(jsiiFile);
        // Continue loading any dependencies declared in the asm
        const resolvedDependencies = assembly.dependencies
            ? await this.discoverDependencyTree(path.dirname(jsiiFile), assembly.dependencies)
            : {};
        const depInfo = {
            assembly,
            resolvedDependencies,
        };
        this.cache.set(jsiiFile, depInfo);
        return depInfo;
    }
    /**
     * Load a JSII filename and validate it; cached to avoid redundant loads of the same JSII assembly
     */
    async loadAssembly(jsiiFileName) {
        try {
            return await fs.readJson(jsiiFileName);
        }
        catch (e) {
            throw new Error(`Error loading ${jsiiFileName}: ${e}`);
        }
    }
}
function _required(value, message) {
    if (value == null) {
        throw new Error(message);
    }
    return value;
}
function _toPerson(value, field, defaultRole = field) {
    if (typeof value === 'string') {
        value = utils_1.parsePerson(value);
    }
    return {
        name: _required(value.name, `The "package.json" file must specify the "${field}.name" attribute`),
        roles: value.roles ? [...new Set(value.roles)] : [defaultRole],
        email: value.email,
        url: value.url,
        organization: value.organization ? value.organization : undefined,
    };
}
function _toRepository(value) {
    if (typeof value === 'string') {
        value = utils_1.parseRepository(value);
    }
    return {
        url: _required(value.url, 'The "package.json" file must specify the "repository.url" attribute'),
        type: value.type || _guessRepositoryType(value.url),
        directory: value.directory,
    };
}
async function _tryResolveAssembly(mod, localPackage, searchPath) {
    if (localPackage) {
        const result = path.join(localPackage, '.jsii');
        if (!fs.existsSync(result)) {
            throw new Error(`Assembly does not exist: ${result}`);
        }
        return result;
    }
    try {
        const dependencyDir = await utils_1.findDependencyDirectory(mod, searchPath);
        return path.join(dependencyDir, '.jsii');
    }
    catch (e) {
        throw new Error(`Unable to locate jsii assembly for "${mod}". If this module is not jsii-enabled, it must also be declared under bundledDependencies: ${e}`);
    }
}
function _validateLicense(id) {
    if (id === 'UNLICENSED') {
        return id;
    }
    if (!spdx.has(id)) {
        throw new Error(`Invalid license identifier "${id}", see valid license identifiers at https://spdx.org/licenses/`);
    }
    return id;
}
function _validateVersionFormat(format) {
    if (format !== 'short' && format !== 'full') {
        throw new Error(`Invalid jsii.versionFormat "${format}", it must be either "short" or "full" (the default)`);
    }
    return format;
}
function _validateStability(stability, deprecated) {
    if (!stability && deprecated) {
        stability = spec.Stability.Deprecated;
    }
    else if (deprecated && stability !== spec.Stability.Deprecated) {
        throw new Error(`Package is deprecated (${deprecated}), but it's stability is ${stability} and not ${spec.Stability.Deprecated}`);
    }
    if (!stability) {
        return undefined;
    }
    if (!Object.values(spec.Stability).includes(stability)) {
        throw new Error(`Invalid stability "${stability}", it must be one of ${Object.values(spec.Stability).join(', ')}`);
    }
    return stability;
}
/**
 * Resolves an NPM package specifier to a version range
 *
 * If it was already a version range, return it. If it the
 * package references a local file, return the version that
 * package is at.
 */
function _resolveVersion(dep, searchPath) {
    const matches = /^file:(.+)$/.exec(dep);
    if (!matches) {
        return { version: dep };
    }
    const localPackage = path.resolve(searchPath, matches[1]);
    return {
        // Rendering as a caret version to maintain uniformity against the "standard".
        // eslint-disable-next-line @typescript-eslint/no-require-imports,@typescript-eslint/no-var-requires
        version: `^${fs.readJsonSync(path.join(localPackage, 'package.json')).version}`,
        localPackage,
    };
}
/**
 * Merges two metadata blocks together.
 *
 * @param base the base values
 * @param user the user-supplied values, which can override the `base` values
 *
 * @returns the merged metadata block
 */
function mergeMetadata(base, user) {
    if (user == null) {
        return base;
    }
    return mergeObjects(base, user);
    function mergeObjects(base, override) {
        const result = {};
        const allKeys = Array.from(new Set([...Object.keys(base), ...Object.keys(override)])).sort();
        for (const key of allKeys) {
            const baseValue = base[key];
            const overrideValue = override[key];
            if (typeof baseValue === 'object' && typeof overrideValue === 'object') {
                if (overrideValue != null) {
                    result[key] = mergeObjects(baseValue, overrideValue);
                }
            }
            else {
                result[key] = overrideValue !== null && overrideValue !== void 0 ? overrideValue : baseValue;
            }
        }
        return result;
    }
}
function _loadDiagnostics(entries) {
    if (entries === undefined || Object.keys(entries).length === 0) {
        return undefined;
    }
    const result = {};
    for (const code of Object.keys(entries)) {
        let category;
        switch (entries[code].trim().toLowerCase()) {
            case 'error':
                category = ts.DiagnosticCategory.Error;
                break;
            case 'warning':
                category = ts.DiagnosticCategory.Warning;
                break;
            case 'suggestion':
                category = ts.DiagnosticCategory.Suggestion;
                break;
            case 'message':
                category = ts.DiagnosticCategory.Message;
                break;
            default:
                throw new Error(`Invalid category '${entries[code]}' for code '${code}'`);
        }
        result[code] = category;
    }
    return result;
}
function filterDictByKey(xs, predicate) {
    const ret = {};
    for (const [key, value] of Object.entries(xs)) {
        if (predicate(key)) {
            ret[key] = value;
        }
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,