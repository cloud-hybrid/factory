"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Validator = void 0;
const spec = require("@jsii/spec");
const Case = require("case");
// eslint-disable-next-line @typescript-eslint/no-require-imports
const deepEqual = require("deep-equal");
const ts = require("typescript");
const jsii_diagnostic_1 = require("./jsii-diagnostic");
const node_bindings_1 = require("./node-bindings");
const bindings = require("./node-bindings");
class Validator {
    constructor(projectInfo, assembly) {
        this.projectInfo = projectInfo;
        this.assembly = assembly;
        this._diagnostics = new Array();
    }
    async emit() {
        this._diagnostics = [];
        for (const validation of Validator.VALIDATIONS) {
            validation(this, this.assembly, (diag) => this._diagnostics.push(diag));
        }
        try {
            return await Promise.resolve({
                diagnostics: this._diagnostics,
                emitSkipped: this._diagnostics.some((diag) => diag.category === ts.DiagnosticCategory.Error),
            });
        }
        finally {
            // Clearing ``this._diagnostics`` to allow contents to be garbage-collected.
            delete this._diagnostics;
        }
    }
}
exports.Validator = Validator;
Validator.VALIDATIONS = _defaultValidations();
function _defaultValidations() {
    return [
        _typeNamesMustUsePascalCase,
        _enumMembersMustUserUpperSnakeCase,
        _memberNamesMustUseCamelCase,
        _staticConstantNamesMustUseUpperSnakeCase,
        _memberNamesMustNotLookLikeJavaGettersOrSetters,
        _allTypeReferencesAreValid,
        _inehritanceDoesNotChangeContracts,
        _staticMembersAndNestedTypesMustNotSharePascalCaseName,
    ];
    function _typeNamesMustUsePascalCase(_, assembly, diagnostic) {
        for (const type of _allTypes(assembly)) {
            if (type.name !== Case.pascal(type.name)) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_8000_PASCAL_CASED_TYPE_NAMES.createDetached(type.name));
            }
        }
    }
    function _enumMembersMustUserUpperSnakeCase(_, assembly, diagnostic) {
        for (const type of _allTypes(assembly)) {
            if (!spec.isEnumType(type)) {
                continue;
            }
            for (const member of type.members) {
                if (member.name && !isConstantCase(member.name)) {
                    diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_8001_ALL_CAPS_ENUM_MEMBERS.createDetached(member.name, type.fqn));
                }
            }
        }
    }
    function _memberNamesMustUseCamelCase(_, assembly, diagnostic) {
        for (const { member, type } of _allMembers(assembly)) {
            if (member.static && member.const) {
                continue;
            }
            if (member.name && member.name !== Case.camel(member.name)) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_8002_CAMEL_CASED_MEMBERS.createDetached(member.name, type.fqn));
            }
        }
    }
    function _staticConstantNamesMustUseUpperSnakeCase(_, assembly, diagnostic) {
        for (const { member, type } of _allMembers(assembly)) {
            if (!member.static || !member.const) {
                continue;
            }
            if (member.name &&
                !isConstantCase(member.name) &&
                member.name !== Case.pascal(member.name) &&
                member.name !== Case.camel(member.name)) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_8003_STATIC_CONST_CASING.createDetached(member.name, type.name));
            }
        }
    }
    function _memberNamesMustNotLookLikeJavaGettersOrSetters(_, assembly, diagnostic) {
        var _a;
        for (const { member, type } of _allMembers(assembly)) {
            if (!member.name) {
                continue;
            }
            const snakeName = Case.snake(member.name);
            if (snakeName.startsWith('get_') &&
                _isEmpty(member.parameters)) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5000_JAVA_GETTERS.createDetached(member.name, type.name));
            }
            else if (snakeName.startsWith('set_') &&
                ((_a = member.parameters) !== null && _a !== void 0 ? _a : []).length === 1) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5001_JAVA_SETTERS.createDetached(member.name, type.name));
            }
        }
    }
    function _allTypeReferencesAreValid(validator, assembly, diagnostic) {
        var _a, _b;
        for (const typeRef of _allTypeReferences(assembly)) {
            const [assm] = typeRef.fqn.split('.');
            if (assembly.name === assm) {
                if (!(typeRef.fqn in ((_a = assembly.types) !== null && _a !== void 0 ? _a : {}))) {
                    diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_3000_EXPORTED_API_USES_HIDDEN_TYPE.create(typeRef.node, // Pretend there is always a value
                    typeRef.fqn));
                }
                continue;
            }
            const foreignAssm = validator.projectInfo.dependencyClosure.find((dep) => dep.name === assm);
            if (!foreignAssm) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_9000_UNKNOWN_MODULE.createDetached(assm));
                continue;
            }
            if (!(typeRef.fqn in ((_b = foreignAssm.types) !== null && _b !== void 0 ? _b : {}))) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_9001_TYPE_NOT_FOUND.createDetached(typeRef));
            }
        }
    }
    function _inehritanceDoesNotChangeContracts(validator, assembly, diagnostic) {
        var _a, _b, _c, _d, _e, _f;
        for (const type of _allTypes(assembly)) {
            if (spec.isClassType(type)) {
                for (const method of (_a = type.methods) !== null && _a !== void 0 ? _a : []) {
                    _validateMethodOverride(method, type);
                }
                for (const property of (_b = type.properties) !== null && _b !== void 0 ? _b : []) {
                    _validatePropertyOverride(property, type);
                }
            }
            if (spec.isClassOrInterfaceType(type) &&
                ((_d = (_c = type.interfaces) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0) {
                for (const method of (_e = type.methods) !== null && _e !== void 0 ? _e : []) {
                    // Overrides "win" over implementations
                    if (method.overrides) {
                        continue;
                    }
                    _validateMethodImplementation(method, type);
                }
                for (const property of (_f = type.properties) !== null && _f !== void 0 ? _f : []) {
                    _validatePropertyImplementation(property, type);
                }
            }
        }
        function _validateMethodOverride(method, type) {
            var _a;
            if (!type.base) {
                return false;
            }
            const baseType = _dereference(type.base, assembly, validator);
            if (!baseType) {
                return false;
            }
            const overridden = ((_a = baseType.methods) !== null && _a !== void 0 ? _a : []).find((m) => m.name === method.name);
            if (!overridden) {
                return _validateMethodOverride(method, baseType);
            }
            _assertSignaturesMatch(overridden, method, `${type.fqn}#${method.name}`, `overriding ${baseType.fqn}`);
            method.overrides = baseType.fqn;
            return true;
        }
        function _validatePropertyOverride(property, type) {
            var _a;
            if (!type.base) {
                return false;
            }
            const baseType = _dereference(type.base, assembly, validator);
            if (!baseType) {
                return false;
            }
            const overridden = ((_a = baseType.properties) !== null && _a !== void 0 ? _a : []).find((p) => p.name === property.name);
            if (!overridden) {
                return _validatePropertyOverride(property, baseType);
            }
            _assertPropertiesMatch(overridden, property, `${type.fqn}#${property.name}`, `overriding ${baseType.fqn}`);
            property.overrides = baseType.fqn;
            return true;
        }
        function _validateMethodImplementation(method, type) {
            var _a;
            if (!type.interfaces) {
                // Abstract classes may not directly implement all members, need to check their supertypes...
                if (spec.isClassType(type) && type.base && type.abstract) {
                    return _validateMethodImplementation(method, _dereference(type.base, assembly, validator));
                }
                return false;
            }
            for (const iface of type.interfaces) {
                const ifaceType = _dereference(iface, assembly, validator);
                const implemented = ((_a = ifaceType.methods) !== null && _a !== void 0 ? _a : []).find((m) => m.name === method.name);
                if (implemented) {
                    _assertSignaturesMatch(implemented, method, `${type.fqn}#${method.name}`, `implementing ${ifaceType.fqn}`);
                    method.overrides = iface;
                    return true;
                }
                if (_validateMethodImplementation(method, ifaceType)) {
                    return true;
                }
            }
            return false;
        }
        function _validatePropertyImplementation(property, type) {
            var _a;
            if (!type.interfaces) {
                // Abstract classes may not directly implement all members, need to check their supertypes...
                if (spec.isClassType(type) && type.base && type.abstract) {
                    return _validatePropertyImplementation(property, _dereference(type.base, assembly, validator));
                }
                return false;
            }
            for (const iface of type.interfaces) {
                const ifaceType = _dereference(iface, assembly, validator);
                const implemented = ((_a = ifaceType.properties) !== null && _a !== void 0 ? _a : []).find((p) => p.name === property.name);
                if (implemented) {
                    _assertPropertiesMatch(implemented, property, `${type.fqn}#${property.name}`, `implementing ${ifaceType.fqn}`);
                    property.overrides = ifaceType.fqn;
                    return true;
                }
                if (_validatePropertyImplementation(property, ifaceType)) {
                    return true;
                }
            }
            return false;
        }
        function _assertSignaturesMatch(expected, actual, label, action) {
            var _a, _b, _c, _d;
            if (!!expected.protected !== !!actual.protected) {
                const expVisibility = expected.protected ? 'protected' : 'public';
                const actVisibility = actual.protected ? 'protected' : 'public';
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5002_OVERRIDE_CHANGES_VISIBILITY.createDetached(label, action, actVisibility, expVisibility));
            }
            if (!deepEqual(actual.returns, expected.returns)) {
                const expType = spec.describeTypeReference((_a = expected.returns) === null || _a === void 0 ? void 0 : _a.type);
                const actType = spec.describeTypeReference((_b = actual.returns) === null || _b === void 0 ? void 0 : _b.type);
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5003_OVERRIDE_CHANGES_RETURN_TYPE.createDetached(label, action, actType, expType));
            }
            const expectedParams = (_c = expected.parameters) !== null && _c !== void 0 ? _c : [];
            const actualParams = (_d = actual.parameters) !== null && _d !== void 0 ? _d : [];
            if (expectedParams.length !== actualParams.length) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5005_OVERRIDE_CHANGES_PARAM_COUNT.createDetached(label, action, actualParams.length, expectedParams.length));
                return;
            }
            for (let i = 0; i < expectedParams.length; i++) {
                const expParam = expectedParams[i];
                const actParam = actualParams[i];
                if (!deepEqual(expParam.type, actParam.type)) {
                    diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5006_OVERRIDE_CHANGES_PARAM_TYPE.createDetached(label, action, actParam, expParam));
                }
                // Not-ing those to force the values to a strictly boolean context (they're optional, undefined means false)
                if (expParam.variadic !== actParam.variadic) {
                    diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5007_OVERRIDE_CHANGES_VARIADIC.createDetached(label, action, actParam.variadic, expParam.variadic));
                }
                if (expParam.optional !== actParam.optional) {
                    diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5008_OVERRIDE_CHANGES_PARAM_OPTIONAL.createDetached(label, action, actParam, expParam));
                }
            }
        }
        function _assertPropertiesMatch(expected, actual, label, action) {
            if (!!expected.protected !== !!actual.protected) {
                const expVisibility = expected.protected ? 'protected' : 'public';
                const actVisibility = actual.protected ? 'protected' : 'public';
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5002_OVERRIDE_CHANGES_VISIBILITY.createDetached(label, action, actVisibility, expVisibility));
            }
            if (!deepEqual(expected.type, actual.type)) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5004_OVERRIDE_CHANGES_PROP_TYPE.createDetached(label, action, actual.type, expected.type));
            }
            if (expected.immutable !== actual.immutable) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5010_OVERRIDE_CHANGES_MUTABILITY.createDetached(label, action, actual.immutable, expected.immutable));
            }
            if (expected.optional !== actual.optional) {
                diagnostic(jsii_diagnostic_1.JsiiDiagnostic.JSII_5009_OVERRIDE_CHANGES_PROP_OPTIONAL.createDetached(label, action, actual.optional, expected.optional));
            }
        }
    }
    function _staticMembersAndNestedTypesMustNotSharePascalCaseName(_, assembly, diagnostic) {
        var _a;
        for (const nestedType of Object.values((_a = assembly.types) !== null && _a !== void 0 ? _a : {})) {
            if (nestedType.namespace == null) {
                continue;
            }
            const nestingType = assembly.types[`${assembly.name}.${nestedType.namespace}`];
            if (nestingType == null) {
                continue;
            }
            const nestedTypeName = Case.pascal(nestedType.name);
            for (const { name, member } of staticMembers(nestingType)) {
                if (name === nestedTypeName) {
                    let diag = jsii_diagnostic_1.JsiiDiagnostic.JSII_5020_STATIC_MEMBER_CONFLICTS_WITH_NESTED_TYPE.create(node_bindings_1.getRelatedNode(member), nestingType, member, nestedType);
                    const nestedTypeNode = node_bindings_1.getRelatedNode(nestedType);
                    if (nestedTypeNode != null) {
                        diag = diag.addRelatedInformation(nestedTypeNode, 'This is the conflicting nested type declaration');
                    }
                    diagnostic(diag);
                }
            }
        }
        function staticMembers(type) {
            var _a, _b, _c, _d;
            if (spec.isClassOrInterfaceType(type)) {
                return [
                    ...((_b = (_a = type.methods) === null || _a === void 0 ? void 0 : _a.filter((method) => method.static)) !== null && _b !== void 0 ? _b : []),
                    ...((_d = (_c = type.properties) === null || _c === void 0 ? void 0 : _c.filter((prop) => prop.static)) !== null && _d !== void 0 ? _d : []),
                ].map((member) => ({ name: Case.pascal(member.name), member }));
            }
            return type.members.map((member) => ({ name: member.name, member }));
        }
    }
}
function _allTypes(assm) {
    var _a;
    return Object.values((_a = assm.types) !== null && _a !== void 0 ? _a : {});
}
function _allMethods(assm) {
    const methods = new Array();
    for (const type of _allTypes(assm)) {
        if (!spec.isClassOrInterfaceType(type)) {
            continue;
        }
        if (!type.methods) {
            continue;
        }
        type.methods.forEach((method) => methods.push({ member: method, type }));
    }
    return methods;
}
function _allProperties(assm) {
    const properties = new Array();
    for (const type of _allTypes(assm)) {
        if (!spec.isClassOrInterfaceType(type)) {
            continue;
        }
        if (!type.properties) {
            continue;
        }
        type.properties.forEach((property) => properties.push({ member: property, type }));
    }
    return properties;
}
function _allMembers(assm) {
    return [..._allMethods(assm), ..._allProperties(assm)];
}
function _allTypeReferences(assm) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const typeReferences = new Array();
    for (const type of _allTypes(assm)) {
        if (!spec.isClassOrInterfaceType(type)) {
            continue;
        }
        if (spec.isClassType(type)) {
            const node = bindings.getClassRelatedNode(type);
            if (type.base) {
                typeReferences.push({
                    fqn: type.base,
                    node: (_b = (_a = node === null || node === void 0 ? void 0 : node.heritageClauses) === null || _a === void 0 ? void 0 : _a.find((hc) => hc.token === ts.SyntaxKind.ExtendsKeyword)) === null || _b === void 0 ? void 0 : _b.types[0],
                });
            }
            if ((_c = type.initializer) === null || _c === void 0 ? void 0 : _c.parameters) {
                for (const param of type.initializer.parameters) {
                    _collectTypeReferences(param.type, (_d = bindings.getParameterRelatedNode(param)) === null || _d === void 0 ? void 0 : _d.type);
                }
            }
        }
        if (type.interfaces) {
            const node = bindings.getClassOrInterfaceRelatedNode(type);
            type.interfaces.forEach((iface) => {
                var _a;
                return typeReferences.push({
                    fqn: iface,
                    node: (_a = node === null || node === void 0 ? void 0 : node.heritageClauses) === null || _a === void 0 ? void 0 : _a.find((hc) => hc.token ===
                        (spec.isInterfaceType(type)
                            ? ts.SyntaxKind.ImplementsKeyword
                            : ts.SyntaxKind.ExtendsKeyword)),
                });
            });
        }
    }
    for (const { member: prop } of _allProperties(assm)) {
        _collectTypeReferences(prop.type, (_e = bindings.getPropertyRelatedNode(prop)) === null || _e === void 0 ? void 0 : _e.type);
    }
    for (const { member: meth } of _allMethods(assm)) {
        if (meth.returns) {
            _collectTypeReferences(meth.returns.type, (_f = bindings.getMethodRelatedNode(meth)) === null || _f === void 0 ? void 0 : _f.type);
        }
        for (const param of (_g = meth.parameters) !== null && _g !== void 0 ? _g : []) {
            _collectTypeReferences(param.type, (_h = bindings.getParameterRelatedNode(param)) === null || _h === void 0 ? void 0 : _h.type);
        }
    }
    return typeReferences;
    function _collectTypeReferences(type, node) {
        if (spec.isNamedTypeReference(type)) {
            typeReferences.push({ ...type, node });
        }
        else if (spec.isCollectionTypeReference(type)) {
            _collectTypeReferences(type.collection.elementtype, node);
        }
        else if (spec.isUnionTypeReference(type)) {
            type.union.types.forEach((type) => _collectTypeReferences(type, node));
        }
    }
}
function _dereference(typeRef, assembly, validator) {
    var _a, _b;
    if (typeof typeRef !== 'string') {
        typeRef = typeRef.fqn;
    }
    const [assm] = typeRef.split('.');
    if (assembly.name === assm) {
        return (_a = assembly.types) === null || _a === void 0 ? void 0 : _a[typeRef];
    }
    const foreignAssm = validator.projectInfo.dependencyClosure.find((dep) => dep.name === assm);
    return (_b = foreignAssm === null || foreignAssm === void 0 ? void 0 : foreignAssm.types) === null || _b === void 0 ? void 0 : _b[typeRef];
}
function _isEmpty(array) {
    return array == null || array.length === 0;
}
/**
 * Return whether an identifier only consists of upperchase characters, digits and underscores
 *
 * We have our own check here (isConstantCase) which is more lenient than what
 * `case.constant()` prescribes. We also want to allow combinations of letters
 * and digits without underscores: `C5A`, which `case` would force to `C5_A`.
 * The hint we print will still use `case.constant()` but that is fine.
 */
function isConstantCase(x) {
    return !/[^A-Z0-9_]/.exec(x);
}
//# sourceMappingURL=data:application/json;base64,