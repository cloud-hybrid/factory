"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const diff_1 = require("./ui/diff");
const provider_generator_1 = require("@cdktf/provider-generator");
const render_ink_1 = require("./helper/render-ink");
const version_check_1 = require("./helper/version-check");
const check_directory_1 = require("./helper/check-directory");
const check_environment_1 = require("./helper/check-environment");
const config = provider_generator_1.config.readConfigSync();
class Command {
    constructor() {
        this.command = "diff [stack] [OPTIONS]";
        this.describe = "Perform a diff (terraform plan) for the given stack";
        this.aliases = ["plan"];
        this.builder = (args) => args
            .positional("stack", {
            desc: "Diff stack which matches the given id only. Required when more than one stack is present in the app",
            type: "string",
        })
            .option("app", {
            default: config.app,
            required: true,
            desc: "Command to use in order to execute cdktf app",
            alias: "a",
        })
            .option("output", {
            default: config.output,
            required: true,
            desc: "Output directory",
            alias: "o",
        })
            .showHelpOnFail(true);
    }
    async handler(argv) {
        check_directory_1.throwIfNotProjectDirectory("diff");
        await version_check_1.displayVersionMessage();
        await check_environment_1.checkEnvironment("diff");
        const command = argv.app;
        const outdir = argv.output;
        const stack = argv.stack;
        await render_ink_1.renderInk(react_1.default.createElement(diff_1.Diff, {
            targetDir: outdir,
            targetStack: stack,
            synthCommand: command,
        }));
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlmZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRpZmYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxrREFBMEI7QUFDMUIsb0NBQWlDO0FBQ2pDLGtFQUEwRDtBQUMxRCxvREFBZ0Q7QUFDaEQsMERBQStEO0FBQy9ELDhEQUFzRTtBQUN0RSxrRUFBOEQ7QUFFOUQsTUFBTSxNQUFNLEdBQUcsMkJBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUVwQyxNQUFNLE9BQU87SUFBYjtRQUNrQixZQUFPLEdBQUcsd0JBQXdCLENBQUM7UUFDbkMsYUFBUSxHQUN0QixxREFBcUQsQ0FBQztRQUN4QyxZQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVuQixZQUFPLEdBQUcsQ0FBQyxJQUFnQixFQUFFLEVBQUUsQ0FDN0MsSUFBSTthQUNELFVBQVUsQ0FBQyxPQUFPLEVBQUU7WUFDbkIsSUFBSSxFQUFFLHFHQUFxRztZQUMzRyxJQUFJLEVBQUUsUUFBUTtTQUNmLENBQUM7YUFDRCxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHO1lBQ25CLFFBQVEsRUFBRSxJQUFJO1lBQ2QsSUFBSSxFQUFFLDhDQUE4QztZQUNwRCxLQUFLLEVBQUUsR0FBRztTQUNYLENBQUM7YUFDRCxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ2hCLE9BQU8sRUFBRSxNQUFNLENBQUMsTUFBTTtZQUN0QixRQUFRLEVBQUUsSUFBSTtZQUNkLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDO2FBQ0QsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBa0I1QixDQUFDO0lBaEJRLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBUztRQUM1Qiw0Q0FBMEIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQyxNQUFNLHFDQUFxQixFQUFFLENBQUM7UUFDOUIsTUFBTSxvQ0FBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ3pCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDM0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUV6QixNQUFNLHNCQUFTLENBQ2IsZUFBSyxDQUFDLGFBQWEsQ0FBQyxXQUFJLEVBQUU7WUFDeEIsU0FBUyxFQUFFLE1BQU07WUFDakIsV0FBVyxFQUFFLEtBQUs7WUFDbEIsWUFBWSxFQUFFLE9BQU87U0FDdEIsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeWFyZ3MgZnJvbSBcInlhcmdzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBEaWZmIH0gZnJvbSBcIi4vdWkvZGlmZlwiO1xuaW1wb3J0IHsgY29uZmlnIGFzIGNmZyB9IGZyb20gXCJAY2RrdGYvcHJvdmlkZXItZ2VuZXJhdG9yXCI7XG5pbXBvcnQgeyByZW5kZXJJbmsgfSBmcm9tIFwiLi9oZWxwZXIvcmVuZGVyLWlua1wiO1xuaW1wb3J0IHsgZGlzcGxheVZlcnNpb25NZXNzYWdlIH0gZnJvbSBcIi4vaGVscGVyL3ZlcnNpb24tY2hlY2tcIjtcbmltcG9ydCB7IHRocm93SWZOb3RQcm9qZWN0RGlyZWN0b3J5IH0gZnJvbSBcIi4vaGVscGVyL2NoZWNrLWRpcmVjdG9yeVwiO1xuaW1wb3J0IHsgY2hlY2tFbnZpcm9ubWVudCB9IGZyb20gXCIuL2hlbHBlci9jaGVjay1lbnZpcm9ubWVudFwiO1xuXG5jb25zdCBjb25maWcgPSBjZmcucmVhZENvbmZpZ1N5bmMoKTtcblxuY2xhc3MgQ29tbWFuZCBpbXBsZW1lbnRzIHlhcmdzLkNvbW1hbmRNb2R1bGUge1xuICBwdWJsaWMgcmVhZG9ubHkgY29tbWFuZCA9IFwiZGlmZiBbc3RhY2tdIFtPUFRJT05TXVwiO1xuICBwdWJsaWMgcmVhZG9ubHkgZGVzY3JpYmUgPVxuICAgIFwiUGVyZm9ybSBhIGRpZmYgKHRlcnJhZm9ybSBwbGFuKSBmb3IgdGhlIGdpdmVuIHN0YWNrXCI7XG4gIHB1YmxpYyByZWFkb25seSBhbGlhc2VzID0gW1wicGxhblwiXTtcblxuICBwdWJsaWMgcmVhZG9ubHkgYnVpbGRlciA9IChhcmdzOiB5YXJncy5Bcmd2KSA9PlxuICAgIGFyZ3NcbiAgICAgIC5wb3NpdGlvbmFsKFwic3RhY2tcIiwge1xuICAgICAgICBkZXNjOiBcIkRpZmYgc3RhY2sgd2hpY2ggbWF0Y2hlcyB0aGUgZ2l2ZW4gaWQgb25seS4gUmVxdWlyZWQgd2hlbiBtb3JlIHRoYW4gb25lIHN0YWNrIGlzIHByZXNlbnQgaW4gdGhlIGFwcFwiLFxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJhcHBcIiwge1xuICAgICAgICBkZWZhdWx0OiBjb25maWcuYXBwLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgZGVzYzogXCJDb21tYW5kIHRvIHVzZSBpbiBvcmRlciB0byBleGVjdXRlIGNka3RmIGFwcFwiLFxuICAgICAgICBhbGlhczogXCJhXCIsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbihcIm91dHB1dFwiLCB7XG4gICAgICAgIGRlZmF1bHQ6IGNvbmZpZy5vdXRwdXQsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBkZXNjOiBcIk91dHB1dCBkaXJlY3RvcnlcIixcbiAgICAgICAgYWxpYXM6IFwib1wiLFxuICAgICAgfSlcbiAgICAgIC5zaG93SGVscE9uRmFpbCh0cnVlKTtcblxuICBwdWJsaWMgYXN5bmMgaGFuZGxlcihhcmd2OiBhbnkpIHtcbiAgICB0aHJvd0lmTm90UHJvamVjdERpcmVjdG9yeShcImRpZmZcIik7XG4gICAgYXdhaXQgZGlzcGxheVZlcnNpb25NZXNzYWdlKCk7XG4gICAgYXdhaXQgY2hlY2tFbnZpcm9ubWVudChcImRpZmZcIik7XG4gICAgY29uc3QgY29tbWFuZCA9IGFyZ3YuYXBwO1xuICAgIGNvbnN0IG91dGRpciA9IGFyZ3Yub3V0cHV0O1xuICAgIGNvbnN0IHN0YWNrID0gYXJndi5zdGFjaztcblxuICAgIGF3YWl0IHJlbmRlckluayhcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGlmZiwge1xuICAgICAgICB0YXJnZXREaXI6IG91dGRpcixcbiAgICAgICAgdGFyZ2V0U3RhY2s6IHN0YWNrLFxuICAgICAgICBzeW50aENvbW1hbmQ6IGNvbW1hbmQsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgQ29tbWFuZCgpO1xuIl19