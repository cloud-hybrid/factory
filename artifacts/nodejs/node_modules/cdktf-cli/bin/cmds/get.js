"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const provider_generator_1 = require("@cdktf/provider-generator");
const get_1 = require("./ui/get");
const render_ink_1 = require("./helper/render-ink");
const version_check_1 = require("./helper/version-check");
const check_directory_1 = require("./helper/check-directory");
const check_environment_1 = require("./helper/check-environment");
const config = provider_generator_1.config.readConfigSync();
class Command {
    constructor() {
        this.command = "get [OPTIONS]";
        this.describe = "Generate CDK Constructs for Terraform providers and modules.";
        this.builder = (args) => args
            .showHelpOnFail(true)
            .option("output", {
            default: config.codeMakerOutput,
            type: "string",
            desc: "Output directory for generated Constructs",
            alias: "o",
        })
            .option("language", {
            default: config.language,
            required: true,
            type: "string",
            desc: "Output programming language",
            alias: "l",
            choices: provider_generator_1.LANGUAGES,
        });
    }
    async handler(argv) {
        var _a, _b;
        check_directory_1.throwIfNotProjectDirectory("get");
        await version_check_1.displayVersionMessage();
        await check_environment_1.checkEnvironment("get");
        const args = argv;
        const providers = (_a = config.terraformProviders) !== null && _a !== void 0 ? _a : [];
        const modules = (_b = config.terraformModules) !== null && _b !== void 0 ? _b : [];
        const { output, language } = args;
        const constraints = [
            ...providers,
            ...modules,
        ];
        if (constraints.length === 0) {
            console.error(`ERROR: Please specify providers or modules in "cdktf.json" config file`);
            process.exit(1);
        }
        await render_ink_1.renderInk(react_1.default.createElement(get_1.Get, {
            codeMakerOutput: output,
            language: language,
            constraints,
        }));
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0Esa0RBQTBCO0FBQzFCLGtFQUErRTtBQUMvRSxrQ0FBK0I7QUFDL0Isb0RBQWdEO0FBQ2hELDBEQUErRDtBQUMvRCw4REFBc0U7QUFDdEUsa0VBQThEO0FBRTlELE1BQU0sTUFBTSxHQUFHLDJCQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7QUFPcEMsTUFBTSxPQUFPO0lBQWI7UUFDa0IsWUFBTyxHQUFHLGVBQWUsQ0FBQztRQUMxQixhQUFRLEdBQ3RCLDhEQUE4RCxDQUFDO1FBRWpELFlBQU8sR0FBRyxDQUFDLElBQWdCLEVBQUUsRUFBRSxDQUM3QyxJQUFJO2FBQ0QsY0FBYyxDQUFDLElBQUksQ0FBQzthQUNwQixNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ2hCLE9BQU8sRUFBRSxNQUFNLENBQUMsZUFBZTtZQUMvQixJQUFJLEVBQUUsUUFBUTtZQUNkLElBQUksRUFBRSwyQ0FBMkM7WUFDakQsS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDO2FBQ0QsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUNsQixPQUFPLEVBQUUsTUFBTSxDQUFDLFFBQVE7WUFDeEIsUUFBUSxFQUFFLElBQUk7WUFDZCxJQUFJLEVBQUUsUUFBUTtZQUNkLElBQUksRUFBRSw2QkFBNkI7WUFDbkMsS0FBSyxFQUFFLEdBQUc7WUFDVixPQUFPLEVBQUUsOEJBQVM7U0FDbkIsQ0FBQyxDQUFDO0lBK0JULENBQUM7SUE3QlEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFTOztRQUM1Qiw0Q0FBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxNQUFNLHFDQUFxQixFQUFFLENBQUM7UUFDOUIsTUFBTSxvQ0FBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixNQUFNLElBQUksR0FBRyxJQUFpQixDQUFDO1FBQy9CLE1BQU0sU0FBUyxTQUFHLE1BQU0sQ0FBQyxrQkFBa0IsbUNBQUksRUFBRSxDQUFDO1FBQ2xELE1BQU0sT0FBTyxTQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsbUNBQUksRUFBRSxDQUFDO1FBQzlDLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBRWxDLE1BQU0sV0FBVyxHQUF3QztZQUN2RCxHQUFHLFNBQVM7WUFDWixHQUFHLE9BQU87U0FDWCxDQUFDO1FBRUYsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QixPQUFPLENBQUMsS0FBSyxDQUNYLHdFQUF3RSxDQUN6RSxDQUFDO1lBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQjtRQUVELE1BQU0sc0JBQVMsQ0FDYixlQUFLLENBQUMsYUFBYSxDQUFDLFNBQUcsRUFBRTtZQUN2QixlQUFlLEVBQUUsTUFBTTtZQUN2QixRQUFRLEVBQUUsUUFBUTtZQUNsQixXQUFXO1NBQ1osQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeWFyZ3MgZnJvbSBcInlhcmdzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBMYW5ndWFnZSwgTEFOR1VBR0VTLCBjb25maWcgYXMgY2ZnIH0gZnJvbSBcIkBjZGt0Zi9wcm92aWRlci1nZW5lcmF0b3JcIjtcbmltcG9ydCB7IEdldCB9IGZyb20gXCIuL3VpL2dldFwiO1xuaW1wb3J0IHsgcmVuZGVySW5rIH0gZnJvbSBcIi4vaGVscGVyL3JlbmRlci1pbmtcIjtcbmltcG9ydCB7IGRpc3BsYXlWZXJzaW9uTWVzc2FnZSB9IGZyb20gXCIuL2hlbHBlci92ZXJzaW9uLWNoZWNrXCI7XG5pbXBvcnQgeyB0aHJvd0lmTm90UHJvamVjdERpcmVjdG9yeSB9IGZyb20gXCIuL2hlbHBlci9jaGVjay1kaXJlY3RvcnlcIjtcbmltcG9ydCB7IGNoZWNrRW52aXJvbm1lbnQgfSBmcm9tIFwiLi9oZWxwZXIvY2hlY2stZW52aXJvbm1lbnRcIjtcblxuY29uc3QgY29uZmlnID0gY2ZnLnJlYWRDb25maWdTeW5jKCk7XG5cbmludGVyZmFjZSBBcmd1bWVudHMge1xuICBvdXRwdXQ6IHN0cmluZztcbiAgbGFuZ3VhZ2U6IExhbmd1YWdlO1xufVxuXG5jbGFzcyBDb21tYW5kIGltcGxlbWVudHMgeWFyZ3MuQ29tbWFuZE1vZHVsZSB7XG4gIHB1YmxpYyByZWFkb25seSBjb21tYW5kID0gXCJnZXQgW09QVElPTlNdXCI7XG4gIHB1YmxpYyByZWFkb25seSBkZXNjcmliZSA9XG4gICAgXCJHZW5lcmF0ZSBDREsgQ29uc3RydWN0cyBmb3IgVGVycmFmb3JtIHByb3ZpZGVycyBhbmQgbW9kdWxlcy5cIjtcblxuICBwdWJsaWMgcmVhZG9ubHkgYnVpbGRlciA9IChhcmdzOiB5YXJncy5Bcmd2KSA9PlxuICAgIGFyZ3NcbiAgICAgIC5zaG93SGVscE9uRmFpbCh0cnVlKVxuICAgICAgLm9wdGlvbihcIm91dHB1dFwiLCB7XG4gICAgICAgIGRlZmF1bHQ6IGNvbmZpZy5jb2RlTWFrZXJPdXRwdXQsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIGRlc2M6IFwiT3V0cHV0IGRpcmVjdG9yeSBmb3IgZ2VuZXJhdGVkIENvbnN0cnVjdHNcIixcbiAgICAgICAgYWxpYXM6IFwib1wiLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJsYW5ndWFnZVwiLCB7XG4gICAgICAgIGRlZmF1bHQ6IGNvbmZpZy5sYW5ndWFnZSxcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIGRlc2M6IFwiT3V0cHV0IHByb2dyYW1taW5nIGxhbmd1YWdlXCIsXG4gICAgICAgIGFsaWFzOiBcImxcIixcbiAgICAgICAgY2hvaWNlczogTEFOR1VBR0VTLFxuICAgICAgfSk7XG5cbiAgcHVibGljIGFzeW5jIGhhbmRsZXIoYXJndjogYW55KSB7XG4gICAgdGhyb3dJZk5vdFByb2plY3REaXJlY3RvcnkoXCJnZXRcIik7XG4gICAgYXdhaXQgZGlzcGxheVZlcnNpb25NZXNzYWdlKCk7XG4gICAgYXdhaXQgY2hlY2tFbnZpcm9ubWVudChcImdldFwiKTtcbiAgICBjb25zdCBhcmdzID0gYXJndiBhcyBBcmd1bWVudHM7XG4gICAgY29uc3QgcHJvdmlkZXJzID0gY29uZmlnLnRlcnJhZm9ybVByb3ZpZGVycyA/PyBbXTtcbiAgICBjb25zdCBtb2R1bGVzID0gY29uZmlnLnRlcnJhZm9ybU1vZHVsZXMgPz8gW107XG4gICAgY29uc3QgeyBvdXRwdXQsIGxhbmd1YWdlIH0gPSBhcmdzO1xuXG4gICAgY29uc3QgY29uc3RyYWludHM6IGNmZy5UZXJyYWZvcm1EZXBlbmRlbmN5Q29uc3RyYWludFtdID0gW1xuICAgICAgLi4ucHJvdmlkZXJzLFxuICAgICAgLi4ubW9kdWxlcyxcbiAgICBdO1xuXG4gICAgaWYgKGNvbnN0cmFpbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYEVSUk9SOiBQbGVhc2Ugc3BlY2lmeSBwcm92aWRlcnMgb3IgbW9kdWxlcyBpbiBcImNka3RmLmpzb25cIiBjb25maWcgZmlsZWBcbiAgICAgICk7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxuXG4gICAgYXdhaXQgcmVuZGVySW5rKFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChHZXQsIHtcbiAgICAgICAgY29kZU1ha2VyT3V0cHV0OiBvdXRwdXQsXG4gICAgICAgIGxhbmd1YWdlOiBsYW5ndWFnZSxcbiAgICAgICAgY29uc3RyYWludHMsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgQ29tbWFuZCgpO1xuIl19