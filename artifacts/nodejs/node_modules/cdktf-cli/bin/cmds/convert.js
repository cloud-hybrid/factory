"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const hcl2cdk_1 = require("@cdktf/hcl2cdk");
const version_check_1 = require("./helper/version-check");
const checkpoint_1 = require("../../lib/checkpoint");
const errors_1 = require("../../lib/errors");
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const provider_generator_1 = require("@cdktf/provider-generator");
function readStreamAsString(stream) {
    return new Promise((ok, ko) => {
        if (stream.isTTY) {
            ko("No stdin was passed, please use it like this: cat main.tf | cdktf convert > imported.ts");
        }
        else {
            let string = "";
            stream.on("data", (data) => (string += data.toString()));
            stream.on("close", () => ok(string));
            stream.on("error", (err) => ko(err));
        }
    });
}
function findFileAboveCwd(file, rootPath = process.cwd()) {
    const fullPath = path.resolve(rootPath, file);
    if (fs.existsSync(fullPath)) {
        return fullPath;
    }
    const parentDir = path.resolve(rootPath, "..");
    if (fs.existsSync(parentDir) && parentDir !== rootPath) {
        return findFileAboveCwd(file, parentDir);
    }
    return null;
}
class Command {
    constructor() {
        this.command = "convert [OPTIONS]";
        this.describe = "Converts a single file of HCL configuration to CDK for Terraform. Takes the file to be converted on stdin.";
        this.builder = (args) => args
            .example("cat main.tf | cdktf convert  --provider integrations/github", "Takes the HCL content of main.tf and converts it to CDK for Terraform content and prints it")
            .example("cat main.tf | cdktf convert --provider hashicorp/aws > imported.ts", "Takes the HCL content of main.tf and converts it to CDK for Terraform content in imported.ts")
            .example("cat main.tf | cdktf convert --provider 'hashicorp/aws@ ~>3.62.0' 'integrations/github@ ~>4.16.0' --language python > imported.py", "Takes the HCL content of main.tf and converts it to CDK for Terraform content in imported.ts")
            .option("language", {
            choices: ["typescript", "python", "csharp", "java"],
            default: "typescript",
        })
            .option("provider", {
            describe: "The conversion needs to know which providers are used in addition to the ones in your cdktf.json file. We search for a cdktf.json below your current working directory.",
            type: "array",
            default: [],
        })
            .showHelpOnFail(true);
    }
    async handler({ language }) {
        await version_check_1.displayVersionMessage();
        const providerRequirements = yargs_1.default.argv.provider;
        const cdktfJsonPath = findFileAboveCwd("cdktf.json");
        if (cdktfJsonPath) {
            const cdktfJson = await fs.readJson(cdktfJsonPath);
            providerRequirements.push(...cdktfJson.terraformProviders);
        }
        // Get all the provider schemas
        const { providerSchema } = await provider_generator_1.readSchema(providerRequirements.map((spec) => provider_generator_1.ConstructsMakerProviderTarget.from(new provider_generator_1.config.TerraformProviderConstraint(spec), provider_generator_1.LANGUAGES[0])));
        const input = await readStreamAsString(process.stdin);
        let output;
        try {
            const { all, stats } = await hcl2cdk_1.convert(input, {
                language,
                providerSchema,
            });
            output = all;
            await checkpoint_1.sendTelemetry("convert", { ...stats, error: false });
        }
        catch (err) {
            throw errors_1.Errors.Internal("convert", err.message, { language });
        }
        console.log(output);
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,