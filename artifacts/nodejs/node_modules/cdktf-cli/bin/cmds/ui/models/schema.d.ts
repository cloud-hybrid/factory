import * as z from "zod";
declare const action: z.ZodEnum<["noop", "create", "read", "update", "delete"]>;
export declare const schema: z.ZodUnion<[z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"version">;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    type: "version";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
} & {
    [k: string]: any;
}>>, z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"planned_change">;
    change: z.ZodUnion<[z.ZodObject<{
        resource: z.ZodObject<{
            addr: z.ZodString;
            module: z.ZodString;
            resource: z.ZodString;
            implied_provider: z.ZodString;
            resource_type: z.ZodString;
            resource_name: z.ZodString;
            resource_key: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodNull]>;
        }, {
            strict: true;
        }, {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        }>;
    } & {
        action: z.ZodLiteral<"replace">;
        reason: z.ZodEnum<["tainted", "requested", "cannot_update"]>;
    }, {
        strict: true;
    }, {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        action: "replace";
        reason: "tainted" | "requested" | "cannot_update";
    }>, z.ZodObject<{
        resource: z.ZodObject<{
            addr: z.ZodString;
            module: z.ZodString;
            resource: z.ZodString;
            implied_provider: z.ZodString;
            resource_type: z.ZodString;
            resource_name: z.ZodString;
            resource_key: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodNull]>;
        }, {
            strict: true;
        }, {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        }>;
        action: z.ZodEnum<["noop", "create", "read", "update", "delete"]>;
    }, {
        strict: true;
    }, {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        action: "update" | "delete" | "noop" | "create" | "read";
    }>]>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    change: {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        action: "update" | "delete" | "noop" | "create" | "read";
    } | {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        action: "replace";
        reason: "tainted" | "requested" | "cannot_update";
    };
    type: "planned_change";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
} & {
    [k: string]: any;
}>>, z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"change_summary">;
    changes: z.ZodObject<{
        add: z.ZodNumber;
        change: z.ZodNumber;
        remove: z.ZodNumber;
        operation: z.ZodEnum<["plan", "apply", "deploy"]>;
    }, {
        strict: true;
    }, {
        change: number;
        add: number;
        remove: number;
        operation: "deploy" | "plan" | "apply";
    }>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    type: "change_summary";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
    changes: {
        change: number;
        add: number;
        remove: number;
        operation: "deploy" | "plan" | "apply";
    };
} & {
    [k: string]: any;
}>>, z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"outputs">;
    outputs: z.ZodRecord<z.ZodObject<{
        sensitive: z.ZodBoolean;
        type: z.ZodString;
        value: z.ZodString;
    }, {
        strict: true;
    }, {
        type: string;
        value: string;
        sensitive: boolean;
    }>>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    type: "outputs";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
    outputs: Record<string, {
        type: string;
        value: string;
        sensitive: boolean;
    }>;
} & {
    [k: string]: any;
}>>, z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"apply_start">;
    hook: z.ZodObject<{
        resource: z.ZodObject<{
            addr: z.ZodString;
            module: z.ZodString;
            resource: z.ZodString;
            implied_provider: z.ZodString;
            resource_type: z.ZodString;
            resource_name: z.ZodString;
            resource_key: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodNull]>;
        }, {
            strict: true;
        }, {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        }>;
        action: z.ZodEnum<["noop", "create", "read", "update", "delete"]>;
        id_key: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
        id_value: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
    }, {
        strict: true;
    }, {
        id_key?: string | undefined;
        id_value?: string | undefined;
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        action: "update" | "delete" | "noop" | "create" | "read";
    }>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    type: "apply_start";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
    hook: {
        id_key?: string | undefined;
        id_value?: string | undefined;
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        action: "update" | "delete" | "noop" | "create" | "read";
    };
} & {
    [k: string]: any;
}>>, z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"apply_progress">;
    hook: z.ZodObject<{
        resource: z.ZodObject<{
            addr: z.ZodString;
            module: z.ZodString;
            resource: z.ZodString;
            implied_provider: z.ZodString;
            resource_type: z.ZodString;
            resource_name: z.ZodString;
            resource_key: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodNull]>;
        }, {
            strict: true;
        }, {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        }>;
        action: z.ZodEnum<["noop", "create", "read", "update", "delete"]>;
        elapsed_seconds: z.ZodNumber;
    }, {
        strict: true;
    }, {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        action: "update" | "delete" | "noop" | "create" | "read";
        elapsed_seconds: number;
    }>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    type: "apply_progress";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
    hook: {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        action: "update" | "delete" | "noop" | "create" | "read";
        elapsed_seconds: number;
    };
} & {
    [k: string]: any;
}>>, z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"apply_complete">;
    hook: z.ZodObject<{
        resource: z.ZodObject<{
            addr: z.ZodString;
            module: z.ZodString;
            resource: z.ZodString;
            implied_provider: z.ZodString;
            resource_type: z.ZodString;
            resource_name: z.ZodString;
            resource_key: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodNull]>;
        }, {
            strict: true;
        }, {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        }>;
        action: z.ZodEnum<["noop", "create", "read", "update", "delete"]>;
        id_key: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
        id_value: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
        elapsed_seconds: z.ZodNumber;
    }, {
        strict: true;
    }, {
        id_key?: string | undefined;
        id_value?: string | undefined;
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        action: "update" | "delete" | "noop" | "create" | "read";
        elapsed_seconds: number;
    }>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    type: "apply_complete";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
    hook: {
        id_key?: string | undefined;
        id_value?: string | undefined;
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        action: "update" | "delete" | "noop" | "create" | "read";
        elapsed_seconds: number;
    };
} & {
    [k: string]: any;
}>>, z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"apply_errored">;
    hook: z.ZodObject<{
        resource: z.ZodObject<{
            addr: z.ZodString;
            module: z.ZodString;
            resource: z.ZodString;
            implied_provider: z.ZodString;
            resource_type: z.ZodString;
            resource_name: z.ZodString;
            resource_key: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodNull]>;
        }, {
            strict: true;
        }, {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        }>;
        action: z.ZodEnum<["noop", "create", "read", "update", "delete"]>;
        elapsed_seconds: z.ZodNumber;
    }, {
        strict: true;
    }, {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        action: "update" | "delete" | "noop" | "create" | "read";
        elapsed_seconds: number;
    }>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    type: "apply_errored";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
    hook: {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        action: "update" | "delete" | "noop" | "create" | "read";
        elapsed_seconds: number;
    };
} & {
    [k: string]: any;
}>>, z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"provision_start">;
    hook: z.ZodObject<{
        resource: z.ZodObject<{
            addr: z.ZodString;
            module: z.ZodString;
            resource: z.ZodString;
            implied_provider: z.ZodString;
            resource_type: z.ZodString;
            resource_name: z.ZodString;
            resource_key: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodNull]>;
        }, {
            strict: true;
        }, {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        }>;
        provisioner: z.ZodString;
    }, {
        strict: true;
    }, {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        provisioner: string;
    }>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    type: "provision_start";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
    hook: {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        provisioner: string;
    };
} & {
    [k: string]: any;
}>>, z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"provision_progress">;
    hook: z.ZodObject<{
        resource: z.ZodObject<{
            addr: z.ZodString;
            module: z.ZodString;
            resource: z.ZodString;
            implied_provider: z.ZodString;
            resource_type: z.ZodString;
            resource_name: z.ZodString;
            resource_key: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodNull]>;
        }, {
            strict: true;
        }, {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        }>;
        provisioner: z.ZodString;
        output: z.ZodString;
    }, {
        strict: true;
    }, {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        output: string;
        provisioner: string;
    }>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    type: "provision_progress";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
    hook: {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        output: string;
        provisioner: string;
    };
} & {
    [k: string]: any;
}>>, z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"provision_complete">;
    hook: z.ZodObject<{
        resource: z.ZodObject<{
            addr: z.ZodString;
            module: z.ZodString;
            resource: z.ZodString;
            implied_provider: z.ZodString;
            resource_type: z.ZodString;
            resource_name: z.ZodString;
            resource_key: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodNull]>;
        }, {
            strict: true;
        }, {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        }>;
        provisioner: z.ZodString;
    }, {
        strict: true;
    }, {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        provisioner: string;
    }>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    type: "provision_complete";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
    hook: {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        provisioner: string;
    };
} & {
    [k: string]: any;
}>>, z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"provision_errored">;
    hook: z.ZodObject<{
        resource: z.ZodObject<{
            addr: z.ZodString;
            module: z.ZodString;
            resource: z.ZodString;
            implied_provider: z.ZodString;
            resource_type: z.ZodString;
            resource_name: z.ZodString;
            resource_key: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodNull]>;
        }, {
            strict: true;
        }, {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        }>;
        provisioner: z.ZodString;
    }, {
        strict: true;
    }, {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        provisioner: string;
    }>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    type: "provision_errored";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
    hook: {
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
        provisioner: string;
    };
} & {
    [k: string]: any;
}>>, z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"refresh_start">;
    hook: z.ZodObject<{
        resource: z.ZodObject<{
            addr: z.ZodString;
            module: z.ZodString;
            resource: z.ZodString;
            implied_provider: z.ZodString;
            resource_type: z.ZodString;
            resource_name: z.ZodString;
            resource_key: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodNull]>;
        }, {
            strict: true;
        }, {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        }>;
        id_key: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
        id_value: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
    }, {
        strict: true;
    }, {
        id_key?: string | undefined;
        id_value?: string | undefined;
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
    }>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    type: "refresh_start";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
    hook: {
        id_key?: string | undefined;
        id_value?: string | undefined;
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
    };
} & {
    [k: string]: any;
}>>, z.ZodObject<{
    "@level": z.ZodEnum<["info", "error", "warn"]>;
    "@message": z.ZodString;
    "@module": z.ZodString;
    "@timestamp": z.ZodString;
} & {
    type: z.ZodLiteral<"refresh_complete">;
    hook: z.ZodObject<{
        resource: z.ZodObject<{
            addr: z.ZodString;
            module: z.ZodString;
            resource: z.ZodString;
            implied_provider: z.ZodString;
            resource_type: z.ZodString;
            resource_name: z.ZodString;
            resource_key: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodNull]>;
        }, {
            strict: true;
        }, {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        }>;
        id_key: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
        id_value: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
    }, {
        strict: true;
    }, {
        id_key?: string | undefined;
        id_value?: string | undefined;
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
    }>;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    type: "refresh_complete";
    "@level": "error" | "info" | "warn";
    "@message": string;
    "@module": string;
    "@timestamp": string;
    hook: {
        id_key?: string | undefined;
        id_value?: string | undefined;
        resource: {
            resource_key?: string | null | undefined;
            module: string;
            resource: string;
            addr: string;
            implied_provider: string;
            resource_type: string;
            resource_name: string;
        };
    };
} & {
    [k: string]: any;
}>>]>;
export declare type ActionTypes = z.infer<typeof action>;
export {};
