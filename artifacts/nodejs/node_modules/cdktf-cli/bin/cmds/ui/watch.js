"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Watch = void 0;
const react_1 = __importStar(require("react"));
const ink_1 = require("ink");
const ink_spinner_1 = __importDefault(require("ink-spinner"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const ink_use_stdout_dimensions_1 = __importDefault(require("ink-use-stdout-dimensions"));
const client_1 = require("@apollo/client");
const format_1 = __importDefault(require("date-fns/format"));
const StatusBox = ({ status, stackName, error, }) => {
    const [didDeployAlready, setDidDeployAlready] = react_1.useState(false);
    react_1.useEffect(() => {
        if (status === "DEPLOYING" && !didDeployAlready)
            setDidDeployAlready(true);
    }, [didDeployAlready, status]);
    let statusText = react_1.default.createElement(ink_1.Text, null, status);
    const stack = stackName ? react_1.default.createElement(ink_1.Text, { color: "blueBright" }, stackName) : null;
    switch (status) {
        case "IDLE":
            statusText = (react_1.default.createElement(ink_1.Text, null,
                didDeployAlready && !error && "Deployment done. ",
                "Watching ",
                stack,
                stack && " ",
                "for changes"));
            break;
        case "DEPLOYING":
            statusText = react_1.default.createElement(ink_1.Text, null,
                "Deploying ",
                stack || "stack");
            break;
        case "SYNTHESIZING":
            statusText = react_1.default.createElement(ink_1.Text, null,
                "Synthesizing ",
                stack || "stack");
            break;
        case "INITIALIZING":
            statusText = react_1.default.createElement(ink_1.Text, null,
                "Initializing Terraform for ",
                stack || "stack");
            break;
        case "CONNECTING":
            statusText = react_1.default.createElement(ink_1.Text, null, "Connecting");
            break;
    }
    if (status === "IDLE") {
        return (react_1.default.createElement(ink_1.Box, null,
            react_1.default.createElement(ink_1.Text, null),
            react_1.default.createElement(ink_1.Box, null, statusText)));
    }
    return (react_1.default.createElement(ink_1.Box, null,
        react_1.default.createElement(ink_1.Text, { color: "green" },
            react_1.default.createElement(ink_spinner_1.default, { type: "dots" })),
        react_1.default.createElement(ink_1.Box, { paddingLeft: 1 }, statusText)));
};
const DeployedResource = ({ resource, columns, }) => {
    let color = undefined;
    let icon = " ";
    switch (resource.deployState) {
        case "CREATING":
            color = "greenBright";
            icon = react_1.default.createElement(ink_spinner_1.default, { type: "dots" });
            break;
        case "CREATED":
            color = "greenBright";
            icon = "+";
            break;
        case "UPDATING":
            icon = react_1.default.createElement(ink_spinner_1.default, { type: "dots" });
            color = "yellowBright";
            break;
        case "UPDATED":
            color = "yellowBright";
            icon = "~";
            break;
        case "DESTROYING":
            icon = react_1.default.createElement(ink_spinner_1.default, { type: "dots" });
            color = "redBright";
            break;
        case "DESTROYED":
            color = "redBright";
            icon = "-";
            break;
        case "WAITING":
            icon = react_1.default.createElement(ink_spinner_1.default, { type: "dots" });
            break;
        case "ERROR":
        case "SUCCESS":
            break;
    }
    return (react_1.default.createElement(ink_1.Box, { width: columns },
        react_1.default.createElement(ink_1.Text, { color: color },
            icon,
            " ",
            resource.id),
        react_1.default.createElement(ink_1.Spacer, null),
        react_1.default.createElement(ink_1.Text, { color: "gray" }, format_1.default(new Date(resource.changedAt), "pp"))));
};
const resourceIsInProgress = (resource) => {
    return ["WAITING", "UPDATING", "CREATING", "DESTROYING"].includes(resource.deployState);
};
const DeployingResources = ({ resources, columns, }) => {
    const inProgressResources = react_1.useMemo(() => (resources === null || resources === void 0 ? void 0 : resources.filter(resourceIsInProgress)) || [], [resources]);
    return (react_1.default.createElement(ink_1.Box, { flexDirection: "column" }, inProgressResources.map((r) => (react_1.default.createElement(DeployedResource, { key: r.id, columns: columns, resource: r })))));
};
const DeployedResources = ({ resources, columns, }) => {
    const [finishedResourcesHistory, setFinishedResourcesHistory] = react_1.useState([]);
    react_1.useEffect(() => {
        const doneResources = (resources === null || resources === void 0 ? void 0 : resources.filter((r) => !resourceIsInProgress(r))) || [];
        setFinishedResourcesHistory((hist) => {
            const newDoneResources = doneResources.filter((newDone) => 
            // skips items that already exist with the same id and timestamp
            !hist.some((existingDone) => existingDone.id === newDone.id &&
                existingDone.changedAt === newDone.changedAt));
            return hist.concat(newDoneResources);
        });
    }, [resources]);
    return (react_1.default.createElement(ink_1.Static, { items: finishedResourcesHistory }, (r) => react_1.default.createElement(DeployedResource, { key: r.id, resource: r, columns: columns })));
};
const ErrorComponent = ({ error, }) => {
    if (!error.recoverable) {
        throw new Error(`${error.origin}: ${error.message}`);
    }
    return (react_1.default.createElement(ink_1.Text, { color: "redBright" },
        error.origin,
        ": ",
        strip_ansi_1.default(error.message)));
};
const WATCH = client_1.gql `
  subscription Watch(
    $dir: String!
    $stack: String
    $cmd: String!
    $aprv: Boolean!
  ) {
    watch(
      inputs: {
        autoApprove: $aprv
        targetDir: $dir
        targetStack: $stack
        synthCommand: $cmd
      }
    ) {
      status
      stacks {
        name
      }
      resources {
        id
        action
        deployState
        changedAt
      }
      error {
        message
        recoverable
        origin
      }
    }
  }
`;
exports.Watch = ({ targetDir, targetStack, synthCommand, autoApprove, }) => {
    var _a;
    const [columns] = ink_use_stdout_dimensions_1.default();
    const { error, data } = client_1.useSubscription(WATCH, {
        variables: {
            dir: targetDir,
            stack: targetStack,
            cmd: synthCommand,
            aprv: autoApprove,
        },
    });
    const watchedStackName = targetStack || ((_a = data === null || data === void 0 ? void 0 : data.watch.stacks.find((_, idx) => idx === 0)) === null || _a === void 0 ? void 0 : _a.name);
    const status = (data === null || data === void 0 ? void 0 : data.watch.status) || "CONNECTING";
    if (error)
        console.error("uncaught error ", error);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(DeployedResources, { resources: data === null || data === void 0 ? void 0 : data.watch.resources, columns: columns }),
        (data === null || data === void 0 ? void 0 : data.watch.error) && react_1.default.createElement(ErrorComponent, { error: data.watch.error }),
        react_1.default.createElement(ink_1.Box, { flexDirection: "column" },
            status === "DEPLOYING" && (react_1.default.createElement(DeployingResources, { resources: data === null || data === void 0 ? void 0 : data.watch.resources, columns: columns })),
            react_1.default.createElement(StatusBox, { status: status, stackName: watchedStackName, error: data === null || data === void 0 ? void 0 : data.watch.error }))));
};
//# sourceMappingURL=data:application/json;base64,