"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Destroy = exports.DestroyComponent = exports.DeploySummary = void 0;
/* eslint-disable no-control-regex */
const react_1 = __importStar(require("react"));
const ink_1 = require("ink");
const ink_spinner_1 = __importDefault(require("ink-spinner"));
const ink_confirm_input_1 = __importDefault(require("@skorfmann/ink-confirm-input"));
const components_1 = require("./components");
const terraform_1 = require("./models/terraform");
const terraform_context_1 = require("./terraform-context");
const diff_1 = require("./diff");
exports.DeploySummary = ({ resources, }) => {
    const summary = resources.reduce((accumulator, resource) => {
        if (accumulator[resource.applyState] !== undefined) {
            accumulator[resource.applyState] += 1;
        }
        return accumulator;
    }, {
        destroyed: 0,
    });
    return (react_1.default.createElement(react_1.default.Fragment, null, Object.keys(summary).map((key, i) => (react_1.default.createElement(ink_1.Box, { key: key },
        i > 0 && react_1.default.createElement(ink_1.Text, null, ", "),
        react_1.default.createElement(ink_1.Text, null,
            summary[key],
            " ",
            key))))));
};
const Confirm = ({ callback }) => {
    const [value, setValue] = react_1.useState("");
    return (react_1.default.createElement(ink_1.Box, { flexDirection: "column", marginTop: 1 },
        react_1.default.createElement(ink_1.Text, { bold: true }, "Do you want to perform these actions?"),
        react_1.default.createElement(ink_1.Text, null, " CDK for Terraform will perform the actions described above."),
        react_1.default.createElement(ink_1.Text, null, " Only 'yes' will be accepted to approve."),
        react_1.default.createElement(ink_1.Box, { flexDirection: "row", marginTop: 1 },
            react_1.default.createElement(ink_1.Text, { bold: true }, " Enter a value:"),
            react_1.default.createElement(ink_confirm_input_1.default, { value: value, onChange: setValue, onSubmit: callback }))));
};
exports.DestroyComponent = () => {
    const { resources, status, currentStack } = terraform_context_1.useTerraformState();
    const applyActions = [
        terraform_1.PlannedResourceAction.UPDATE,
        terraform_1.PlannedResourceAction.CREATE,
        terraform_1.PlannedResourceAction.DELETE,
        terraform_1.PlannedResourceAction.READ,
    ];
    const applyableResources = resources.filter((resource) => applyActions.includes(resource.action));
    return (react_1.default.createElement(react_1.Fragment, null,
        react_1.default.createElement(ink_1.Box, { flexDirection: "column" },
            react_1.default.createElement(ink_1.Box, null, terraform_context_1.Status.DESTROYING == status ? (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(ink_1.Text, { color: "green" },
                    react_1.default.createElement(ink_spinner_1.default, { type: "dots" })),
                react_1.default.createElement(ink_1.Box, { paddingLeft: 1 },
                    react_1.default.createElement(ink_1.Text, null, "Destroying Stack: "),
                    react_1.default.createElement(ink_1.Text, { bold: true }, currentStack.name)))) : (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(ink_1.Text, null, "Destroying Stack: "),
                react_1.default.createElement(ink_1.Text, { bold: true }, currentStack.name)))),
            react_1.default.createElement(ink_1.Text, { bold: true }, "Resources"),
            applyableResources.map((resource) => (react_1.default.createElement(ink_1.Box, { key: resource.id, marginLeft: 1 },
                react_1.default.createElement(components_1.DeployingElement, { resource: resource, stackName: currentStack.name })))),
            react_1.default.createElement(ink_1.Box, { marginTop: 1 },
                react_1.default.createElement(ink_1.Text, { bold: true }, "Summary: "),
                react_1.default.createElement(exports.DeploySummary, { resources: applyableResources }),
                react_1.default.createElement(ink_1.Text, null, ".")))));
};
exports.Destroy = ({ targetDir, targetStack, synthCommand, autoApprove, }) => {
    const { state: { status, currentStack, errors, plan }, confirmation, isConfirmed, } = terraform_context_1.useRunDestroy({
        targetDir,
        targetStack,
        synthCommand,
        autoApprove,
    });
    const planStages = [
        terraform_context_1.Status.INITIALIZING,
        terraform_context_1.Status.PLANNING,
        terraform_context_1.Status.SYNTHESIZING,
        terraform_context_1.Status.SYNTHESIZED,
        terraform_context_1.Status.STARTING,
    ];
    const isPlanning = planStages.includes(status);
    const statusText = currentStack.name === "" ? (react_1.default.createElement(ink_1.Text, null,
        status,
        "...")) : (react_1.default.createElement(ink_1.Text, null,
        status,
        react_1.default.createElement(ink_1.Text, { bold: true },
            "\u00A0",
            currentStack.name),
        "..."));
    if (errors)
        return react_1.default.createElement(ink_1.Box, null, errors);
    if (plan && !plan.needsApply)
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(ink_1.Text, null,
                "No changes for Stack: ",
                react_1.default.createElement(ink_1.Text, { bold: true }, currentStack.name))));
    return (react_1.default.createElement(ink_1.Box, null, isPlanning ? (react_1.default.createElement(react_1.Fragment, null,
        react_1.default.createElement(ink_1.Text, { color: "green" },
            react_1.default.createElement(ink_spinner_1.default, { type: "dots" })),
        react_1.default.createElement(ink_1.Box, { paddingLeft: 1 },
            react_1.default.createElement(ink_1.Text, null, statusText)))) : (react_1.default.createElement(react_1.default.Fragment, null,
        !isConfirmed && (react_1.default.createElement(ink_1.Box, { flexDirection: "column" },
            react_1.default.createElement(diff_1.Plan, null),
            react_1.default.createElement(Confirm, { callback: confirmation }))),
        isConfirmed && react_1.default.createElement(exports.DestroyComponent, null)))));
};
//# sourceMappingURL=data:application/json;base64,