"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runInit = exports.checkForEmptyDirectory = exports.templates = void 0;
const fs = __importStar(require("fs-extra"));
const chalk = __importStar(require("chalk"));
const inquirer = __importStar(require("inquirer"));
const extract_zip_1 = __importDefault(require("extract-zip"));
const terraform_login_1 = require("../helper/terraform-login");
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const sscaff_1 = require("sscaff");
const terraformCloudClient = __importStar(require("../helper/terraform-cloud-client"));
const features_1 = require("cdktf/lib/features");
const util_1 = require("../../../lib/util");
const logging_1 = require("../../../lib/logging");
const errors_1 = require("../../../lib/errors");
const hcl2cdk_1 = require("@cdktf/hcl2cdk");
const provider_generator_1 = require("@cdktf/provider-generator");
const child_process_1 = require("child_process");
const checkpoint_1 = require("../../../lib/checkpoint");
const uuid_1 = require("uuid");
const provider_generator_2 = require("@cdktf/provider-generator");
const utilities_1 = require("./utilities");
const chalkColour = new chalk.Instance();
const templatesDir = path.join(utilities_1.projectRootPath(), "templates");
const availableTemplates = fs
    .readdirSync(templatesDir)
    .filter((x) => !x.startsWith("."));
exports.templates = [];
for (const template of availableTemplates) {
    exports.templates.push(template);
}
const pkg = utilities_1.readPackageJson();
const constructsVersion = pkg.dependencies.constructs;
function checkForEmptyDirectory(dir) {
    if (fs.readdirSync(dir).filter((f) => !f.startsWith(".") && f !== logging_1.logFileName)
        .length > 0) {
        console.error(chalkColour `{redBright ERROR: Cannot initialize a project in a non-empty directory}`);
        process.exit(1);
    }
}
exports.checkForEmptyDirectory = checkForEmptyDirectory;
async function runInit(argv) {
    const telemetryData = {};
    const destination = argv.destination || ".";
    let token = "";
    if (!argv.local) {
        // We ask the user to login to Terraform Cloud and set a token
        // If the user chooses not to use Terraform Cloud, we continue
        // without a token and set up the project.
        const terraformLogin = new terraform_login_1.TerraformLogin();
        token = await terraformLogin.askToLogin();
    }
    else {
        console.log(chalkColour `{yellow Note: By supplying '--local' option you have chosen local storage mode for storing the state of your stack.
This means that your Terraform state file will be stored locally on disk in a file 'terraform.<STACK NAME>.tfstate' in the root of your project.}`);
    }
    // Check if template was specified by the user
    let template = "";
    if (argv.template) {
        template = argv.template;
    }
    // Gather information about the template and the project
    const templateInfo = await getTemplate(template);
    telemetryData.template = templateInfo.Name;
    const projectInfo = await gatherInfo(token, templateInfo.Name, argv.projectName, argv.projectDescription);
    const projectId = uuid_1.v4();
    telemetryData.projectId = projectId;
    // Check if token is set so we can set up Terraform Cloud workspace
    // only set with the '--local' option is specified the user.
    if (token != "") {
        telemetryData.isRemote = Boolean(token);
        console.log(chalkColour `\n{whiteBright Setting up remote state backend and workspace in Terraform Cloud.}`);
        try {
            await terraformCloudClient.createWorkspace(projectInfo.OrganizationName, projectInfo.WorkspaceName, token);
        }
        catch (error) {
            console.error(chalkColour `{redBright ERROR: Could not create Terraform Cloud Workspace: ${error.message}}`);
            process.exit(1);
        }
    }
    const deps = await determineDeps(argv.cdktfVersion, argv.dist);
    const futureFlags = Object.entries(features_1.FUTURE_FLAGS)
        .map(([key, value]) => `"${key}": "${value}"`)
        .join(`,\n`);
    await sscaff_1.sscaff(templateInfo.Path, destination, {
        ...deps,
        ...projectInfo,
        futureFlags,
        projectId,
    });
    if (argv.fromTerraformProject) {
        if (argv.template === "typescript") {
            const mainTs = fs.readFileSync(path.resolve(destination, "main.ts"), "utf8");
            const importPath = path.resolve(process.cwd(), argv.fromTerraformProject);
            const combinedTfFile = hcl2cdk_1.getTerraformConfigFromDir(importPath);
            // Fetch all provider requirements from the project
            const providerRequirements = await hcl2cdk_1.parseProviderRequirements(combinedTfFile);
            // Get all the provider schemas
            const { providerSchema } = await provider_generator_2.readSchema(Object.entries(providerRequirements).map(([name, version]) => provider_generator_2.ConstructsMakerProviderTarget.from(new provider_generator_2.config.TerraformProviderConstraint(`${name}@ ${version}`), provider_generator_2.LANGUAGES[0])));
            try {
                const { code, cdktfJson, stats } = await hcl2cdk_1.convertProject(combinedTfFile, mainTs, require(path.resolve(destination, "cdktf.json")), {
                    language: "typescript",
                    providerSchema,
                });
                fs.writeFileSync(path.resolve(destination, "main.ts"), code, "utf8");
                fs.writeFileSync(path.resolve(destination, "cdktf.json"), JSON.stringify(cdktfJson, null, 2), "utf8");
                const { terraformModules, terraformProviders } = cdktfJson;
                if (terraformModules.length > 0) {
                    copyLocalModules(terraformModules, importPath, destination);
                }
                if (terraformModules.length + terraformProviders.length > 0) {
                    child_process_1.execSync("npm run get", { cwd: destination });
                }
                telemetryData.conversionStats = stats;
            }
            catch (err) {
                throw errors_1.Errors.Internal("init", err, { fromTerraformProject: true });
            }
        }
        else {
            console.error(`The --from-terraform-project flag is only supported with the typescript template. The command will continue and ignore the flag.`);
        }
    }
    if (templateInfo.cleanupTemporaryFiles) {
        await templateInfo.cleanupTemporaryFiles();
    }
    await checkpoint_1.sendTelemetry("init", telemetryData);
}
exports.runInit = runInit;
function copyLocalModules(modules, sourcePath, destination) {
    modules
        .filter((m) => provider_generator_1.isLocalModule(m))
        .map((m) => fs.copySync(path.resolve(sourcePath, m), path.resolve(destination, m), {
        recursive: true,
    }));
}
async function determineDeps(version = pkg.version, dist) {
    const pythonVersion = version.replace(/-pre\./g, ".dev");
    if (dist) {
        const ret = {
            npm_cdktf: path.resolve(dist, "js", `cdktf@${version}.jsii.tgz`),
            npm_cdktf_cli: path.resolve(dist, "js", `cdktf-cli-${version}.tgz`),
            pypi_cdktf: path.resolve(dist, "python", `cdktf-${pythonVersion}.tar.gz`),
            mvn_cdktf: path.resolve(dist, "java", `com/hashicorp/cdktf/${version}/cdktf-${version}.jar`),
            nuget_cdktf: path.resolve(dist, "dotnet", `HashiCorp.Cdktf.${version}.nupkg`),
            go_cdktf: path.resolve(dist, "go", `cdktf`),
        };
        for (const file of Object.values(ret)) {
            if (!(await fs.pathExists(file))) {
                throw errors_1.Errors.Internal("init", `unable to find ${file} under the "dist" directory (${dist})`, { version });
            }
        }
        const versions = {
            cdktf_version: version,
            constructs_version: constructsVersion,
        };
        return {
            ...ret,
            ...versions,
        };
    }
    if (version === "0.0.0") {
        throw errors_1.Errors.Usage("init", chalkColour `{redBright cannot use version 0.0.0, use --cdktf-version, --dist or CDKTF_DIST to install from a "dist" directory}`, {});
    }
    // determine if we want a specific pinned version or a version range we take
    // a pinned version if version includes a hyphen which means it is a
    // pre-release (e.g. "0.12.0-pre.e6834d3"). otherwise, we require a caret
    // version.
    const ver = version.includes("-") ? version : `^${version}`;
    return {
        cdktf_version: version,
        constructs_version: constructsVersion,
        npm_cdktf: `cdktf@${ver}`,
        npm_cdktf_cli: `cdktf-cli@${ver}`,
        pypi_cdktf: `cdktf~=${pythonVersion}`,
        mvn_cdktf: version,
        nuget_cdktf: version,
        go_cdktf: `v${version}`,
    };
}
async function gatherInfo(token, templateName, projectName, projectDescription) {
    const currentDirectory = path.basename(process.cwd());
    const projectDescriptionDefault = "A simple getting started project for cdktf.";
    const questions = [];
    if (!projectName) {
        questions.push({
            name: "projectName",
            default: currentDirectory,
        });
    }
    if (!projectDescription) {
        questions.push({
            name: "projectDescription",
            default: projectDescriptionDefault,
        });
    }
    const answers = questions.length > 0 ? await inquirer.prompt(questions) : {};
    const project = {
        Name: projectName || answers.projectName || "",
        Description: projectDescription || answers.projectDescription || "",
        OrganizationName: "",
        WorkspaceName: "",
    };
    if (token != "") {
        console.log(chalkColour `\nDetected {blueBright Terraform Cloud} token.`);
        console.log(chalkColour `\nWe will now set up {blueBright Terraform Cloud} for your project.\n`);
        const organizationNames = await terraformCloudClient.getOrganizationNames(token);
        const organizationData = organizationNames.data;
        const organizationOptions = [];
        for (const organization of organizationData) {
            organizationOptions.push(organization.id);
        }
        // todo: add validation for the organization name and workspace. add error handling
        const { organization: organizationSelect } = await inquirer.prompt([
            {
                type: "list",
                name: "organization",
                message: "Terraform Cloud Organization Name",
                choices: organizationOptions,
            },
        ]);
        console.log(chalkColour `\nWe are going to create a new {blueBright Terraform Cloud Workspace} for your project.\n`);
        const { workspace: workspaceName } = await inquirer.prompt([
            {
                name: "workspace",
                message: "Terraform Cloud Workspace Name",
                default: templateName,
            },
        ]);
        project.OrganizationName = organizationSelect;
        project.WorkspaceName = workspaceName;
    }
    return project;
}
/**
 *
 * @param templateName either the name of built-in templates or an url pointing to a zip archive
 */
async function getTemplate(templateName) {
    if (templateName == "") {
        const templateOptionRemote = "<remote zip file>";
        const options = [...exports.templates, templateOptionRemote];
        // Prompt for template
        const { template: selection } = await inquirer.prompt([
            {
                type: "list",
                name: "template",
                message: "What template do you want to use?",
                choices: options,
            },
        ]);
        if (selection === templateOptionRemote) {
            const { templateName: remoteTemplateName } = await inquirer.prompt([
                {
                    name: "templateName",
                    message: "Please enter an URL pointing to the template zip file you want to use:",
                    validate: (value) => {
                        if (value === "") {
                            return "Url can not be empty";
                        }
                        else {
                            return true;
                        }
                    },
                },
            ]);
            templateName = remoteTemplateName;
        }
        else {
            templateName = selection;
            console.log(chalkColour `\n{whiteBright Initializing a project using the {greenBright ${templateName}} template.}`);
        }
    }
    // treat as remote url
    if (!exports.templates.includes(templateName)) {
        return fetchRemoteTemplate(templateName);
    }
    else {
        return {
            Name: templateName,
            Path: path.join(templatesDir, templateName),
        };
    }
}
async function fetchRemoteTemplate(templateUrl) {
    console.log(chalkColour `Fetching remote template from: {whiteBright ${templateUrl}}`);
    try {
        const url = new URL(templateUrl);
        const remoteFileName = path.basename(url.pathname) || "template.zip";
        logging_1.logger.trace(`Detected remote file name to be "${remoteFileName}" out of template URL "${templateUrl}"`);
        const tmpDir = await fs.mkdtemp(path.join(os.tmpdir(), "cdktf."));
        const tmpZipFile = path.join(tmpDir, remoteFileName);
        const zipExtractDir = path.join(tmpDir, "extracted");
        logging_1.logger.trace(`Downloading "${remoteFileName}" to temporary directory "${tmpDir}"`);
        console.log(chalkColour `Downloading "{whiteBright ${remoteFileName}}" to temporary directory`);
        await util_1.downloadFile(url.href, tmpZipFile);
        console.log("Extracting zip file");
        await extract_zip_1.default(tmpZipFile, { dir: zipExtractDir });
        // walk directory to find cdktf.json as the extracted directory contains a root directory with unknown name
        // this also allows nesting the template itself into a sub directory and having a root directory with an unrelated README
        console.log(chalkColour `Looking for directory containing {whiteBright cdktf.json}`);
        const templatePath = await findCdkTfJsonDirectory(zipExtractDir);
        if (!templatePath) {
            throw errors_1.Errors.Usage("init", chalkColour `Could not find a {whiteBright cdktf.json} in the extracted directory`, {});
        }
        return {
            Name: path.parse(remoteFileName).name,
            Path: templatePath,
            cleanupTemporaryFiles: async () => {
                console.log("Clearing up temporary directory of remote template");
                await fs.remove(tmpDir);
            },
        };
    }
    catch (e) {
        if (e.code === "ERR_INVALID_URL") {
            console.error(chalkColour `Could not download template: {redBright the supplied url is invalid}`);
            console.error(chalkColour `Please supply a valid url (including the protocol) or use one of the built-in templates.`);
            process.exit(1);
        }
        if (e instanceof util_1.HttpError) {
            console.error(chalkColour `Could not download template: {redBright ${e.message}}`);
            process.exit(1);
        }
        console.error(e);
        process.exit(1);
    }
}
async function findCdkTfJsonDirectory(rootDir) {
    const files = await fs.readdir(rootDir);
    if (files.includes("cdktf.json")) {
        return rootDir;
    }
    for (const file of files) {
        const fullPath = path.join(rootDir, file);
        if ((await fs.stat(fullPath)).isDirectory()) {
            const dir = findCdkTfJsonDirectory(fullPath);
            if (dir)
                return dir;
            // else continue with next sub directory
        }
    }
    return null;
}
//# sourceMappingURL=data:application/json;base64,