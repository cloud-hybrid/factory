"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapWatchState = exports.readGitignore = void 0;
const parse_gitignore_1 = __importDefault(require("parse-gitignore"));
const path = __importStar(require("path"));
const fs_1 = require("fs");
async function readGitignore(directory) {
    const content = await fs_1.promises.readFile(path.join(directory, ".gitignore"));
    return parse_gitignore_1.default(content);
}
exports.readGitignore = readGitignore;
function mapWatchState(state) {
    return {
        status: state.status,
        stacks: state.stacks.map((s) => ({
            constructPath: s.constructPath,
            name: s.name,
            synthesizedStackPath: s.synthesizedStackPath,
            workingDirectory: s.workingDirectory,
        })),
        resources: Array.from(state.resources.values()).map((r) => ({
            id: r.id,
            action: plannedResourceActionReverseMap[r.action],
            deployState: deployingResourceApplyStateReverseMap[r.applyState],
            changedAt: r.changedAt,
        })),
        error: state.error
            ? {
                message: state.error.message,
                origin: state.error.origin,
                recoverable: state.error.recoverable,
                timestamp: state.error.timestamp,
            }
            : undefined,
    };
}
exports.mapWatchState = mapWatchState;
const plannedResourceActionReverseMap = {
    "no-op": "NO_OP",
    create: "CREATE",
    delete: "DELETE",
    read: "READ",
    update: "UPDATE",
};
const deployingResourceApplyStateReverseMap = {
    waiting: "WAITING",
    updating: "UPDATING",
    updated: "UPDATED",
    creating: "CREATING",
    created: "CREATED",
    destroying: "DESTROYING",
    destroyed: "DESTROYED",
    success: "SUCCESS",
    error: "ERROR",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHNFQUE2QztBQUM3QywyQ0FBNkI7QUFDN0IsMkJBQW9DO0FBTzdCLEtBQUssVUFBVSxhQUFhLENBQUMsU0FBaUI7SUFDbkQsTUFBTSxPQUFPLEdBQUcsTUFBTSxhQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDdEUsT0FBTyx5QkFBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFIRCxzQ0FHQztBQWtDRCxTQUFnQixhQUFhLENBQUMsS0FBaUI7SUFDN0MsT0FBTztRQUNMLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtRQUNwQixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDL0IsYUFBYSxFQUFFLENBQUMsQ0FBQyxhQUFhO1lBQzlCLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSTtZQUNaLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxvQkFBb0I7WUFDNUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQjtTQUNyQyxDQUFDLENBQUM7UUFDSCxTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzFELEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRTtZQUNSLE1BQU0sRUFBRSwrQkFBK0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ2pELFdBQVcsRUFBRSxxQ0FBcUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1lBQ2hFLFNBQVMsRUFBRSxDQUFDLENBQUMsU0FBUztTQUN2QixDQUFDLENBQUM7UUFDSCxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDaEIsQ0FBQyxDQUFDO2dCQUNFLE9BQU8sRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU87Z0JBQzVCLE1BQU0sRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU07Z0JBQzFCLFdBQVcsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLFdBQVc7Z0JBQ3BDLFNBQVMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVM7YUFDakM7WUFDSCxDQUFDLENBQUMsU0FBUztLQUNkLENBQUM7QUFDSixDQUFDO0FBeEJELHNDQXdCQztBQUVELE1BQU0sK0JBQStCLEdBR2pDO0lBQ0YsT0FBTyxFQUFFLE9BQU87SUFDaEIsTUFBTSxFQUFFLFFBQVE7SUFDaEIsTUFBTSxFQUFFLFFBQVE7SUFDaEIsSUFBSSxFQUFFLE1BQU07SUFDWixNQUFNLEVBQUUsUUFBUTtDQUNqQixDQUFDO0FBRUYsTUFBTSxxQ0FBcUMsR0FHdkM7SUFDRixPQUFPLEVBQUUsU0FBUztJQUNsQixRQUFRLEVBQUUsVUFBVTtJQUNwQixPQUFPLEVBQUUsU0FBUztJQUNsQixRQUFRLEVBQUUsVUFBVTtJQUNwQixPQUFPLEVBQUUsU0FBUztJQUNsQixVQUFVLEVBQUUsWUFBWTtJQUN4QixTQUFTLEVBQUUsV0FBVztJQUN0QixPQUFPLEVBQUUsU0FBUztJQUNsQixLQUFLLEVBQUUsT0FBTztDQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGFyc2VHaXRpZ25vcmUgZnJvbSBcInBhcnNlLWdpdGlnbm9yZVwiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgcHJvbWlzZXMgYXMgZnMgfSBmcm9tIFwiZnNcIjtcbmltcG9ydCB7IFdhdGNoRXJyb3JPcmlnaW4sIFdhdGNoU3RhdGUgfSBmcm9tIFwiLi9XYXRjaENsaWVudFwiO1xuaW1wb3J0IHtcbiAgRGVwbG95aW5nUmVzb3VyY2VBcHBseVN0YXRlLFxuICBQbGFubmVkUmVzb3VyY2VBY3Rpb24sXG59IGZyb20gXCIuLi8uLi9iaW4vY21kcy91aS9tb2RlbHMvdGVycmFmb3JtXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkR2l0aWdub3JlKGRpcmVjdG9yeTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICBjb25zdCBjb250ZW50ID0gYXdhaXQgZnMucmVhZEZpbGUocGF0aC5qb2luKGRpcmVjdG9yeSwgXCIuZ2l0aWdub3JlXCIpKTtcbiAgcmV0dXJuIHBhcnNlR2l0aWdub3JlKGNvbnRlbnQpO1xufVxuXG4vLyB0b2RvOiBnZW5lcmF0ZSB0aGlzIHZpYSBzb21lIGdyYXBocWwgdG9vbFxuZXhwb3J0IHR5cGUgR3JhcGhRTFdhdGNoU3RhdGUgPSB7XG4gIHN0YXR1czogV2F0Y2hTdGF0ZVtcInN0YXR1c1wiXTtcbiAgc3RhY2tzOiBBcnJheTx7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdFBhdGg6IHN0cmluZztcbiAgICBzeW50aGVzaXplZFN0YWNrUGF0aDogc3RyaW5nO1xuICAgIHdvcmtpbmdEaXJlY3Rvcnk6IHN0cmluZztcbiAgfT47XG4gIHJlc291cmNlczogQXJyYXk8e1xuICAgIGlkOiBzdHJpbmc7XG4gICAgYWN0aW9uOiBcIkNSRUFURVwiIHwgXCJVUERBVEVcIiB8IFwiREVMRVRFXCIgfCBcIlJFQURcIiB8IFwiTk9fT1BcIjtcbiAgICBkZXBsb3lTdGF0ZTpcbiAgICAgIHwgXCJXQUlUSU5HXCJcbiAgICAgIHwgXCJVUERBVElOR1wiXG4gICAgICB8IFwiVVBEQVRFRFwiXG4gICAgICB8IFwiQ1JFQVRJTkdcIlxuICAgICAgfCBcIkNSRUFURURcIlxuICAgICAgfCBcIkRFU1RST1lJTkdcIlxuICAgICAgfCBcIkRFU1RST1lFRFwiXG4gICAgICB8IFwiU1VDQ0VTU1wiXG4gICAgICB8IFwiRVJST1JcIjtcbiAgICBjaGFuZ2VkQXQ6IG51bWJlcjtcbiAgfT47XG4gIGVycm9yPzoge1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICByZWNvdmVyYWJsZTogYm9vbGVhbjtcbiAgICBvcmlnaW46IFdhdGNoRXJyb3JPcmlnaW4gfCBcIlNFUlZFUlwiO1xuICAgIHRpbWVzdGFtcDogbnVtYmVyO1xuICB9O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFdhdGNoU3RhdGUoc3RhdGU6IFdhdGNoU3RhdGUpOiBHcmFwaFFMV2F0Y2hTdGF0ZSB7XG4gIHJldHVybiB7XG4gICAgc3RhdHVzOiBzdGF0ZS5zdGF0dXMsXG4gICAgc3RhY2tzOiBzdGF0ZS5zdGFja3MubWFwKChzKSA9PiAoe1xuICAgICAgY29uc3RydWN0UGF0aDogcy5jb25zdHJ1Y3RQYXRoLFxuICAgICAgbmFtZTogcy5uYW1lLFxuICAgICAgc3ludGhlc2l6ZWRTdGFja1BhdGg6IHMuc3ludGhlc2l6ZWRTdGFja1BhdGgsXG4gICAgICB3b3JraW5nRGlyZWN0b3J5OiBzLndvcmtpbmdEaXJlY3RvcnksXG4gICAgfSkpLFxuICAgIHJlc291cmNlczogQXJyYXkuZnJvbShzdGF0ZS5yZXNvdXJjZXMudmFsdWVzKCkpLm1hcCgocikgPT4gKHtcbiAgICAgIGlkOiByLmlkLFxuICAgICAgYWN0aW9uOiBwbGFubmVkUmVzb3VyY2VBY3Rpb25SZXZlcnNlTWFwW3IuYWN0aW9uXSxcbiAgICAgIGRlcGxveVN0YXRlOiBkZXBsb3lpbmdSZXNvdXJjZUFwcGx5U3RhdGVSZXZlcnNlTWFwW3IuYXBwbHlTdGF0ZV0sXG4gICAgICBjaGFuZ2VkQXQ6IHIuY2hhbmdlZEF0LFxuICAgIH0pKSxcbiAgICBlcnJvcjogc3RhdGUuZXJyb3JcbiAgICAgID8ge1xuICAgICAgICAgIG1lc3NhZ2U6IHN0YXRlLmVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgb3JpZ2luOiBzdGF0ZS5lcnJvci5vcmlnaW4sXG4gICAgICAgICAgcmVjb3ZlcmFibGU6IHN0YXRlLmVycm9yLnJlY292ZXJhYmxlLFxuICAgICAgICAgIHRpbWVzdGFtcDogc3RhdGUuZXJyb3IudGltZXN0YW1wLFxuICAgICAgICB9XG4gICAgICA6IHVuZGVmaW5lZCxcbiAgfTtcbn1cblxuY29uc3QgcGxhbm5lZFJlc291cmNlQWN0aW9uUmV2ZXJzZU1hcDogUmVjb3JkPFxuICBQbGFubmVkUmVzb3VyY2VBY3Rpb24sXG4gIEdyYXBoUUxXYXRjaFN0YXRlW1wicmVzb3VyY2VzXCJdW251bWJlcl1bXCJhY3Rpb25cIl1cbj4gPSB7XG4gIFwibm8tb3BcIjogXCJOT19PUFwiLFxuICBjcmVhdGU6IFwiQ1JFQVRFXCIsXG4gIGRlbGV0ZTogXCJERUxFVEVcIixcbiAgcmVhZDogXCJSRUFEXCIsXG4gIHVwZGF0ZTogXCJVUERBVEVcIixcbn07XG5cbmNvbnN0IGRlcGxveWluZ1Jlc291cmNlQXBwbHlTdGF0ZVJldmVyc2VNYXA6IFJlY29yZDxcbiAgRGVwbG95aW5nUmVzb3VyY2VBcHBseVN0YXRlLFxuICBHcmFwaFFMV2F0Y2hTdGF0ZVtcInJlc291cmNlc1wiXVtudW1iZXJdW1wiZGVwbG95U3RhdGVcIl1cbj4gPSB7XG4gIHdhaXRpbmc6IFwiV0FJVElOR1wiLFxuICB1cGRhdGluZzogXCJVUERBVElOR1wiLFxuICB1cGRhdGVkOiBcIlVQREFURURcIixcbiAgY3JlYXRpbmc6IFwiQ1JFQVRJTkdcIixcbiAgY3JlYXRlZDogXCJDUkVBVEVEXCIsXG4gIGRlc3Ryb3lpbmc6IFwiREVTVFJPWUlOR1wiLFxuICBkZXN0cm95ZWQ6IFwiREVTVFJPWUVEXCIsXG4gIHN1Y2Nlc3M6IFwiU1VDQ0VTU1wiLFxuICBlcnJvcjogXCJFUlJPUlwiLFxufTtcbiJdfQ==