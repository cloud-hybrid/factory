"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassType = void 0;
const initializer_1 = require("./initializer");
const method_1 = require("./method");
const property_1 = require("./property");
const reference_type_1 = require("./reference-type");
const util_1 = require("./util");
class ClassType extends reference_type_1.ReferenceType {
    constructor(system, assembly, spec) {
        super(system, assembly, spec);
        this.system = system;
        this.assembly = assembly;
        this.spec = spec;
    }
    /**
     * Base class (optional).
     */
    get base() {
        if (!this.spec.base) {
            return undefined;
        }
        const type = this.system.findFqn(this.spec.base);
        if (!(type instanceof ClassType)) {
            throw new Error(`FQN for base class points to a non-class type: ${this.spec.base}`);
        }
        return type;
    }
    /**
     * Initializer (constructor) method.
     */
    get initializer() {
        if (!this.spec.initializer) {
            return undefined;
        }
        return new initializer_1.Initializer(this.system, this.assembly, this, this.spec.initializer);
    }
    /**
     * Indicates if this class is an abstract class.
     */
    get abstract() {
        return !!this.spec.abstract;
    }
    /**
     * Returns list of all base classes (first is the direct base and last is the top-most).
     */
    getAncestors() {
        const out = new Array();
        if (this.base) {
            out.push(this.base);
            out.push(...this.base.getAncestors());
        }
        return out;
    }
    /**
     * Lists all properties in this class.
     * @param inherited include all properties inherited from base classes (default: false)
     */
    getProperties(inherited = false) {
        return this._getProperties(inherited, this);
    }
    /**
     * List all methods in this class.
     * @param inherited include all methods inherited from base classes (default: false)
     */
    getMethods(inherited = false) {
        return this._getMethods(inherited, this);
    }
    /**
     * Lists all interfaces this class implements.
     * @param inherited include all interfaces implemented by all base classes (default: false)
     */
    getInterfaces(inherited = false) {
        const out = new Array();
        if (inherited && this.base) {
            out.push(...this.base.getInterfaces(inherited));
        }
        if (this.spec.interfaces) {
            out.push(...flatten(this.spec.interfaces
                .map((fqn) => this.system.findInterface(fqn))
                .map((iface) => [
                iface,
                ...(inherited ? iface.getInterfaces(true) : []),
            ])));
        }
        return out;
    }
    isClassType() {
        return true;
    }
    _getProperties(inherited, parentType) {
        var _a;
        const base = inherited && this.base
            ? this.base._getProperties(inherited, parentType)
            : {};
        return Object.assign(base, util_1.indexBy(((_a = this.spec.properties) !== null && _a !== void 0 ? _a : []).map((p) => new property_1.Property(this.system, this.assembly, parentType, this, p)), (p) => p.name));
    }
    _getMethods(inherited, parentType) {
        var _a;
        const base = inherited && this.base
            ? this.base._getMethods(inherited, parentType)
            : {};
        return Object.assign(base, util_1.indexBy(((_a = this.spec.methods) !== null && _a !== void 0 ? _a : []).map((m) => new method_1.Method(this.system, this.assembly, parentType, this, m)), (m) => m.name));
    }
}
exports.ClassType = ClassType;
function flatten(xs) {
    return Array.prototype.concat([], ...xs);
}
//# sourceMappingURL=data:application/json;base64,