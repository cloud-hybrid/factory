"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeReference = void 0;
const jsii = require("@jsii/spec");
class TypeReference {
    constructor(system, spec) {
        this.system = system;
        this.spec = spec;
    }
    toString() {
        if (this.void) {
            return 'void';
        }
        if (this.primitive) {
            return this.primitive;
        }
        if (this.fqn) {
            return this.fqn;
        }
        if (this.arrayOfType) {
            return `Array<${this.arrayOfType.toString()}>`;
        }
        if (this.mapOfType) {
            return `Map<string => ${this.mapOfType.toString()}>`;
        }
        if (this.unionOfTypes) {
            return this.unionOfTypes.map((x) => x.toString()).join(' | ');
        }
        throw new Error('Invalid type reference');
    }
    get void() {
        return !this.spec;
    }
    get isAny() {
        return this.primitive === 'any';
    }
    get primitive() {
        if (!jsii.isPrimitiveTypeReference(this.spec)) {
            return undefined;
        }
        return this.spec.primitive;
    }
    get fqn() {
        return jsii.isNamedTypeReference(this.spec) ? this.spec.fqn : undefined;
    }
    get type() {
        if (!jsii.isNamedTypeReference(this.spec)) {
            return undefined;
        }
        return this.system.findFqn(this.spec.fqn);
    }
    get arrayOfType() {
        if (!jsii.isCollectionTypeReference(this.spec)) {
            return undefined;
        }
        if (this.spec.collection.kind !== jsii.CollectionKind.Array) {
            return undefined;
        }
        return new TypeReference(this.system, this.spec.collection.elementtype);
    }
    get mapOfType() {
        if (!jsii.isCollectionTypeReference(this.spec)) {
            return undefined;
        }
        if (this.spec.collection.kind !== jsii.CollectionKind.Map) {
            return undefined;
        }
        return new TypeReference(this.system, this.spec.collection.elementtype);
    }
    get unionOfTypes() {
        if (!jsii.isUnionTypeReference(this.spec)) {
            return undefined;
        }
        return this.spec.union.types.map((t) => new TypeReference(this.system, t));
    }
}
exports.TypeReference = TypeReference;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1yZWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0eXBlLXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBbUM7QUFLbkMsTUFBYSxhQUFhO0lBQ3hCLFlBQ2tCLE1BQWtCLEVBQ2xCLElBQXlCO1FBRHpCLFdBQU0sR0FBTixNQUFNLENBQVk7UUFDbEIsU0FBSSxHQUFKLElBQUksQ0FBcUI7SUFDeEMsQ0FBQztJQUVHLFFBQVE7UUFDYixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixPQUFPLE1BQU0sQ0FBQztTQUNmO1FBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUN2QjtRQUNELElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNaLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUNqQjtRQUVELElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixPQUFPLFNBQVMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO1NBQ2hEO1FBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLE9BQU8saUJBQWlCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztTQUN0RDtRQUNELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0Q7UUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxJQUFXLEtBQUs7UUFDZCxPQUFPLElBQUksQ0FBQyxTQUFTLEtBQUssS0FBSyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUFXLFNBQVM7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDN0MsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFXLEdBQUc7UUFDWixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDMUUsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pDLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxJQUFXLFdBQVc7UUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDOUMsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRTtZQUMzRCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUVELE9BQU8sSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsSUFBVyxTQUFTO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzlDLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUU7WUFDekQsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxPQUFPLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELElBQVcsWUFBWTtRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6QyxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUVELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7Q0FDRjtBQXpGRCxzQ0F5RkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBqc2lpIGZyb20gJ0Bqc2lpL3NwZWMnO1xuXG5pbXBvcnQgeyBUeXBlIH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IFR5cGVTeXN0ZW0gfSBmcm9tICcuL3R5cGUtc3lzdGVtJztcblxuZXhwb3J0IGNsYXNzIFR5cGVSZWZlcmVuY2Uge1xuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHN5c3RlbTogVHlwZVN5c3RlbSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3BlYz86IGpzaWkuVHlwZVJlZmVyZW5jZSxcbiAgKSB7fVxuXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIGlmICh0aGlzLnZvaWQpIHtcbiAgICAgIHJldHVybiAndm9pZCc7XG4gICAgfVxuICAgIGlmICh0aGlzLnByaW1pdGl2ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJpbWl0aXZlO1xuICAgIH1cbiAgICBpZiAodGhpcy5mcW4pIHtcbiAgICAgIHJldHVybiB0aGlzLmZxbjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hcnJheU9mVHlwZSkge1xuICAgICAgcmV0dXJuIGBBcnJheTwke3RoaXMuYXJyYXlPZlR5cGUudG9TdHJpbmcoKX0+YDtcbiAgICB9XG4gICAgaWYgKHRoaXMubWFwT2ZUeXBlKSB7XG4gICAgICByZXR1cm4gYE1hcDxzdHJpbmcgPT4gJHt0aGlzLm1hcE9mVHlwZS50b1N0cmluZygpfT5gO1xuICAgIH1cbiAgICBpZiAodGhpcy51bmlvbk9mVHlwZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLnVuaW9uT2ZUeXBlcy5tYXAoKHgpID0+IHgudG9TdHJpbmcoKSkuam9pbignIHwgJyk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHR5cGUgcmVmZXJlbmNlJyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHZvaWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLnNwZWM7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGlzQW55KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnByaW1pdGl2ZSA9PT0gJ2FueSc7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHByaW1pdGl2ZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmICghanNpaS5pc1ByaW1pdGl2ZVR5cGVSZWZlcmVuY2UodGhpcy5zcGVjKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zcGVjLnByaW1pdGl2ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZnFuKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIGpzaWkuaXNOYW1lZFR5cGVSZWZlcmVuY2UodGhpcy5zcGVjKSA/IHRoaXMuc3BlYy5mcW4gOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHR5cGUoKTogVHlwZSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCFqc2lpLmlzTmFtZWRUeXBlUmVmZXJlbmNlKHRoaXMuc3BlYykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLmZpbmRGcW4odGhpcy5zcGVjLmZxbik7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGFycmF5T2ZUeXBlKCk6IFR5cGVSZWZlcmVuY2UgfCB1bmRlZmluZWQge1xuICAgIGlmICghanNpaS5pc0NvbGxlY3Rpb25UeXBlUmVmZXJlbmNlKHRoaXMuc3BlYykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3BlYy5jb2xsZWN0aW9uLmtpbmQgIT09IGpzaWkuQ29sbGVjdGlvbktpbmQuQXJyYXkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUeXBlUmVmZXJlbmNlKHRoaXMuc3lzdGVtLCB0aGlzLnNwZWMuY29sbGVjdGlvbi5lbGVtZW50dHlwZSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG1hcE9mVHlwZSgpOiBUeXBlUmVmZXJlbmNlIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoIWpzaWkuaXNDb2xsZWN0aW9uVHlwZVJlZmVyZW5jZSh0aGlzLnNwZWMpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNwZWMuY29sbGVjdGlvbi5raW5kICE9PSBqc2lpLkNvbGxlY3Rpb25LaW5kLk1hcCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFR5cGVSZWZlcmVuY2UodGhpcy5zeXN0ZW0sIHRoaXMuc3BlYy5jb2xsZWN0aW9uLmVsZW1lbnR0eXBlKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdW5pb25PZlR5cGVzKCk6IFR5cGVSZWZlcmVuY2VbXSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCFqc2lpLmlzVW5pb25UeXBlUmVmZXJlbmNlKHRoaXMuc3BlYykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3BlYy51bmlvbi50eXBlcy5tYXAoKHQpID0+IG5ldyBUeXBlUmVmZXJlbmNlKHRoaXMuc3lzdGVtLCB0KSk7XG4gIH1cbn1cbiJdfQ==