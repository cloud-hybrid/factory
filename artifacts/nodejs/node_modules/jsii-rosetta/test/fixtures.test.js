"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fixtures_1 = require("../lib/fixtures");
const snippet_1 = require("../lib/snippet");
const testutil_1 = require("./testutil");
const location = testutil_1.testSnippetLocation('where');
describe('fixturize', () => {
    test('snippet retains properties', () => {
        const snippet = {
            visibleSource: 'visibleSource',
            location,
            parameters: {
                [snippet_1.SnippetParameters.$PROJECT_DIRECTORY]: 'directory',
                [snippet_1.SnippetParameters.NO_FIXTURE]: '',
                key: 'value',
            },
            strict: true,
        };
        expect(fixtures_1.fixturize(snippet)).toEqual(expect.objectContaining(snippet));
    });
    test('separates imports and declarations', () => {
        const source = `import * as ns from 'mod';
declare const mock: Tpe;
const val = new Cls();`;
        const snippet = {
            visibleSource: source,
            location,
            parameters: {
                [snippet_1.SnippetParameters.$PROJECT_DIRECTORY]: 'test',
            },
            strict: true,
        };
        const fixturizedSnippet = fixtures_1.fixturize(snippet);
        expect(fixturizedSnippet.completeSource).toBe(`// Hoisted imports begin after !show marker below
/// !show
import * as ns from 'mod';
declare const mock: Tpe;
/// !hide
// Hoisted imports ended before !hide marker above
// Code snippet begins after !show marker below
/// !show

const val = new Cls();
/// !hide
// Code snippet ended before !hide marker above
`);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4dHVyZXMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZpeHR1cmVzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4Q0FBNEM7QUFDNUMsNENBQW1EO0FBQ25ELHlDQUFpRDtBQUVqRCxNQUFNLFFBQVEsR0FBRyw4QkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUU5QyxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtJQUN6QixJQUFJLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFO1FBQ3RDLE1BQU0sT0FBTyxHQUFHO1lBQ2QsYUFBYSxFQUFFLGVBQWU7WUFDOUIsUUFBUTtZQUNSLFVBQVUsRUFBRTtnQkFDVixDQUFDLDJCQUFpQixDQUFDLGtCQUFrQixDQUFDLEVBQUUsV0FBVztnQkFDbkQsQ0FBQywyQkFBaUIsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFO2dCQUNsQyxHQUFHLEVBQUUsT0FBTzthQUNiO1lBQ0QsTUFBTSxFQUFFLElBQUk7U0FDYixDQUFDO1FBRUYsTUFBTSxDQUFDLG9CQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDdkUsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsb0NBQW9DLEVBQUUsR0FBRyxFQUFFO1FBQzlDLE1BQU0sTUFBTSxHQUFHOzt1QkFFSSxDQUFDO1FBQ3BCLE1BQU0sT0FBTyxHQUFHO1lBQ2QsYUFBYSxFQUFFLE1BQU07WUFDckIsUUFBUTtZQUNSLFVBQVUsRUFBRTtnQkFDVixDQUFDLDJCQUFpQixDQUFDLGtCQUFrQixDQUFDLEVBQUUsTUFBTTthQUMvQztZQUNELE1BQU0sRUFBRSxJQUFJO1NBQ2IsQ0FBQztRQUVGLE1BQU0saUJBQWlCLEdBQUcsb0JBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QyxNQUFNLENBQUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDOzs7Ozs7Ozs7Ozs7Q0FZakQsQ0FBQyxDQUFDO0lBQ0QsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpeHR1cml6ZSB9IGZyb20gJy4uL2xpYi9maXh0dXJlcyc7XG5pbXBvcnQgeyBTbmlwcGV0UGFyYW1ldGVycyB9IGZyb20gJy4uL2xpYi9zbmlwcGV0JztcbmltcG9ydCB7IHRlc3RTbmlwcGV0TG9jYXRpb24gfSBmcm9tICcuL3Rlc3R1dGlsJztcblxuY29uc3QgbG9jYXRpb24gPSB0ZXN0U25pcHBldExvY2F0aW9uKCd3aGVyZScpO1xuXG5kZXNjcmliZSgnZml4dHVyaXplJywgKCkgPT4ge1xuICB0ZXN0KCdzbmlwcGV0IHJldGFpbnMgcHJvcGVydGllcycsICgpID0+IHtcbiAgICBjb25zdCBzbmlwcGV0ID0ge1xuICAgICAgdmlzaWJsZVNvdXJjZTogJ3Zpc2libGVTb3VyY2UnLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgIFtTbmlwcGV0UGFyYW1ldGVycy4kUFJPSkVDVF9ESVJFQ1RPUlldOiAnZGlyZWN0b3J5JyxcbiAgICAgICAgW1NuaXBwZXRQYXJhbWV0ZXJzLk5PX0ZJWFRVUkVdOiAnJyxcbiAgICAgICAga2V5OiAndmFsdWUnLFxuICAgICAgfSxcbiAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICB9O1xuXG4gICAgZXhwZWN0KGZpeHR1cml6ZShzbmlwcGV0KSkudG9FcXVhbChleHBlY3Qub2JqZWN0Q29udGFpbmluZyhzbmlwcGV0KSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3NlcGFyYXRlcyBpbXBvcnRzIGFuZCBkZWNsYXJhdGlvbnMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc291cmNlID0gYGltcG9ydCAqIGFzIG5zIGZyb20gJ21vZCc7XG5kZWNsYXJlIGNvbnN0IG1vY2s6IFRwZTtcbmNvbnN0IHZhbCA9IG5ldyBDbHMoKTtgO1xuICAgIGNvbnN0IHNuaXBwZXQgPSB7XG4gICAgICB2aXNpYmxlU291cmNlOiBzb3VyY2UsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgW1NuaXBwZXRQYXJhbWV0ZXJzLiRQUk9KRUNUX0RJUkVDVE9SWV06ICd0ZXN0JyxcbiAgICAgIH0sXG4gICAgICBzdHJpY3Q6IHRydWUsXG4gICAgfTtcblxuICAgIGNvbnN0IGZpeHR1cml6ZWRTbmlwcGV0ID0gZml4dHVyaXplKHNuaXBwZXQpO1xuXG4gICAgZXhwZWN0KGZpeHR1cml6ZWRTbmlwcGV0LmNvbXBsZXRlU291cmNlKS50b0JlKGAvLyBIb2lzdGVkIGltcG9ydHMgYmVnaW4gYWZ0ZXIgIXNob3cgbWFya2VyIGJlbG93XG4vLy8gIXNob3dcbmltcG9ydCAqIGFzIG5zIGZyb20gJ21vZCc7XG5kZWNsYXJlIGNvbnN0IG1vY2s6IFRwZTtcbi8vLyAhaGlkZVxuLy8gSG9pc3RlZCBpbXBvcnRzIGVuZGVkIGJlZm9yZSAhaGlkZSBtYXJrZXIgYWJvdmVcbi8vIENvZGUgc25pcHBldCBiZWdpbnMgYWZ0ZXIgIXNob3cgbWFya2VyIGJlbG93XG4vLy8gIXNob3dcblxuY29uc3QgdmFsID0gbmV3IENscygpO1xuLy8vICFoaWRlXG4vLyBDb2RlIHNuaXBwZXQgZW5kZWQgYmVmb3JlICFoaWRlIG1hcmtlciBhYm92ZVxuYCk7XG4gIH0pO1xufSk7XG4iXX0=