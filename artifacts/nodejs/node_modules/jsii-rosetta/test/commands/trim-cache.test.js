"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const lib_1 = require("../../lib");
const extract_1 = require("../../lib/commands/extract");
const trim_cache_1 = require("../../lib/commands/trim-cache");
const testutil_1 = require("../testutil");
const DUMMY_README = `
  Here is an example of how to use ClassA:

  \`\`\`ts
  import * as ass from 'my_assembly';
  const aClass = new ass.ClassA();
  aClass.someMethod();
  \`\`\`
`;
let assembly;
beforeEach(async () => {
    // Create an assembly in a temp directory
    assembly = await testutil_1.TestJsiiModule.fromSource({
        'index.ts': `
      export class ClassA {
        public someMethod() {
        }
      }
      export class ClassB {
        public anotherMethod() {
        }
      }
      `,
        'README.md': DUMMY_README,
    }, {
        name: 'my_assembly',
        jsii: testutil_1.DUMMY_JSII_CONFIG,
    });
});
afterEach(async () => assembly.cleanup());
test('trim-cache removes unused snippets', async () => {
    const cacheFile = path.join(assembly.moduleDirectory, 'dummy.tabl.json');
    // GIVEN
    const tbl = new lib_1.LanguageTablet();
    tbl.addSnippet(bogusTranslatedSnippet());
    await tbl.save(cacheFile);
    // WHEN
    await trim_cache_1.trimCache({
        assemblyLocations: [assembly.moduleDirectory],
        cacheFile,
    });
    // THEN
    const updated = await lib_1.LanguageTablet.fromFile(cacheFile);
    expect(updated.count).toEqual(0);
});
test('trim-cache leaves used snippets', async () => {
    const defaultTablet = path.join(assembly.moduleDirectory, lib_1.DEFAULT_TABLET_NAME);
    // GIVEN
    await extract_1.extractSnippets([assembly.moduleDirectory]);
    // WHEN
    await trim_cache_1.trimCache({
        assemblyLocations: [assembly.moduleDirectory],
        cacheFile: defaultTablet,
    });
    // THEN
    const updated = await lib_1.LanguageTablet.fromFile(defaultTablet);
    expect(updated.count).toEqual(1);
});
function bogusTranslatedSnippet() {
    return lib_1.TranslatedSnippet.fromTypeScript(lib_1.typeScriptSnippetFromVisibleSource('console.log("hello");', testutil_1.testSnippetLocation('x.ts'), true), true);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpbS1jYWNoZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidHJpbS1jYWNoZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQTZCO0FBRTdCLG1DQUF1SDtBQUN2SCx3REFBNkQ7QUFDN0QsOERBQTBEO0FBQzFELDBDQUFxRjtBQUVyRixNQUFNLFlBQVksR0FBRzs7Ozs7Ozs7Q0FRcEIsQ0FBQztBQUVGLElBQUksUUFBd0IsQ0FBQztBQUM3QixVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDcEIseUNBQXlDO0lBQ3pDLFFBQVEsR0FBRyxNQUFNLHlCQUFjLENBQUMsVUFBVSxDQUN4QztRQUNFLFVBQVUsRUFBRTs7Ozs7Ozs7O09BU1g7UUFDRCxXQUFXLEVBQUUsWUFBWTtLQUMxQixFQUNEO1FBQ0UsSUFBSSxFQUFFLGFBQWE7UUFDbkIsSUFBSSxFQUFFLDRCQUFpQjtLQUN4QixDQUNGLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBRTFDLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNwRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUV6RSxRQUFRO0lBQ1IsTUFBTSxHQUFHLEdBQUcsSUFBSSxvQkFBYyxFQUFFLENBQUM7SUFDakMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQUM7SUFDekMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTFCLE9BQU87SUFDUCxNQUFNLHNCQUFTLENBQUM7UUFDZCxpQkFBaUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUM7UUFDN0MsU0FBUztLQUNWLENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxNQUFNLE9BQU8sR0FBRyxNQUFNLG9CQUFjLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ2pELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSx5QkFBbUIsQ0FBQyxDQUFDO0lBRS9FLFFBQVE7SUFDUixNQUFNLHlCQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUVsRCxPQUFPO0lBQ1AsTUFBTSxzQkFBUyxDQUFDO1FBQ2QsaUJBQWlCLEVBQUUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDO1FBQzdDLFNBQVMsRUFBRSxhQUFhO0tBQ3pCLENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxNQUFNLE9BQU8sR0FBRyxNQUFNLG9CQUFjLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzdELE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBUyxzQkFBc0I7SUFDN0IsT0FBTyx1QkFBaUIsQ0FBQyxjQUFjLENBQ3JDLHdDQUFrQyxDQUFDLHVCQUF1QixFQUFFLDhCQUFtQixDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUM5RixJQUFJLENBQ0wsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBUcmFuc2xhdGVkU25pcHBldCwgdHlwZVNjcmlwdFNuaXBwZXRGcm9tVmlzaWJsZVNvdXJjZSwgTGFuZ3VhZ2VUYWJsZXQsIERFRkFVTFRfVEFCTEVUX05BTUUgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IHsgZXh0cmFjdFNuaXBwZXRzIH0gZnJvbSAnLi4vLi4vbGliL2NvbW1hbmRzL2V4dHJhY3QnO1xuaW1wb3J0IHsgdHJpbUNhY2hlIH0gZnJvbSAnLi4vLi4vbGliL2NvbW1hbmRzL3RyaW0tY2FjaGUnO1xuaW1wb3J0IHsgVGVzdEpzaWlNb2R1bGUsIERVTU1ZX0pTSUlfQ09ORklHLCB0ZXN0U25pcHBldExvY2F0aW9uIH0gZnJvbSAnLi4vdGVzdHV0aWwnO1xuXG5jb25zdCBEVU1NWV9SRUFETUUgPSBgXG4gIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiBob3cgdG8gdXNlIENsYXNzQTpcblxuICBcXGBcXGBcXGB0c1xuICBpbXBvcnQgKiBhcyBhc3MgZnJvbSAnbXlfYXNzZW1ibHknO1xuICBjb25zdCBhQ2xhc3MgPSBuZXcgYXNzLkNsYXNzQSgpO1xuICBhQ2xhc3Muc29tZU1ldGhvZCgpO1xuICBcXGBcXGBcXGBcbmA7XG5cbmxldCBhc3NlbWJseTogVGVzdEpzaWlNb2R1bGU7XG5iZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgLy8gQ3JlYXRlIGFuIGFzc2VtYmx5IGluIGEgdGVtcCBkaXJlY3RvcnlcbiAgYXNzZW1ibHkgPSBhd2FpdCBUZXN0SnNpaU1vZHVsZS5mcm9tU291cmNlKFxuICAgIHtcbiAgICAgICdpbmRleC50cyc6IGBcbiAgICAgIGV4cG9ydCBjbGFzcyBDbGFzc0Ege1xuICAgICAgICBwdWJsaWMgc29tZU1ldGhvZCgpIHtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZXhwb3J0IGNsYXNzIENsYXNzQiB7XG4gICAgICAgIHB1YmxpYyBhbm90aGVyTWV0aG9kKCkge1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBgLFxuICAgICAgJ1JFQURNRS5tZCc6IERVTU1ZX1JFQURNRSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdteV9hc3NlbWJseScsXG4gICAgICBqc2lpOiBEVU1NWV9KU0lJX0NPTkZJRyxcbiAgICB9LFxuICApO1xufSk7XG5cbmFmdGVyRWFjaChhc3luYyAoKSA9PiBhc3NlbWJseS5jbGVhbnVwKCkpO1xuXG50ZXN0KCd0cmltLWNhY2hlIHJlbW92ZXMgdW51c2VkIHNuaXBwZXRzJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjYWNoZUZpbGUgPSBwYXRoLmpvaW4oYXNzZW1ibHkubW9kdWxlRGlyZWN0b3J5LCAnZHVtbXkudGFibC5qc29uJyk7XG5cbiAgLy8gR0lWRU5cbiAgY29uc3QgdGJsID0gbmV3IExhbmd1YWdlVGFibGV0KCk7XG4gIHRibC5hZGRTbmlwcGV0KGJvZ3VzVHJhbnNsYXRlZFNuaXBwZXQoKSk7XG4gIGF3YWl0IHRibC5zYXZlKGNhY2hlRmlsZSk7XG5cbiAgLy8gV0hFTlxuICBhd2FpdCB0cmltQ2FjaGUoe1xuICAgIGFzc2VtYmx5TG9jYXRpb25zOiBbYXNzZW1ibHkubW9kdWxlRGlyZWN0b3J5XSxcbiAgICBjYWNoZUZpbGUsXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgY29uc3QgdXBkYXRlZCA9IGF3YWl0IExhbmd1YWdlVGFibGV0LmZyb21GaWxlKGNhY2hlRmlsZSk7XG4gIGV4cGVjdCh1cGRhdGVkLmNvdW50KS50b0VxdWFsKDApO1xufSk7XG5cbnRlc3QoJ3RyaW0tY2FjaGUgbGVhdmVzIHVzZWQgc25pcHBldHMnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRUYWJsZXQgPSBwYXRoLmpvaW4oYXNzZW1ibHkubW9kdWxlRGlyZWN0b3J5LCBERUZBVUxUX1RBQkxFVF9OQU1FKTtcblxuICAvLyBHSVZFTlxuICBhd2FpdCBleHRyYWN0U25pcHBldHMoW2Fzc2VtYmx5Lm1vZHVsZURpcmVjdG9yeV0pO1xuXG4gIC8vIFdIRU5cbiAgYXdhaXQgdHJpbUNhY2hlKHtcbiAgICBhc3NlbWJseUxvY2F0aW9uczogW2Fzc2VtYmx5Lm1vZHVsZURpcmVjdG9yeV0sXG4gICAgY2FjaGVGaWxlOiBkZWZhdWx0VGFibGV0LFxuICB9KTtcblxuICAvLyBUSEVOXG4gIGNvbnN0IHVwZGF0ZWQgPSBhd2FpdCBMYW5ndWFnZVRhYmxldC5mcm9tRmlsZShkZWZhdWx0VGFibGV0KTtcbiAgZXhwZWN0KHVwZGF0ZWQuY291bnQpLnRvRXF1YWwoMSk7XG59KTtcblxuZnVuY3Rpb24gYm9ndXNUcmFuc2xhdGVkU25pcHBldCgpIHtcbiAgcmV0dXJuIFRyYW5zbGF0ZWRTbmlwcGV0LmZyb21UeXBlU2NyaXB0KFxuICAgIHR5cGVTY3JpcHRTbmlwcGV0RnJvbVZpc2libGVTb3VyY2UoJ2NvbnNvbGUubG9nKFwiaGVsbG9cIik7JywgdGVzdFNuaXBwZXRMb2NhdGlvbigneC50cycpLCB0cnVlKSxcbiAgICB0cnVlLFxuICApO1xufVxuIl19