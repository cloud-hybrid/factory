"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../../lib");
const DEBUG = false;
test('emphasis and lists', () => {
    expectOutput(`
# Hello
## Bye

This is *very* **cool**.

* Yes
* Really
`, `
<h1>Hello</h1>

<h2>Bye</h2>

This is <em>very</em> <strong>cool</strong>.

<list type="bullet">
<description>Yes</description>
<description>Really</description>
</list>
`);
});
test('special characters are escaped', () => {
    expectOutput(`
  Escape this & and this < and this >

  ` +
        '```' +
        `
  if (x < 3) {
    System.Console.WriteLn("bloep");
  }
  ` +
        '```', `
Escape this &amp; and this &lt; and this &gt;

<code><![CDATA[
if (x < 3) {
  System.Console.WriteLn("bloep");
}
]]></code>
  `);
});
test('quotes are escaped inside attributes', () => {
    expectOutput(`
  ['tis but a "scratch"](http://bla.ck/"kni"gh&t)

  ![nay merely a "flesh wound" &cet](http://bla.ck/"kni"gh&t.jpg)
  `, `
<a href="http://bla.ck/%22kni%22gh&amp;t">'tis but a "scratch"</a>

<img alt="nay merely a &quot;flesh wound&quot; &amp;cet" src="http://bla.ck/%22kni%22gh&amp;t.jpg" />
  `);
});
test('convert header properly', () => {
    expectOutput(`
  <!--BEGIN STABILITY BANNER-->

  ---

  ![Stability: Stable](https://img.shields.io/badge/stability-Stable-success.svg?style=for-the-badge)

  ---
  <!--END STABILITY BANNER-->
  `, `
<!--BEGIN STABILITY BANNER-->

<hr />

<img alt="Stability: Stable" src="https://img.shields.io/badge/stability-Stable-success.svg?style=for-the-badge" />

<hr />

  <!--END STABILITY BANNER-->
  `);
});
function expectOutput(source, expected) {
    if (DEBUG) {
        // tslint:disable-next-line:no-console
        console.log(lib_1.markDownToStructure(source));
    }
    const output = lib_1.markDownToXmlDoc(source);
    expect(output.trim()).toEqual(expected.trim());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieG1sZG9jY29tbWVudHMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInhtbGRvY2NvbW1lbnRzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBa0U7QUFFbEUsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBRXBCLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDOUIsWUFBWSxDQUNWOzs7Ozs7OztDQVFILEVBQ0c7Ozs7Ozs7Ozs7O0NBV0gsQ0FDRSxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxFQUFFO0lBQzFDLFlBQVksQ0FDVjs7O0dBR0Q7UUFDRyxLQUFLO1FBQ0w7Ozs7R0FJSDtRQUNHLEtBQUssRUFDUDs7Ozs7Ozs7R0FRRCxDQUNBLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7SUFDaEQsWUFBWSxDQUNWOzs7O0dBSUQsRUFDQzs7OztHQUlELENBQ0EsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUNuQyxZQUFZLENBQ1Y7Ozs7Ozs7OztHQVNELEVBQ0M7Ozs7Ozs7Ozs7R0FVRCxDQUNBLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILFNBQVMsWUFBWSxDQUFDLE1BQWMsRUFBRSxRQUFnQjtJQUNwRCxJQUFJLEtBQUssRUFBRTtRQUNULHNDQUFzQztRQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FDMUM7SUFFRCxNQUFNLE1BQU0sR0FBRyxzQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ2pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXJrRG93blRvU3RydWN0dXJlLCBtYXJrRG93blRvWG1sRG9jIH0gZnJvbSAnLi4vLi4vbGliJztcblxuY29uc3QgREVCVUcgPSBmYWxzZTtcblxudGVzdCgnZW1waGFzaXMgYW5kIGxpc3RzJywgKCkgPT4ge1xuICBleHBlY3RPdXRwdXQoXG4gICAgYFxuIyBIZWxsb1xuIyMgQnllXG5cblRoaXMgaXMgKnZlcnkqICoqY29vbCoqLlxuXG4qIFllc1xuKiBSZWFsbHlcbmAsXG4gICAgYFxuPGgxPkhlbGxvPC9oMT5cblxuPGgyPkJ5ZTwvaDI+XG5cblRoaXMgaXMgPGVtPnZlcnk8L2VtPiA8c3Ryb25nPmNvb2w8L3N0cm9uZz4uXG5cbjxsaXN0IHR5cGU9XCJidWxsZXRcIj5cbjxkZXNjcmlwdGlvbj5ZZXM8L2Rlc2NyaXB0aW9uPlxuPGRlc2NyaXB0aW9uPlJlYWxseTwvZGVzY3JpcHRpb24+XG48L2xpc3Q+XG5gLFxuICApO1xufSk7XG5cbnRlc3QoJ3NwZWNpYWwgY2hhcmFjdGVycyBhcmUgZXNjYXBlZCcsICgpID0+IHtcbiAgZXhwZWN0T3V0cHV0KFxuICAgIGBcbiAgRXNjYXBlIHRoaXMgJiBhbmQgdGhpcyA8IGFuZCB0aGlzID5cblxuICBgICtcbiAgICAgICdgYGAnICtcbiAgICAgIGBcbiAgaWYgKHggPCAzKSB7XG4gICAgU3lzdGVtLkNvbnNvbGUuV3JpdGVMbihcImJsb2VwXCIpO1xuICB9XG4gIGAgK1xuICAgICAgJ2BgYCcsXG4gICAgYFxuRXNjYXBlIHRoaXMgJmFtcDsgYW5kIHRoaXMgJmx0OyBhbmQgdGhpcyAmZ3Q7XG5cbjxjb2RlPjwhW0NEQVRBW1xuaWYgKHggPCAzKSB7XG4gIFN5c3RlbS5Db25zb2xlLldyaXRlTG4oXCJibG9lcFwiKTtcbn1cbl1dPjwvY29kZT5cbiAgYCxcbiAgKTtcbn0pO1xuXG50ZXN0KCdxdW90ZXMgYXJlIGVzY2FwZWQgaW5zaWRlIGF0dHJpYnV0ZXMnLCAoKSA9PiB7XG4gIGV4cGVjdE91dHB1dChcbiAgICBgXG4gIFsndGlzIGJ1dCBhIFwic2NyYXRjaFwiXShodHRwOi8vYmxhLmNrL1wia25pXCJnaCZ0KVxuXG4gICFbbmF5IG1lcmVseSBhIFwiZmxlc2ggd291bmRcIiAmY2V0XShodHRwOi8vYmxhLmNrL1wia25pXCJnaCZ0LmpwZylcbiAgYCxcbiAgICBgXG48YSBocmVmPVwiaHR0cDovL2JsYS5jay8lMjJrbmklMjJnaCZhbXA7dFwiPid0aXMgYnV0IGEgXCJzY3JhdGNoXCI8L2E+XG5cbjxpbWcgYWx0PVwibmF5IG1lcmVseSBhICZxdW90O2ZsZXNoIHdvdW5kJnF1b3Q7ICZhbXA7Y2V0XCIgc3JjPVwiaHR0cDovL2JsYS5jay8lMjJrbmklMjJnaCZhbXA7dC5qcGdcIiAvPlxuICBgLFxuICApO1xufSk7XG5cbnRlc3QoJ2NvbnZlcnQgaGVhZGVyIHByb3Blcmx5JywgKCkgPT4ge1xuICBleHBlY3RPdXRwdXQoXG4gICAgYFxuICA8IS0tQkVHSU4gU1RBQklMSVRZIEJBTk5FUi0tPlxuXG4gIC0tLVxuXG4gICFbU3RhYmlsaXR5OiBTdGFibGVdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2Uvc3RhYmlsaXR5LVN0YWJsZS1zdWNjZXNzLnN2Zz9zdHlsZT1mb3ItdGhlLWJhZGdlKVxuXG4gIC0tLVxuICA8IS0tRU5EIFNUQUJJTElUWSBCQU5ORVItLT5cbiAgYCxcbiAgICBgXG48IS0tQkVHSU4gU1RBQklMSVRZIEJBTk5FUi0tPlxuXG48aHIgLz5cblxuPGltZyBhbHQ9XCJTdGFiaWxpdHk6IFN0YWJsZVwiIHNyYz1cImh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2Uvc3RhYmlsaXR5LVN0YWJsZS1zdWNjZXNzLnN2Zz9zdHlsZT1mb3ItdGhlLWJhZGdlXCIgLz5cblxuPGhyIC8+XG5cbiAgPCEtLUVORCBTVEFCSUxJVFkgQkFOTkVSLS0+XG4gIGAsXG4gICk7XG59KTtcblxuZnVuY3Rpb24gZXhwZWN0T3V0cHV0KHNvdXJjZTogc3RyaW5nLCBleHBlY3RlZDogc3RyaW5nKSB7XG4gIGlmIChERUJVRykge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2cobWFya0Rvd25Ub1N0cnVjdHVyZShzb3VyY2UpKTtcbiAgfVxuXG4gIGNvbnN0IG91dHB1dCA9IG1hcmtEb3duVG9YbWxEb2Moc291cmNlKTtcbiAgZXhwZWN0KG91dHB1dC50cmltKCkpLnRvRXF1YWwoZXhwZWN0ZWQudHJpbSgpKTtcbn1cbiJdfQ==