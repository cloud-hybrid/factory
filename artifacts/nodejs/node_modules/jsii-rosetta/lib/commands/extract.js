"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractSnippets = exports.extractAndInfuse = void 0;
const path = require("path");
const assemblies_1 = require("../jsii/assemblies");
const logging = require("../logging");
const rosetta_translator_1 = require("../rosetta-translator");
const snippet_1 = require("../snippet");
const key_1 = require("../tablets/key");
const tablets_1 = require("../tablets/tablets");
const util_1 = require("../util");
const infuse_1 = require("./infuse");
async function extractAndInfuse(assemblyLocations, options) {
    const result = await extractSnippets(assemblyLocations, options);
    await infuse_1.infuse(assemblyLocations, {
        cacheFromFile: options.cacheFromFile,
        cacheToFile: options.cacheToFile,
    });
    return result;
}
exports.extractAndInfuse = extractAndInfuse;
/**
 * Extract all samples from the given assemblies into a tablet
 */
async function extractSnippets(assemblyLocations, options = {}) {
    var _a, _b, _c, _d;
    const only = (_a = options.only) !== null && _a !== void 0 ? _a : [];
    logging.info(`Loading ${assemblyLocations.length} assemblies`);
    const assemblies = await assemblies_1.loadAssemblies(assemblyLocations, (_b = options.validateAssemblies) !== null && _b !== void 0 ? _b : false);
    let snippets = Array.from(assemblies_1.allTypeScriptSnippets(assemblies, options.loose));
    if (only.length > 0) {
        snippets = filterSnippets(snippets, only);
    }
    // Map every assembly to a list of snippets, so that we know what implicit
    // tablet to write the translations to later on.
    const snippetsPerAssembly = util_1.groupBy(snippets.map((s) => ({ key: key_1.snippetKey(s), location: projectDirectory(s) })), (x) => x.location);
    const translatorOptions = {
        includeCompilerDiagnostics: (_c = options.includeCompilerDiagnostics) !== null && _c !== void 0 ? _c : false,
        assemblies: assemblies.map((a) => a.assembly),
    };
    const translator = options.translatorFactory
        ? options.translatorFactory(translatorOptions)
        : new rosetta_translator_1.RosettaTranslator(translatorOptions);
    // Prime the snippet cache with:
    // - Cache source file
    // - Default tablets found next to each assembly
    if (options.cacheFromFile) {
        await translator.addToCache(options.cacheFromFile);
    }
    translator.addTabletsToCache(...Object.values(await assemblies_1.loadAllDefaultTablets(assemblies)));
    if (translator.hasCache()) {
        const { translations, remaining } = translator.readFromCache(snippets, true, options.includeCompilerDiagnostics);
        logging.info(`Reused ${translations.length} translations from cache`);
        snippets = remaining;
    }
    const diagnostics = [];
    if (snippets.length > 0) {
        logging.info('Translating');
        const startTime = Date.now();
        const result = await translator.translateAll(snippets);
        const delta = (Date.now() - startTime) / 1000;
        logging.info(`Translated ${snippets.length} snippets in ${delta} seconds (${(delta / snippets.length).toPrecision(3)}s/snippet)`);
        diagnostics.push(...result.diagnostics);
    }
    else {
        logging.info('Nothing left to translate');
    }
    // Save to individual tablet files, and optionally append to the output file
    if ((_d = options.writeToImplicitTablets) !== null && _d !== void 0 ? _d : true) {
        await Promise.all(Object.entries(snippetsPerAssembly).map(async ([location, snips]) => {
            const asmTabletFile = path.join(location, tablets_1.DEFAULT_TABLET_NAME);
            logging.debug(`Writing ${snips.length} translations to ${asmTabletFile}`);
            const translations = snips.map(({ key }) => translator.tablet.tryGetSnippet(key)).filter(util_1.isDefined);
            const asmTablet = new tablets_1.LanguageTablet();
            asmTablet.addSnippets(...translations);
            await asmTablet.save(asmTabletFile);
        }));
    }
    if (options.cacheToFile) {
        logging.info(`Adding translations to ${options.cacheToFile}`);
        const output = options.trimCache
            ? new tablets_1.LanguageTablet()
            : await tablets_1.LanguageTablet.fromOptionalFile(options.cacheToFile);
        output.addTablet(translator.tablet);
        await output.save(options.cacheToFile);
    }
    return { diagnostics, tablet: translator.tablet };
}
exports.extractSnippets = extractSnippets;
/**
 * Only yield the snippets whose id exists in a whitelist
 */
function filterSnippets(ts, includeIds) {
    return ts.filter((t) => includeIds.includes(key_1.snippetKey(t)));
}
function projectDirectory(ts) {
    var _a;
    const dir = (_a = ts.parameters) === null || _a === void 0 ? void 0 : _a[snippet_1.SnippetParameters.$PROJECT_DIRECTORY];
    if (!dir) {
        throw new Error(`Snippet does not have associated project directory: ${JSON.stringify(ts.location)}`);
    }
    return dir;
}
//# sourceMappingURL=data:application/json;base64,