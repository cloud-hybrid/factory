"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transliterateAssembly = void 0;
const spec_1 = require("@jsii/spec");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const fixtures_1 = require("../fixtures");
const assemblies_1 = require("../jsii/assemblies");
const logging_1 = require("../logging");
const rosetta_reader_1 = require("../rosetta-reader");
const snippet_1 = require("../snippet");
const util_1 = require("../util");
const extract_1 = require("./extract");
/**
 * Prepares transliterated versions of the designated assemblies into the
 * selected taregt languages.
 *
 * @param assemblyLocations the directories which contain assemblies to
 *                          transliterate.
 * @param targetLanguages   the languages into which to transliterate.
 * @param tabletLocation    an optional Rosetta tablet file to source
 *                          pre-transliterated snippets from.
 *
 * @experimental
 */
async function transliterateAssembly(assemblyLocations, targetLanguages, options = {}) {
    var _a, _b;
    // Start by doing an 'extract' for all these assemblies
    //
    // This will locate all examples that haven't been translated yet and translate
    // them. Importantly: it will translate them in parallel, which is going to improve
    // performance a lot. We ignore diagnostics.
    const { tablet } = await extract_1.extractSnippets(assemblyLocations, {
        includeCompilerDiagnostics: true,
        loose: options.loose,
        cacheFromFile: options.tablet,
        writeToImplicitTablets: false,
    });
    // Now do a regular "tablet reader" cycle, expecting everything to be translated already,
    // and therefore it doesn't matter that we do this all in a single-threaded loop.
    const rosetta = new rosetta_reader_1.RosettaTabletReader({
        unknownSnippets: rosetta_reader_1.UnknownSnippetMode.FAIL,
        targetLanguages,
    });
    // Put in the same caching tablet here
    if (options.tablet) {
        await rosetta.loadTabletFromFile(options.tablet);
    }
    // Any fresh translations we just came up with
    rosetta.addTablet(tablet);
    const assemblies = await loadAssemblies(assemblyLocations, rosetta);
    for (const [location, loadAssembly] of assemblies.entries()) {
        for (const language of targetLanguages) {
            const now = new Date().getTime();
            // eslint-disable-next-line no-await-in-loop
            const result = await loadAssembly();
            if ((_a = result.readme) === null || _a === void 0 ? void 0 : _a.markdown) {
                result.readme.markdown = rosetta.translateSnippetsInMarkdown({ api: 'moduleReadme', moduleFqn: result.name }, result.readme.markdown, language, true /* strict */, (translation) => ({
                    language: translation.language,
                    source: prefixDisclaimer(translation),
                }), location);
            }
            for (const type of Object.values((_b = result.types) !== null && _b !== void 0 ? _b : {})) {
                transliterateType(type, rosetta, language, location, options.loose);
            }
            // eslint-disable-next-line no-await-in-loop
            await fs_extra_1.writeJson(path_1.resolve(location, `${spec_1.SPEC_FILE_NAME}.${language}`), result, { spaces: 2 });
            const then = new Date().getTime();
            logging_1.debug(`Done transliterating ${result.name}@${result.version} to ${language} after ${then - now} milliseconds`);
        }
    }
    rosetta.printDiagnostics(process.stderr);
    if (rosetta.hasErrors && options.strict) {
        throw new Error('Strict mode is enabled and some examples failed compilation!');
    }
}
exports.transliterateAssembly = transliterateAssembly;
/**
 * Given a set of directories containing `.jsii` assemblies, load all the
 * assemblies into the provided `Rosetta` instance and return a map of
 * directories to assembly-loading functions (the function re-loads the original
 * assembly from disk on each invocation).
 *
 * @param directories the assembly-containing directories to traverse.
 * @param rosetta     the `Rosetta` instance in which to load assemblies.
 *
 * @returns a map of directories to a function that loads the `.jsii` assembly
 *          contained therein from disk.
 */
async function loadAssemblies(directories, rosetta) {
    const result = new Map();
    for (const directory of directories) {
        const loader = () => fs_extra_1.readJson(path_1.resolve(directory, spec_1.SPEC_FILE_NAME));
        // eslint-disable-next-line no-await-in-loop
        await rosetta.addAssembly(await loader(), directory);
        result.set(directory, loader);
    }
    return result;
}
function prefixDisclaimer(translation) {
    const comment = commentToken();
    const disclaimer = translation.didCompile
        ? 'This example was automatically transliterated.'
        : 'This example was automatically transliterated with incomplete type information. It may not work as-is.';
    return [
        `${comment} ${disclaimer}`,
        `${comment} See https://github.com/aws/jsii/issues/826 for more information.`,
        '',
        translation.source,
    ].join('\n');
    function commentToken() {
        // This is future-proofed a bit, but don't read too much in this...
        switch (translation.language) {
            case 'python':
            case 'ruby':
                return '#';
            case 'csharp':
            case 'java':
            case 'go':
            default:
                return '//';
        }
    }
}
function transliterateType(type, rosetta, language, workingDirectory, loose = false) {
    var _a, _b, _c;
    transliterateDocs({ api: 'type', fqn: type.fqn }, type.docs, workingDirectory);
    switch (type.kind) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore 7029
        case spec_1.TypeKind.Class:
            if (type.initializer) {
                transliterateDocs({ api: 'initializer', fqn: type.fqn }, type.initializer.docs, workingDirectory);
            }
        // fallthrough
        case spec_1.TypeKind.Interface:
            for (const method of (_a = type.methods) !== null && _a !== void 0 ? _a : []) {
                transliterateDocs({ api: 'member', fqn: type.fqn, memberName: method.name }, method.docs, workingDirectory);
                for (const parameter of (_b = method.parameters) !== null && _b !== void 0 ? _b : []) {
                    transliterateDocs({ api: 'parameter', fqn: type.fqn, methodName: method.name, parameterName: parameter.name }, parameter.docs, workingDirectory);
                }
            }
            for (const property of (_c = type.properties) !== null && _c !== void 0 ? _c : []) {
                transliterateDocs({ api: 'member', fqn: type.fqn, memberName: property.name }, property.docs, workingDirectory);
            }
            break;
        case spec_1.TypeKind.Enum:
            for (const member of type.members) {
                transliterateDocs({ api: 'member', fqn: type.fqn, memberName: member.name }, member.docs, workingDirectory);
            }
            break;
        default:
            throw new Error(`Unsupported type kind: ${type.kind}`);
    }
    function transliterateDocs(api, docs, workingDirectory) {
        var _a, _b;
        if (docs === null || docs === void 0 ? void 0 : docs.remarks) {
            docs.remarks = rosetta.translateSnippetsInMarkdown(api, docs.remarks, language, true /* strict */, (translation) => ({
                language: translation.language,
                source: prefixDisclaimer(translation),
            }), workingDirectory);
        }
        if (docs === null || docs === void 0 ? void 0 : docs.example) {
            const location = { api, field: { field: 'example' } };
            const metadata = (_b = util_1.fmap((_a = docs.custom) === null || _a === void 0 ? void 0 : _a[assemblies_1.EXAMPLE_METADATA_JSDOCTAG], snippet_1.parseMetadataLine)) !== null && _b !== void 0 ? _b : {};
            const snippet = fixtures_1.fixturize(snippet_1.typeScriptSnippetFromVisibleSource(docs.example, location, true /* strict */, {
                [snippet_1.SnippetParameters.$PROJECT_DIRECTORY]: workingDirectory,
                ...metadata,
            }), loose);
            const translation = rosetta.translateSnippet(snippet, language);
            if (translation != null) {
                docs.example = prefixDisclaimer(translation);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,