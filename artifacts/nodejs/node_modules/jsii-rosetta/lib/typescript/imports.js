"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeImportDeclaration = exports.analyzeImportEquals = void 0;
const ts = require("typescript");
const jsii_utils_1 = require("../jsii/jsii-utils");
const util_1 = require("../util");
const ast_utils_1 = require("./ast-utils");
function analyzeImportEquals(node, context) {
    let moduleName = '???';
    ast_utils_1.matchAst(node.moduleReference, ast_utils_1.nodeOfType('ref', ts.SyntaxKind.ExternalModuleReference), (bindings) => {
        moduleName = ast_utils_1.stringFromLiteral(bindings.ref.expression);
    });
    return {
        node,
        packageName: moduleName,
        moduleSymbol: jsii_utils_1.lookupJsiiSymbolFromNode(context.typeChecker, node.name),
        imports: { import: 'full', alias: context.textOf(node.name) },
    };
}
exports.analyzeImportEquals = analyzeImportEquals;
function analyzeImportDeclaration(node, context) {
    var _a;
    const packageName = ast_utils_1.stringFromLiteral(node.moduleSpecifier);
    const starBindings = ast_utils_1.matchAst(node, ast_utils_1.nodeOfType(ts.SyntaxKind.ImportDeclaration, ast_utils_1.nodeOfType(ts.SyntaxKind.ImportClause, ast_utils_1.nodeOfType('namespace', ts.SyntaxKind.NamespaceImport))));
    if (starBindings) {
        return {
            node,
            packageName,
            moduleSymbol: jsii_utils_1.lookupJsiiSymbolFromNode(context.typeChecker, starBindings.namespace.name),
            imports: {
                import: 'full',
                alias: context.textOf(starBindings.namespace.name),
            },
        };
    }
    const namedBindings = ast_utils_1.matchAst(node, ast_utils_1.nodeOfType(ts.SyntaxKind.ImportDeclaration, ast_utils_1.nodeOfType(ts.SyntaxKind.ImportClause, ast_utils_1.nodeOfType(ts.SyntaxKind.NamedImports, ast_utils_1.allOfType(ts.SyntaxKind.ImportSpecifier, 'specifiers')))));
    const elements = [];
    if (namedBindings) {
        elements.push(...namedBindings.specifiers.map((spec) => {
            // regular import { name }, renamed import { propertyName, name }
            if (spec.propertyName) {
                // Renamed import
                return {
                    sourceName: context.textOf(spec.propertyName),
                    alias: context.textOf(spec.name),
                    importedSymbol: jsii_utils_1.lookupJsiiSymbolFromNode(context.typeChecker, spec.propertyName),
                };
            }
            return {
                sourceName: context.textOf(spec.name),
                importedSymbol: jsii_utils_1.lookupJsiiSymbolFromNode(context.typeChecker, spec.name),
            };
        }));
    }
    return {
        node,
        packageName,
        imports: { import: 'selective', elements },
        moduleSymbol: util_1.fmap((_a = elements === null || elements === void 0 ? void 0 : elements[0]) === null || _a === void 0 ? void 0 : _a.importedSymbol, jsii_utils_1.parentSymbol),
    };
}
exports.analyzeImportDeclaration = analyzeImportDeclaration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImltcG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQWlDO0FBRWpDLG1EQUF3RjtBQUV4RixrQ0FBK0I7QUFDL0IsMkNBQWlGO0FBaUNqRixTQUFnQixtQkFBbUIsQ0FBQyxJQUFnQyxFQUFFLE9BQXlCO0lBQzdGLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUN2QixvQkFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsc0JBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUU7UUFDcEcsVUFBVSxHQUFHLDZCQUFpQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUQsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPO1FBQ0wsSUFBSTtRQUNKLFdBQVcsRUFBRSxVQUFVO1FBQ3ZCLFlBQVksRUFBRSxxQ0FBd0IsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdEUsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7S0FDOUQsQ0FBQztBQUNKLENBQUM7QUFaRCxrREFZQztBQUVELFNBQWdCLHdCQUF3QixDQUFDLElBQTBCLEVBQUUsT0FBeUI7O0lBQzVGLE1BQU0sV0FBVyxHQUFHLDZCQUFpQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUU1RCxNQUFNLFlBQVksR0FBRyxvQkFBUSxDQUMzQixJQUFJLEVBQ0osc0JBQVUsQ0FDUixFQUFFLENBQUMsVUFBVSxDQUFDLGlCQUFpQixFQUMvQixzQkFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLHNCQUFVLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FDL0YsQ0FDRixDQUFDO0lBRUYsSUFBSSxZQUFZLEVBQUU7UUFDaEIsT0FBTztZQUNMLElBQUk7WUFDSixXQUFXO1lBQ1gsWUFBWSxFQUFFLHFDQUF3QixDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDeEYsT0FBTyxFQUFFO2dCQUNQLE1BQU0sRUFBRSxNQUFNO2dCQUNkLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO2FBQ25EO1NBQ0YsQ0FBQztLQUNIO0lBRUQsTUFBTSxhQUFhLEdBQUcsb0JBQVEsQ0FDNUIsSUFBSSxFQUNKLHNCQUFVLENBQ1IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFDL0Isc0JBQVUsQ0FDUixFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksRUFDMUIsc0JBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxxQkFBUyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQy9GLENBQ0YsQ0FDRixDQUFDO0lBRUYsTUFBTSxRQUFRLEdBQW9CLEVBQUUsQ0FBQztJQUNyQyxJQUFJLGFBQWEsRUFBRTtRQUNqQixRQUFRLENBQUMsSUFBSSxDQUNYLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUN2QyxpRUFBaUU7WUFDakUsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUNyQixpQkFBaUI7Z0JBQ2pCLE9BQU87b0JBQ0wsVUFBVSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztvQkFDN0MsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztvQkFDaEMsY0FBYyxFQUFFLHFDQUF3QixDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQztpQkFDaEUsQ0FBQzthQUNwQjtZQUVELE9BQU87Z0JBQ0wsVUFBVSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDckMsY0FBYyxFQUFFLHFDQUF3QixDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQzthQUN6RSxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztLQUNIO0lBRUQsT0FBTztRQUNMLElBQUk7UUFDSixXQUFXO1FBQ1gsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUU7UUFDMUMsWUFBWSxFQUFFLFdBQUksT0FBQyxRQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUcsQ0FBQywyQ0FBRyxjQUFjLEVBQUUseUJBQVksQ0FBQztLQUNoRSxDQUFDO0FBQ0osQ0FBQztBQTlERCw0REE4REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcblxuaW1wb3J0IHsgSnNpaVN5bWJvbCwgcGFyZW50U3ltYm9sLCBsb29rdXBKc2lpU3ltYm9sRnJvbU5vZGUgfSBmcm9tICcuLi9qc2lpL2pzaWktdXRpbHMnO1xuaW1wb3J0IHsgQXN0UmVuZGVyZXIgfSBmcm9tICcuLi9yZW5kZXJlcic7XG5pbXBvcnQgeyBmbWFwIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBhbGxPZlR5cGUsIG1hdGNoQXN0LCBub2RlT2ZUeXBlLCBzdHJpbmdGcm9tTGl0ZXJhbCB9IGZyb20gJy4vYXN0LXV0aWxzJztcblxuLyoqXG4gKiBPdXIgb3duIHVuaWZpY2F0aW9uIG9mIGltcG9ydCBzdGF0ZW1lbnRzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW1wb3J0U3RhdGVtZW50IHtcbiAgcmVhZG9ubHkgbm9kZTogdHMuTm9kZTtcbiAgcmVhZG9ubHkgcGFja2FnZU5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgaW1wb3J0czogRnVsbEltcG9ydCB8IFNlbGVjdGl2ZUltcG9ydDtcbiAgcmVhZG9ubHkgbW9kdWxlU3ltYm9sPzogSnNpaVN5bWJvbDtcbn1cblxuZXhwb3J0IHR5cGUgRnVsbEltcG9ydCA9IHtcbiAgcmVhZG9ubHkgaW1wb3J0OiAnZnVsbCc7XG4gIHJlYWRvbmx5IGFsaWFzOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBTZWxlY3RpdmVJbXBvcnQgPSB7XG4gIHJlYWRvbmx5IGltcG9ydDogJ3NlbGVjdGl2ZSc7XG4gIHJlYWRvbmx5IGVsZW1lbnRzOiBJbXBvcnRCaW5kaW5nW107XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEltcG9ydEJpbmRpbmcge1xuICByZWFkb25seSBzb3VyY2VOYW1lOiBzdHJpbmc7XG5cbiAgcmVhZG9ubHkgYWxpYXM/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBKU0lJIFN5bWJvbCB0aGUgaW1wb3J0IHJlZmVycyB0b1xuICAgKi9cbiAgcmVhZG9ubHkgaW1wb3J0ZWRTeW1ib2w/OiBKc2lpU3ltYm9sO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYW5hbHl6ZUltcG9ydEVxdWFscyhub2RlOiB0cy5JbXBvcnRFcXVhbHNEZWNsYXJhdGlvbiwgY29udGV4dDogQXN0UmVuZGVyZXI8YW55Pik6IEltcG9ydFN0YXRlbWVudCB7XG4gIGxldCBtb2R1bGVOYW1lID0gJz8/Pyc7XG4gIG1hdGNoQXN0KG5vZGUubW9kdWxlUmVmZXJlbmNlLCBub2RlT2ZUeXBlKCdyZWYnLCB0cy5TeW50YXhLaW5kLkV4dGVybmFsTW9kdWxlUmVmZXJlbmNlKSwgKGJpbmRpbmdzKSA9PiB7XG4gICAgbW9kdWxlTmFtZSA9IHN0cmluZ0Zyb21MaXRlcmFsKGJpbmRpbmdzLnJlZi5leHByZXNzaW9uKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBub2RlLFxuICAgIHBhY2thZ2VOYW1lOiBtb2R1bGVOYW1lLFxuICAgIG1vZHVsZVN5bWJvbDogbG9va3VwSnNpaVN5bWJvbEZyb21Ob2RlKGNvbnRleHQudHlwZUNoZWNrZXIsIG5vZGUubmFtZSksXG4gICAgaW1wb3J0czogeyBpbXBvcnQ6ICdmdWxsJywgYWxpYXM6IGNvbnRleHQudGV4dE9mKG5vZGUubmFtZSkgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFuYWx5emVJbXBvcnREZWNsYXJhdGlvbihub2RlOiB0cy5JbXBvcnREZWNsYXJhdGlvbiwgY29udGV4dDogQXN0UmVuZGVyZXI8YW55Pik6IEltcG9ydFN0YXRlbWVudCB7XG4gIGNvbnN0IHBhY2thZ2VOYW1lID0gc3RyaW5nRnJvbUxpdGVyYWwobm9kZS5tb2R1bGVTcGVjaWZpZXIpO1xuXG4gIGNvbnN0IHN0YXJCaW5kaW5ncyA9IG1hdGNoQXN0KFxuICAgIG5vZGUsXG4gICAgbm9kZU9mVHlwZShcbiAgICAgIHRzLlN5bnRheEtpbmQuSW1wb3J0RGVjbGFyYXRpb24sXG4gICAgICBub2RlT2ZUeXBlKHRzLlN5bnRheEtpbmQuSW1wb3J0Q2xhdXNlLCBub2RlT2ZUeXBlKCduYW1lc3BhY2UnLCB0cy5TeW50YXhLaW5kLk5hbWVzcGFjZUltcG9ydCkpLFxuICAgICksXG4gICk7XG5cbiAgaWYgKHN0YXJCaW5kaW5ncykge1xuICAgIHJldHVybiB7XG4gICAgICBub2RlLFxuICAgICAgcGFja2FnZU5hbWUsXG4gICAgICBtb2R1bGVTeW1ib2w6IGxvb2t1cEpzaWlTeW1ib2xGcm9tTm9kZShjb250ZXh0LnR5cGVDaGVja2VyLCBzdGFyQmluZGluZ3MubmFtZXNwYWNlLm5hbWUpLFxuICAgICAgaW1wb3J0czoge1xuICAgICAgICBpbXBvcnQ6ICdmdWxsJyxcbiAgICAgICAgYWxpYXM6IGNvbnRleHQudGV4dE9mKHN0YXJCaW5kaW5ncy5uYW1lc3BhY2UubmFtZSksXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBjb25zdCBuYW1lZEJpbmRpbmdzID0gbWF0Y2hBc3QoXG4gICAgbm9kZSxcbiAgICBub2RlT2ZUeXBlKFxuICAgICAgdHMuU3ludGF4S2luZC5JbXBvcnREZWNsYXJhdGlvbixcbiAgICAgIG5vZGVPZlR5cGUoXG4gICAgICAgIHRzLlN5bnRheEtpbmQuSW1wb3J0Q2xhdXNlLFxuICAgICAgICBub2RlT2ZUeXBlKHRzLlN5bnRheEtpbmQuTmFtZWRJbXBvcnRzLCBhbGxPZlR5cGUodHMuU3ludGF4S2luZC5JbXBvcnRTcGVjaWZpZXIsICdzcGVjaWZpZXJzJykpLFxuICAgICAgKSxcbiAgICApLFxuICApO1xuXG4gIGNvbnN0IGVsZW1lbnRzOiBJbXBvcnRCaW5kaW5nW10gPSBbXTtcbiAgaWYgKG5hbWVkQmluZGluZ3MpIHtcbiAgICBlbGVtZW50cy5wdXNoKFxuICAgICAgLi4ubmFtZWRCaW5kaW5ncy5zcGVjaWZpZXJzLm1hcCgoc3BlYykgPT4ge1xuICAgICAgICAvLyByZWd1bGFyIGltcG9ydCB7IG5hbWUgfSwgcmVuYW1lZCBpbXBvcnQgeyBwcm9wZXJ0eU5hbWUsIG5hbWUgfVxuICAgICAgICBpZiAoc3BlYy5wcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgICAvLyBSZW5hbWVkIGltcG9ydFxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzb3VyY2VOYW1lOiBjb250ZXh0LnRleHRPZihzcGVjLnByb3BlcnR5TmFtZSksXG4gICAgICAgICAgICBhbGlhczogY29udGV4dC50ZXh0T2Yoc3BlYy5uYW1lKSxcbiAgICAgICAgICAgIGltcG9ydGVkU3ltYm9sOiBsb29rdXBKc2lpU3ltYm9sRnJvbU5vZGUoY29udGV4dC50eXBlQ2hlY2tlciwgc3BlYy5wcm9wZXJ0eU5hbWUpLFxuICAgICAgICAgIH0gYXMgSW1wb3J0QmluZGluZztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlTmFtZTogY29udGV4dC50ZXh0T2Yoc3BlYy5uYW1lKSxcbiAgICAgICAgICBpbXBvcnRlZFN5bWJvbDogbG9va3VwSnNpaVN5bWJvbEZyb21Ob2RlKGNvbnRleHQudHlwZUNoZWNrZXIsIHNwZWMubmFtZSksXG4gICAgICAgIH07XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBub2RlLFxuICAgIHBhY2thZ2VOYW1lLFxuICAgIGltcG9ydHM6IHsgaW1wb3J0OiAnc2VsZWN0aXZlJywgZWxlbWVudHMgfSxcbiAgICBtb2R1bGVTeW1ib2w6IGZtYXAoZWxlbWVudHM/LlswXT8uaW1wb3J0ZWRTeW1ib2wsIHBhcmVudFN5bWJvbCksXG4gIH07XG59XG4iXX0=