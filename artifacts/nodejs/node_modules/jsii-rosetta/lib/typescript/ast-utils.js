"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findEnclosingClassDeclaration = exports.privatePropertyNames = exports.findSuperCall = exports.isReadOnly = exports.visibility = exports.quoteStringLiteral = exports.extractVoidExpression = exports.voidExpressionString = exports.extractShowingVoidExpression = exports.extractMaskingVoidExpression = exports.scanText = exports.commentRangeFromTextRange = exports.extractComments = exports.repeatNewlines = exports.countNakedNewlines = exports.matchAst = exports.DONE = exports.allOfType = exports.anyNode = exports.nodeOfType = exports.nodeChildren = exports.stringFromLiteral = exports.stripCommentMarkers = void 0;
const ts = require("typescript");
function stripCommentMarkers(comment, multiline) {
    if (multiline) {
        // The text *must* start with '/*' and end with '*/'.
        // Strip leading '*' from every remaining line (first line because of '**',
        // other lines because of continuations.
        return comment
            .substring(2, comment.length - 2)
            .replace(/^[ \t]+/g, '') // Strip all leading whitepace
            .replace(/[ \t]+$/g, '') // Strip all trailing whitepace
            .replace(/^[ \t]*\*[ \t]?/gm, ''); // Strip "* " from start of line
    }
    // The text *must* start with '//'
    return comment.replace(/^[/]{2}[ \t]?/gm, '');
}
exports.stripCommentMarkers = stripCommentMarkers;
function stringFromLiteral(expr) {
    if (ts.isStringLiteral(expr)) {
        return expr.text;
    }
    return '???';
}
exports.stringFromLiteral = stringFromLiteral;
/**
 * Return AST children of the given node
 *
 * Difference with node.getChildren():
 *
 * - node.getChildren() must take a SourceFile (will fail if it doesn't get it)
 *   and returns a mix of abstract and concrete syntax nodes.
 * - This function function will ONLY return abstract syntax nodes.
 */
function nodeChildren(node) {
    const ret = new Array();
    node.forEachChild((n) => {
        ret.push(n);
    });
    return ret;
}
exports.nodeChildren = nodeChildren;
// eslint-disable-next-line max-len
function nodeOfType(syntaxKindOrCaptureName, nodeTypeOrChildren, children) {
    var _a;
    const capturing = typeof syntaxKindOrCaptureName === 'string'; // Determine which overload we're in (SyntaxKind is a number)
    const realNext = (_a = (capturing ? children : nodeTypeOrChildren)) !== null && _a !== void 0 ? _a : exports.DONE;
    const realCapture = capturing ? syntaxKindOrCaptureName : undefined;
    const realSyntaxKind = capturing ? nodeTypeOrChildren : syntaxKindOrCaptureName;
    return (nodes) => {
        for (const node of nodes !== null && nodes !== void 0 ? nodes : []) {
            if (node.kind === realSyntaxKind) {
                const ret = realNext(nodeChildren(node));
                if (!ret) {
                    continue;
                }
                if (realCapture) {
                    return Object.assign(ret, {
                        [realCapture]: node,
                    });
                }
                return ret;
            }
        }
        return undefined;
    };
}
exports.nodeOfType = nodeOfType;
function anyNode(children) {
    const realNext = children !== null && children !== void 0 ? children : exports.DONE;
    return (nodes) => {
        for (const node of nodes !== null && nodes !== void 0 ? nodes : []) {
            const m = realNext(nodeChildren(node));
            if (m) {
                return m;
            }
        }
        return undefined;
    };
}
exports.anyNode = anyNode;
// Does not capture deeper because how would we even represent that?
function allOfType(s, name, children) {
    const realNext = children !== null && children !== void 0 ? children : exports.DONE;
    return (nodes) => {
        let ret;
        for (const node of nodes !== null && nodes !== void 0 ? nodes : []) {
            if (node.kind === s) {
                if (realNext(nodeChildren(node))) {
                    if (!ret) {
                        ret = { [name]: new Array() };
                    }
                    ret[name].push(node);
                }
            }
        }
        return ret;
    };
}
exports.allOfType = allOfType;
exports.DONE = () => ({});
function matchAst(node, matcher, cb) {
    const matched = matcher([node]);
    if (cb) {
        if (matched) {
            cb(matched);
        }
        return !!matched;
    }
    return matched;
}
exports.matchAst = matchAst;
/**
 * Count the newlines in a given piece of string that aren't in comment blocks
 */
function countNakedNewlines(str) {
    let ret = 0;
    scanText(str, 0, str.length)
        .filter((s) => s.type === 'other' || s.type === 'blockcomment')
        .forEach((s) => {
        if (s.type === 'other') {
            // Count newlines in non-comments
            for (let i = s.pos; i < s.end; i++) {
                if (str[i] === '\n') {
                    ret++;
                }
            }
        }
        else {
            // Discount newlines at the end of block comments
            if (s.hasTrailingNewLine) {
                ret--;
            }
        }
    });
    return ret;
}
exports.countNakedNewlines = countNakedNewlines;
function repeatNewlines(str) {
    return '\n'.repeat(Math.min(2, countNakedNewlines(str)));
}
exports.repeatNewlines = repeatNewlines;
const WHITESPACE = [' ', '\t', '\r', '\n'];
/**
 * Extract single-line and multi-line comments from the given string
 *
 * Rewritten because I can't get ts.getLeadingComments and ts.getTrailingComments to do what I want.
 */
function extractComments(text, start) {
    return scanText(text, start)
        .filter((s) => s.type === 'blockcomment' || s.type === 'linecomment')
        .map(commentRangeFromTextRange);
}
exports.extractComments = extractComments;
function commentRangeFromTextRange(rng) {
    return {
        kind: rng.type === 'blockcomment' ? ts.SyntaxKind.MultiLineCommentTrivia : ts.SyntaxKind.SingleLineCommentTrivia,
        pos: rng.pos,
        end: rng.end,
        hasTrailingNewLine: rng.type !== 'blockcomment' && rng.hasTrailingNewLine,
    };
}
exports.commentRangeFromTextRange = commentRangeFromTextRange;
/**
 * Extract spans of comments and non-comments out of the string
 *
 * Stop at 'end' when given, or the first non-whitespace character in a
 * non-comment if not given.
 */
function scanText(text, start, end) {
    const ret = [];
    let pos = start;
    const stopAtCode = end === undefined;
    if (end === undefined) {
        end = text.length;
    }
    while (pos < end) {
        const ch = text[pos];
        if (WHITESPACE.includes(ch)) {
            pos++;
            continue;
        }
        if (ch === '/' && text[pos + 1] === '/') {
            accumulateTextBlock();
            scanSinglelineComment();
            continue;
        }
        if (ch === '/' && text[pos + 1] === '*') {
            accumulateTextBlock();
            scanMultilineComment();
            continue;
        }
        // Non-whitespace, non-comment, must be regular token. End if we're not scanning
        // to a particular location, otherwise continue.
        if (stopAtCode) {
            break;
        }
        pos++;
    }
    accumulateTextBlock();
    return ret;
    function scanMultilineComment() {
        const endOfComment = findNext('*/', pos + 2);
        ret.push({
            type: 'blockcomment',
            hasTrailingNewLine: ['\n', '\r'].includes(text[endOfComment + 2]),
            pos,
            end: endOfComment + 2,
        });
        pos = endOfComment + 2;
        start = pos;
    }
    function scanSinglelineComment() {
        const nl = Math.min(findNext('\r', pos + 2), findNext('\n', pos + 2));
        if (text[pos + 2] === '/') {
            // Special /// comment
            ret.push({
                type: 'directive',
                hasTrailingNewLine: true,
                pos: pos + 1,
                end: nl,
            });
        }
        else {
            // Regular // comment
            ret.push({
                type: 'linecomment',
                hasTrailingNewLine: true,
                pos,
                end: nl,
            });
        }
        pos = nl + 1;
        start = pos;
    }
    function accumulateTextBlock() {
        if (pos - start > 0) {
            ret.push({
                type: 'other',
                hasTrailingNewLine: false,
                pos: start,
                end: pos,
            });
            start = pos;
        }
    }
    function findNext(sub, startPos) {
        const f = text.indexOf(sub, startPos);
        if (f === -1) {
            return text.length;
        }
        return f;
    }
}
exports.scanText = scanText;
const VOID_SHOW_KEYWORD = 'show';
function extractMaskingVoidExpression(node) {
    const expr = extractVoidExpression(node);
    if (!expr) {
        return undefined;
    }
    if (ts.isStringLiteral(expr.expression) && expr.expression.text === VOID_SHOW_KEYWORD) {
        return undefined;
    }
    return expr;
}
exports.extractMaskingVoidExpression = extractMaskingVoidExpression;
function extractShowingVoidExpression(node) {
    const expr = extractVoidExpression(node);
    if (!expr) {
        return undefined;
    }
    if (ts.isStringLiteral(expr.expression) && expr.expression.text === VOID_SHOW_KEYWORD) {
        return expr;
    }
    return undefined;
}
exports.extractShowingVoidExpression = extractShowingVoidExpression;
/**
 * Return the string argument to a void expression if it exists
 */
function voidExpressionString(node) {
    if (ts.isStringLiteral(node.expression)) {
        return node.expression.text;
    }
    return undefined;
}
exports.voidExpressionString = voidExpressionString;
/**
 * We use void directives as pragmas. Extract the void directives here
 */
function extractVoidExpression(node) {
    if (ts.isVoidExpression(node)) {
        return node;
    }
    if (ts.isExpressionStatement(node)) {
        return extractVoidExpression(node.expression);
    }
    if (ts.isParenthesizedExpression(node)) {
        return extractVoidExpression(node.expression);
    }
    if (ts.isBinaryExpression(node) && node.operatorToken.kind === ts.SyntaxKind.CommaToken) {
        return extractVoidExpression(node.left);
    }
    return undefined;
}
exports.extractVoidExpression = extractVoidExpression;
function quoteStringLiteral(x) {
    return x.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
}
exports.quoteStringLiteral = quoteStringLiteral;
function visibility(x) {
    const flags = ts.getCombinedModifierFlags(x);
    if (flags & ts.ModifierFlags.Private) {
        return 'private';
    }
    if (flags & ts.ModifierFlags.Protected) {
        return 'protected';
    }
    return 'public';
}
exports.visibility = visibility;
function isReadOnly(x) {
    const flags = ts.getCombinedModifierFlags(x);
    return (flags & ts.ModifierFlags.Readonly) !== 0;
}
exports.isReadOnly = isReadOnly;
/**
 * Return the super() call from a method body if found
 */
function findSuperCall(node, renderer) {
    if (node === undefined) {
        return undefined;
    }
    if (ts.isCallExpression(node)) {
        if (renderer.textOf(node.expression) === 'super') {
            return node;
        }
    }
    if (ts.isExpressionStatement(node)) {
        return findSuperCall(node.expression, renderer);
    }
    if (ts.isBlock(node)) {
        for (const statement of node.statements) {
            if (ts.isExpressionStatement(statement)) {
                const s = findSuperCall(statement.expression, renderer);
                if (s) {
                    return s;
                }
            }
        }
    }
    return undefined;
}
exports.findSuperCall = findSuperCall;
/**
 * Return the names of all private property declarations
 */
function privatePropertyNames(members, renderer) {
    const props = members.filter((m) => ts.isPropertyDeclaration(m));
    return props.filter((m) => visibility(m) === 'private').map((m) => renderer.textOf(m.name));
}
exports.privatePropertyNames = privatePropertyNames;
function findEnclosingClassDeclaration(node) {
    while (node && !ts.isClassDeclaration(node)) {
        node = node.parent;
    }
    return node;
}
exports.findEnclosingClassDeclaration = findEnclosingClassDeclaration;
//# sourceMappingURL=data:application/json;base64,