"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.namespaceName = exports.simpleName = exports.parentSymbol = exports.resolvedSymbolAtLocation = exports.resolveEnumLiteral = exports.lookupJsiiSymbol = exports.lookupJsiiSymbolFromNode = exports.structPropertyAcceptsUndefined = exports.propertiesOfStruct = exports.hasAnyFlag = exports.hasAllFlags = exports.analyzeStructType = exports.isNamedLikeStruct = void 0;
const jsii_1 = require("jsii");
const ts = require("typescript");
const types_1 = require("../typescript/types");
const util_1 = require("../util");
const assemblies_1 = require("./assemblies");
function isNamedLikeStruct(name) {
    // Start with an I and another uppercase character
    return !/^I[A-Z]/.test(name);
}
exports.isNamedLikeStruct = isNamedLikeStruct;
function analyzeStructType(typeChecker, type) {
    if (!type.isClassOrInterface() ||
        !hasAllFlags(type.objectFlags, ts.ObjectFlags.Interface) ||
        !isNamedLikeStruct(type.symbol.name)) {
        return false;
    }
    const jsiiSym = lookupJsiiSymbol(typeChecker, type.symbol);
    if (jsiiSym) {
        return { kind: 'struct', type, jsiiSym };
    }
    return { kind: 'local-struct', type };
}
exports.analyzeStructType = analyzeStructType;
function hasAllFlags(flags, test) {
    // tslint:disable-next-line:no-bitwise
    return test !== 0 && (flags & test) === test;
}
exports.hasAllFlags = hasAllFlags;
function hasAnyFlag(flags, test) {
    // tslint:disable-next-line:no-bitwise
    return test !== 0 && (flags & test) !== 0;
}
exports.hasAnyFlag = hasAnyFlag;
function propertiesOfStruct(type, context) {
    return type.isClassOrInterface()
        ? type.getProperties().map((s) => {
            let propType;
            let questionMark = false;
            const propSymbol = type.getProperty(s.name);
            const symbolDecl = propSymbol.valueDeclaration;
            if (ts.isPropertyDeclaration(symbolDecl) || ts.isPropertySignature(symbolDecl)) {
                questionMark = symbolDecl.questionToken !== undefined;
                propType = symbolDecl.type && context.typeOfType(symbolDecl.type);
            }
            return {
                name: s.name,
                type: propType,
                questionMark,
            };
        })
        : [];
}
exports.propertiesOfStruct = propertiesOfStruct;
function structPropertyAcceptsUndefined(prop) {
    return prop.questionMark || (!!prop.type && types_1.typeContainsUndefined(prop.type));
}
exports.structPropertyAcceptsUndefined = structPropertyAcceptsUndefined;
function lookupJsiiSymbolFromNode(typeChecker, node) {
    return util_1.fmap(typeChecker.getSymbolAtLocation(node), (s) => lookupJsiiSymbol(typeChecker, s));
}
exports.lookupJsiiSymbolFromNode = lookupJsiiSymbolFromNode;
/**
 * Returns the jsii FQN for a TypeScript (class or type) symbol
 *
 * TypeScript only knows the symbol NAME plus the FILE the symbol is defined
 * in. We need to extract two things:
 *
 * 1. The package name (extracted from the nearest `package.json`)
 * 2. The submodule name (...?? don't know how to get this yet)
 * 3. Any containing type names or namespace names.
 *
 * For tests, we also treat symbols in a file that has the string '/// fake-from-jsii'
 * as coming from jsii.
 */
function lookupJsiiSymbol(typeChecker, sym) {
    var _a;
    // Resolve alias, if it is one. This comes into play if the symbol refers to a module,
    // we need to resolve the alias to find the ACTUAL module.
    if (hasAnyFlag(sym.flags, ts.SymbolFlags.Alias)) {
        sym = typeChecker.getAliasedSymbol(sym);
    }
    const decl = (_a = sym.declarations) === null || _a === void 0 ? void 0 : _a[0];
    if (!decl) {
        return undefined;
    }
    if (ts.isSourceFile(decl)) {
        // This is a module.
        const sourceAssembly = assemblies_1.findTypeLookupAssembly(decl.fileName);
        return util_1.fmap(sourceAssembly, (asm) => {
            var _a;
            return ({
                fqn: (_a = util_1.fmap(jsii_1.symbolIdentifier(typeChecker, sym, util_1.fmap(sourceAssembly, (sa) => ({ assembly: sa.assembly }))), (symbolId) => sourceAssembly === null || sourceAssembly === void 0 ? void 0 : sourceAssembly.symbolIdMap[symbolId])) !== null && _a !== void 0 ? _a : sourceAssembly === null || sourceAssembly === void 0 ? void 0 : sourceAssembly.assembly.name,
                sourceAssembly: asm,
                symbolType: 'module',
            });
        });
    }
    if (!isDeclaration(decl)) {
        return undefined;
    }
    const declaringFile = decl.getSourceFile();
    if (/^\/\/\/ fake-from-jsii/m.test(declaringFile.getFullText())) {
        return { fqn: `fake_jsii.${sym.name}`, symbolType: 'type' };
    }
    const declSym = getSymbolFromDeclaration(decl, typeChecker);
    if (!declSym) {
        return undefined;
    }
    const fileName = decl.getSourceFile().fileName;
    const sourceAssembly = assemblies_1.findTypeLookupAssembly(fileName);
    const symbolId = jsii_1.symbolIdentifier(typeChecker, declSym, { assembly: sourceAssembly === null || sourceAssembly === void 0 ? void 0 : sourceAssembly.assembly });
    if (!symbolId) {
        return undefined;
    }
    return util_1.fmap(/([^#]*)(#.*)?/.exec(symbolId), ([, typeSymbolId, memberFragment]) => {
        if (memberFragment) {
            return util_1.fmap(sourceAssembly === null || sourceAssembly === void 0 ? void 0 : sourceAssembly.symbolIdMap[typeSymbolId], (fqn) => ({
                fqn: `${fqn}${memberFragment}`,
                sourceAssembly,
                symbolType: 'member',
            }));
        }
        return util_1.fmap(sourceAssembly === null || sourceAssembly === void 0 ? void 0 : sourceAssembly.symbolIdMap[typeSymbolId], (fqn) => ({ fqn, sourceAssembly, symbolType: 'type' }));
    });
}
exports.lookupJsiiSymbol = lookupJsiiSymbol;
function isDeclaration(x) {
    return (ts.isClassDeclaration(x) ||
        ts.isNamespaceExportDeclaration(x) ||
        ts.isNamespaceExport(x) ||
        ts.isModuleDeclaration(x) ||
        ts.isEnumDeclaration(x) ||
        ts.isEnumMember(x) ||
        ts.isInterfaceDeclaration(x) ||
        ts.isMethodDeclaration(x) ||
        ts.isMethodSignature(x) ||
        ts.isPropertyDeclaration(x) ||
        ts.isPropertySignature(x));
}
/**
 * If the given type is an enum literal, resolve to the enum type
 */
function resolveEnumLiteral(typeChecker, type) {
    if (!hasAnyFlag(type.flags, ts.TypeFlags.EnumLiteral)) {
        return type;
    }
    return typeChecker.getBaseTypeOfLiteralType(type);
}
exports.resolveEnumLiteral = resolveEnumLiteral;
function resolvedSymbolAtLocation(typeChecker, node) {
    let symbol = typeChecker.getSymbolAtLocation(node);
    while (symbol && hasAnyFlag(symbol.flags, ts.SymbolFlags.Alias)) {
        symbol = typeChecker.getAliasedSymbol(symbol);
    }
    return symbol;
}
exports.resolvedSymbolAtLocation = resolvedSymbolAtLocation;
function getSymbolFromDeclaration(decl, typeChecker) {
    if (!isDeclaration(decl)) {
        return undefined;
    }
    const name = ts.getNameOfDeclaration(decl);
    return name ? typeChecker.getSymbolAtLocation(name) : undefined;
}
function parentSymbol(sym) {
    const parts = sym.fqn.split('.');
    if (parts.length === 1) {
        return undefined;
    }
    return {
        fqn: parts.slice(0, -1).join('.'),
        symbolType: 'module',
        sourceAssembly: sym.sourceAssembly,
    };
}
exports.parentSymbol = parentSymbol;
/**
 * Get the last part of a dot-separated string
 */
function simpleName(x) {
    return x.split('.').slice(-1)[0];
}
exports.simpleName = simpleName;
/**
 * Get all parts except the last of a dot-separated string
 */
function namespaceName(x) {
    return x.split('.').slice(0, -1).join('.');
}
exports.namespaceName = namespaceName;
//# sourceMappingURL=data:application/json;base64,