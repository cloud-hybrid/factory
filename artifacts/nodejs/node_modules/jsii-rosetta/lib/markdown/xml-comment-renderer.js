"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CSharpXmlCommentRenderer = void 0;
const escapes_1 = require("./escapes");
const markdown_1 = require("./markdown");
const markdown_renderer_1 = require("./markdown-renderer");
const ESCAPE = escapes_1.makeXmlEscaper();
// The types for 'xmldom' are not complete.
/* eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-require-imports */
const { DOMParser, XMLSerializer } = require('@xmldom/xmldom');
/**
 * A renderer that will render a CommonMark tree to .NET XML comments
 *
 * Mostly concerns itself with code annotations and escaping; tags that the
 * XML formatter doesn't have equivalents for will be rendered back to MarkDown.
 */
class CSharpXmlCommentRenderer extends markdown_renderer_1.MarkdownRenderer {
    block_quote(_node, context) {
        return markdown_renderer_1.para(markdown_1.prefixLines('    ', markdown_renderer_1.stripPara(context.content())));
    }
    code(node, _context) {
        return `<c>${ESCAPE.text(node.literal)}</c>`;
    }
    code_block(node, _context) {
        return markdown_renderer_1.para(`<code><![CDATA[\n${node.literal}]]></code>`);
    }
    text(node, _context) {
        var _a;
        return (_a = ESCAPE.text(node.literal)) !== null && _a !== void 0 ? _a : '';
    }
    link(node, context) {
        var _a;
        return `<a href="${(_a = ESCAPE.attribute(node.destination)) !== null && _a !== void 0 ? _a : ''}">${context.content()}</a>`;
    }
    image(node, context) {
        var _a;
        return `<img alt="${ESCAPE.text2attr(context.content())}" src="${(_a = ESCAPE.attribute(node.destination)) !== null && _a !== void 0 ? _a : ''}" />`;
    }
    emph(_node, context) {
        return `<em>${context.content()}</em>`;
    }
    strong(_node, context) {
        return `<strong>${context.content()}</strong>`;
    }
    heading(node, context) {
        return markdown_renderer_1.para(`<h${node.level}>${context.content()}</h${node.level}>`);
    }
    list(node, context) {
        const listType = node.listType === 'bullet' ? 'bullet' : 'number';
        return markdown_renderer_1.para(`<list type="${listType}">\n${context.content()}</list>`);
    }
    item(_node, context) {
        return `<description>${markdown_renderer_1.stripPara(context.content())}</description>\n`;
    }
    thematic_break(_node, _context) {
        return markdown_renderer_1.para('<hr />');
    }
    /**
     * HTML needs to be converted to XML
     *
     * If we don't do this, the parser will reject the whole XML block once it seens an unclosed
     * <img> tag.
     */
    html_inline(node, _context) {
        var _a;
        const html = (_a = node.literal) !== null && _a !== void 0 ? _a : '';
        try {
            const doc = new DOMParser().parseFromString(html, 'text/html');
            return new XMLSerializer().serializeToString(doc);
        }
        catch {
            // Could not parse - we'll escape unsafe XML entities here...
            return html.replace(/[<>&]/g, (char) => {
                switch (char) {
                    case '&':
                        return '&amp;';
                    case '<':
                        return '&lt;';
                    case '>':
                        return '&gt;';
                    default:
                        return char;
                }
            });
        }
    }
    /**
     * HTML needs to be converted to XML
     *
     * If we don't do this, the parser will reject the whole XML block once it seens an unclosed
     * <img> tag.
     */
    html_block(node, context) {
        return this.html_inline(node, context);
    }
}
exports.CSharpXmlCommentRenderer = CSharpXmlCommentRenderer;
//# sourceMappingURL=data:application/json;base64,