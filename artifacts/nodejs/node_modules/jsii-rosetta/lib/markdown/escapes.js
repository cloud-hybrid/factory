"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeJavaEscaper = exports.makeXmlEscaper = void 0;
/**
 * Make a generic XML escaper
 */
function makeXmlEscaper() {
    const attr = [...TEXT, ...ATTR_ADDL];
    return {
        text: (x) => escapeText(TEXT, x),
        attribute: (x) => escapeText(attr, x),
        text2attr: (x) => escapeText(ATTR_ADDL, x),
    };
}
exports.makeXmlEscaper = makeXmlEscaper;
/**
 * Make a Java specific escaper
 *
 * This one also escapes '@' because that triggers parsing of comment directives
 * in Java.
 */
function makeJavaEscaper() {
    const javaText = [...TEXT, [new RegExp('@', 'g'), '&#64;']];
    const javaAttr = [...javaText, ...ATTR_ADDL];
    return {
        text: (x) => escapeText(javaText, x),
        attribute: (x) => escapeText(javaAttr, x),
        text2attr: (x) => escapeText(ATTR_ADDL, x),
    };
}
exports.makeJavaEscaper = makeJavaEscaper;
const TEXT = [
    [new RegExp('&', 'g'), '&amp;'],
    [new RegExp('<', 'g'), '&lt;'],
    [new RegExp('>', 'g'), '&gt;'],
];
// Additional escapes (in addition to the text escapes) which need to be escaped inside attributes.
const ATTR_ADDL = [
    [new RegExp('"', 'g'), '&quot;'],
    [new RegExp("'", 'g'), '&apos;'],
];
function escapeText(set, what) {
    if (!what) {
        return '';
    }
    for (const [re, repl] of set) {
        what = what.replace(re, repl);
    }
    return what;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXNjYXBlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVzY2FwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBb0JBOztHQUVHO0FBQ0gsU0FBZ0IsY0FBYztJQUM1QixNQUFNLElBQUksR0FBWSxDQUFDLEdBQUcsSUFBSSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUM7SUFFOUMsT0FBTztRQUNMLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDaEMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNyQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0tBQzNDLENBQUM7QUFDSixDQUFDO0FBUkQsd0NBUUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLGVBQWU7SUFDN0IsTUFBTSxRQUFRLEdBQVksQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0sUUFBUSxHQUFZLENBQUMsR0FBRyxRQUFRLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQztJQUV0RCxPQUFPO1FBQ0wsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNwQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7S0FDM0MsQ0FBQztBQUNKLENBQUM7QUFURCwwQ0FTQztBQUlELE1BQU0sSUFBSSxHQUFZO0lBQ3BCLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQztJQUMvQixDQUFDLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUM7SUFDOUIsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDO0NBQy9CLENBQUM7QUFFRixtR0FBbUc7QUFDbkcsTUFBTSxTQUFTLEdBQVk7SUFDekIsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDO0lBQ2hDLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLFFBQVEsQ0FBQztDQUNqQyxDQUFDO0FBRUYsU0FBUyxVQUFVLENBQUMsR0FBWSxFQUFFLElBQW1CO0lBQ25ELElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDVCxPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsS0FBSyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRTtRQUM1QixJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDL0I7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIEVzY2FwZXIge1xuICAvKipcbiAgICogRXNjYXBlIGZvciB1c2UgaW4gWE1ML0hUTUwgdGV4dFxuICAgKi9cbiAgdGV4dCh4OiBzdHJpbmcgfCBudWxsKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBFc2NhcGUgZm9yIHVzZSBpbiBYTUwvSFRNTCBhdHRyaWJ1dGVzXG4gICAqL1xuICBhdHRyaWJ1dGUoeDogc3RyaW5nIHwgbnVsbCk6IHN0cmluZztcblxuICAvKipcbiAgICogUmUtZXNjYXBlIGEgc3RyaW5nIHRoYXQgaGFzIGJlZW4gZXNjYXBlZCBmb3IgdGV4dCB0byBiZSBlc2NhcGVkIGZvciBhdHRyaWJ1dGVzXG4gICAqXG4gICAqIENvbmNlcHR1YWxseSB0aGlzIHVuZXNjYXBlcyB0ZXh0IGJhY2sgdG8gcmF3IGFuZCByZS1lc2NhcGVzIGZvciBhdHRyaWJ1dGVzLFxuICAgKiBidXQgZm9yIHNwZWVkIGluIHByYWN0aWNlIHdlIGp1c3QgZG8gdGhlIGFkZGl0aW9uYWwgZXNjYXBlcy5cbiAgICovXG4gIHRleHQyYXR0cih4OiBzdHJpbmcgfCBudWxsKTogc3RyaW5nO1xufVxuXG4vKipcbiAqIE1ha2UgYSBnZW5lcmljIFhNTCBlc2NhcGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlWG1sRXNjYXBlcigpOiBFc2NhcGVyIHtcbiAgY29uc3QgYXR0cjogRXNjYXBlcyA9IFsuLi5URVhULCAuLi5BVFRSX0FERExdO1xuXG4gIHJldHVybiB7XG4gICAgdGV4dDogKHgpID0+IGVzY2FwZVRleHQoVEVYVCwgeCksXG4gICAgYXR0cmlidXRlOiAoeCkgPT4gZXNjYXBlVGV4dChhdHRyLCB4KSxcbiAgICB0ZXh0MmF0dHI6ICh4KSA9PiBlc2NhcGVUZXh0KEFUVFJfQURETCwgeCksXG4gIH07XG59XG5cbi8qKlxuICogTWFrZSBhIEphdmEgc3BlY2lmaWMgZXNjYXBlclxuICpcbiAqIFRoaXMgb25lIGFsc28gZXNjYXBlcyAnQCcgYmVjYXVzZSB0aGF0IHRyaWdnZXJzIHBhcnNpbmcgb2YgY29tbWVudCBkaXJlY3RpdmVzXG4gKiBpbiBKYXZhLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZUphdmFFc2NhcGVyKCk6IEVzY2FwZXIge1xuICBjb25zdCBqYXZhVGV4dDogRXNjYXBlcyA9IFsuLi5URVhULCBbbmV3IFJlZ0V4cCgnQCcsICdnJyksICcmIzY0OyddXTtcbiAgY29uc3QgamF2YUF0dHI6IEVzY2FwZXMgPSBbLi4uamF2YVRleHQsIC4uLkFUVFJfQURETF07XG5cbiAgcmV0dXJuIHtcbiAgICB0ZXh0OiAoeCkgPT4gZXNjYXBlVGV4dChqYXZhVGV4dCwgeCksXG4gICAgYXR0cmlidXRlOiAoeCkgPT4gZXNjYXBlVGV4dChqYXZhQXR0ciwgeCksXG4gICAgdGV4dDJhdHRyOiAoeCkgPT4gZXNjYXBlVGV4dChBVFRSX0FEREwsIHgpLFxuICB9O1xufVxuXG50eXBlIEVzY2FwZXMgPSBBcnJheTxbUmVnRXhwLCBzdHJpbmddPjtcblxuY29uc3QgVEVYVDogRXNjYXBlcyA9IFtcbiAgW25ldyBSZWdFeHAoJyYnLCAnZycpLCAnJmFtcDsnXSxcbiAgW25ldyBSZWdFeHAoJzwnLCAnZycpLCAnJmx0OyddLFxuICBbbmV3IFJlZ0V4cCgnPicsICdnJyksICcmZ3Q7J10sXG5dO1xuXG4vLyBBZGRpdGlvbmFsIGVzY2FwZXMgKGluIGFkZGl0aW9uIHRvIHRoZSB0ZXh0IGVzY2FwZXMpIHdoaWNoIG5lZWQgdG8gYmUgZXNjYXBlZCBpbnNpZGUgYXR0cmlidXRlcy5cbmNvbnN0IEFUVFJfQURETDogRXNjYXBlcyA9IFtcbiAgW25ldyBSZWdFeHAoJ1wiJywgJ2cnKSwgJyZxdW90OyddLFxuICBbbmV3IFJlZ0V4cChcIidcIiwgJ2cnKSwgJyZhcG9zOyddLFxuXTtcblxuZnVuY3Rpb24gZXNjYXBlVGV4dChzZXQ6IEVzY2FwZXMsIHdoYXQ6IHN0cmluZyB8IG51bGwpOiBzdHJpbmcge1xuICBpZiAoIXdoYXQpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBmb3IgKGNvbnN0IFtyZSwgcmVwbF0gb2Ygc2V0KSB7XG4gICAgd2hhdCA9IHdoYXQucmVwbGFjZShyZSwgcmVwbCk7XG4gIH1cblxuICByZXR1cm4gd2hhdDtcbn1cbiJdfQ==