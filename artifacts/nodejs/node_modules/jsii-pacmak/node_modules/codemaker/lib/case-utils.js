"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toSnakeCase = exports.toPascalCase = exports.toCamelCase = void 0;
const camelcase = require("camelcase");
// eslint-disable-next-line @typescript-eslint/no-require-imports
const decamelize = require("decamelize");
const COMMON_ABBREVIATIONS = ['KiB', 'MiB', 'GiB'];
function toCamelCase(...args) {
    return camelcase(args);
}
exports.toCamelCase = toCamelCase;
function toPascalCase(...args) {
    return camelcase(args, { pascalCase: true });
}
exports.toPascalCase = toPascalCase;
const ABBREV_RE = new RegExp(`(^|[^A-Z])(${COMMON_ABBREVIATIONS.map(regexQuote).join('|')})($|[^a-z])`, 'g');
function toSnakeCase(s, separator = '_') {
    // Save common abbrevations
    s = s.replace(ABBREV_RE, (_, before, abbr, after) => before + ucfirst(abbr.toLowerCase()) + after);
    return decamelize(s, { separator });
    function ucfirst(str) {
        return str.substr(0, 1).toUpperCase() + str.substr(1).toLowerCase();
    }
}
exports.toSnakeCase = toSnakeCase;
function regexQuote(s) {
    return s.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhc2UtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGlFQUFpRTtBQUNqRSx5Q0FBMEM7QUFFMUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFFbkQsU0FBZ0IsV0FBVyxDQUFDLEdBQUcsSUFBYztJQUMzQyxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixDQUFDO0FBRkQsa0NBRUM7QUFFRCxTQUFnQixZQUFZLENBQUMsR0FBRyxJQUFjO0lBQzVDLE9BQU8sU0FBUyxDQUFDLElBQUksRUFBRSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFGRCxvQ0FFQztBQUVELE1BQU0sU0FBUyxHQUFHLElBQUksTUFBTSxDQUMxQixjQUFjLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFDekUsR0FBRyxDQUNKLENBQUM7QUFDRixTQUFnQixXQUFXLENBQUMsQ0FBUyxFQUFFLFNBQVMsR0FBRyxHQUFHO0lBQ3BELDJCQUEyQjtJQUMzQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FDWCxTQUFTLEVBQ1QsQ0FBQyxDQUFDLEVBQUUsTUFBYyxFQUFFLElBQVksRUFBRSxLQUFhLEVBQUUsRUFBRSxDQUNqRCxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FDL0MsQ0FBQztJQUNGLE9BQU8sVUFBVSxDQUFDLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFFcEMsU0FBUyxPQUFPLENBQUMsR0FBVztRQUMxQixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdEUsQ0FBQztBQUNILENBQUM7QUFaRCxrQ0FZQztBQUVELFNBQVMsVUFBVSxDQUFDLENBQVM7SUFDM0IsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ25ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjYW1lbGNhc2UgZnJvbSAnY2FtZWxjYXNlJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG5pbXBvcnQgZGVjYW1lbGl6ZSA9IHJlcXVpcmUoJ2RlY2FtZWxpemUnKTtcblxuY29uc3QgQ09NTU9OX0FCQlJFVklBVElPTlMgPSBbJ0tpQicsICdNaUInLCAnR2lCJ107XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0NhbWVsQ2FzZSguLi5hcmdzOiBzdHJpbmdbXSk6IHN0cmluZyB7XG4gIHJldHVybiBjYW1lbGNhc2UoYXJncyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1Bhc2NhbENhc2UoLi4uYXJnczogc3RyaW5nW10pOiBzdHJpbmcge1xuICByZXR1cm4gY2FtZWxjYXNlKGFyZ3MsIHsgcGFzY2FsQ2FzZTogdHJ1ZSB9KTtcbn1cblxuY29uc3QgQUJCUkVWX1JFID0gbmV3IFJlZ0V4cChcbiAgYChefFteQS1aXSkoJHtDT01NT05fQUJCUkVWSUFUSU9OUy5tYXAocmVnZXhRdW90ZSkuam9pbignfCcpfSkoJHxbXmEtel0pYCxcbiAgJ2cnLFxuKTtcbmV4cG9ydCBmdW5jdGlvbiB0b1NuYWtlQ2FzZShzOiBzdHJpbmcsIHNlcGFyYXRvciA9ICdfJyk6IHN0cmluZyB7XG4gIC8vIFNhdmUgY29tbW9uIGFiYnJldmF0aW9uc1xuICBzID0gcy5yZXBsYWNlKFxuICAgIEFCQlJFVl9SRSxcbiAgICAoXywgYmVmb3JlOiBzdHJpbmcsIGFiYnI6IHN0cmluZywgYWZ0ZXI6IHN0cmluZykgPT5cbiAgICAgIGJlZm9yZSArIHVjZmlyc3QoYWJici50b0xvd2VyQ2FzZSgpKSArIGFmdGVyLFxuICApO1xuICByZXR1cm4gZGVjYW1lbGl6ZShzLCB7IHNlcGFyYXRvciB9KTtcblxuICBmdW5jdGlvbiB1Y2ZpcnN0KHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0ci5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKSArIHN0ci5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWdleFF1b3RlKHM6IHN0cmluZykge1xuICByZXR1cm4gcy5yZXBsYWNlKC9bLj8qK14kW1xcXVxcXFwoKXt9fC1dL2csICdcXFxcJCYnKTtcbn1cbiJdfQ==