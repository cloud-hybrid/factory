"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformCli = exports.TerraformCliPlan = void 0;
const path = __importStar(require("path"));
const util_1 = require("cdktf-cli/lib/util");
const terraform_1 = require("./terraform");
const terraform_2 = require("../../helper/terraform");
class TerraformCliPlan extends terraform_1.AbstractTerraformPlan {
    constructor(planFile, plan) {
        super(planFile, plan.resource_changes, plan.output_changes);
        this.planFile = planFile;
        this.plan = plan;
    }
}
exports.TerraformCliPlan = TerraformCliPlan;
class TerraformCli {
    constructor(stack) {
        this.stack = stack;
        this.workdir = stack.workingDirectory;
    }
    async init() {
        await this.setUserAgent();
        await util_1.exec(terraform_2.terraformBinaryName, ["init", "-input=false"], {
            cwd: this.workdir,
            env: process.env,
        });
    }
    async plan(destroy = false) {
        const planFile = "plan";
        const options = [
            "plan",
            "-input=false",
            "-out",
            planFile,
            ...this.stateFileOption,
        ];
        if (destroy) {
            options.push("-destroy");
        }
        await this.setUserAgent();
        await util_1.exec(terraform_2.terraformBinaryName, options, {
            cwd: this.workdir,
            env: process.env,
        });
        const jsonPlan = await util_1.exec(terraform_2.terraformBinaryName, ["show", "-json", planFile], { cwd: this.workdir, env: process.env });
        return new TerraformCliPlan(planFile, JSON.parse(jsonPlan));
    }
    async deploy(planFile, stdout, extraOptions = []) {
        await this.setUserAgent();
        await util_1.exec(terraform_2.terraformBinaryName, [
            "apply",
            "-auto-approve",
            "-input=false",
            ...this.stateFileOption,
            ...extraOptions,
            // only appends planFile if not empty
            // this allows deploying without a plan (as used in watch)
            ...(planFile ? [planFile] : []),
        ], { cwd: this.workdir, env: process.env }, stdout);
    }
    async destroy(stdout) {
        await this.setUserAgent();
        await util_1.exec(terraform_2.terraformBinaryName, ["destroy", "-auto-approve", "-input=false", ...this.stateFileOption], { cwd: this.workdir, env: process.env }, stdout);
    }
    async version() {
        try {
            return await util_1.exec(terraform_2.terraformBinaryName, ["-v"], {
                cwd: this.workdir,
                env: process.env,
            });
        }
        catch (_a) {
            throw new Error("Terraform CLI not present - Please install a current version https://learn.hashicorp.com/terraform/getting-started/install.html");
        }
    }
    async output() {
        const output = await util_1.exec(terraform_2.terraformBinaryName, ["output", "-json", ...this.stateFileOption], { cwd: this.workdir, env: process.env });
        return JSON.parse(output);
    }
    get stateFileOption() {
        return [
            "-state",
            path.join(process.cwd(), `terraform.${this.stack.name}.tfstate`),
        ];
    }
    async setUserAgent() {
        // Read the cdktf version from the 'cdk.tf.json' file
        // and set the user agent.
        const version = await util_1.readCDKTFVersion(this.workdir);
        if (version != "") {
            process.env.TF_APPEND_USER_AGENT =
                "cdktf/" + version + " (+https://github.com/hashicorp/terraform-cdk)";
        }
    }
}
exports.TerraformCli = TerraformCli;
//# sourceMappingURL=data:application/json;base64,