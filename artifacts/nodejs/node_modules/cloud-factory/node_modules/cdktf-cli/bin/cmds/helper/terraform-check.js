"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.terraformCheck = void 0;
const terraform_cli_1 = require("../ui/models/terraform-cli");
const semver = __importStar(require("semver"));
const fs_extra_1 = require("fs-extra");
const path = __importStar(require("path"));
const MIN_SUPPORTED_VERSION = "0.13.0";
const VERSION_REGEXP = /Terraform v\d+.\d+.\d+/;
exports.terraformCheck = async () => {
    try {
        if (fs_extra_1.existsSync(path.join(process.cwd(), "terraform.tfstate"))) {
            throw new Error(`
        CDK for Terraform now supports multiple stacks!
        Found 'terraform.tfstate' Terraform state file. Please rename it to match the stack name. Learn more https://cdk.tf/multiple-stacks
      `);
        }
        // We're abusing the TerraformCli class here,
        // hence we need to construct this object.
        // Only the `workingDirectory` is releveant here.
        const fakeStack = {
            name: "",
            workingDirectory: "./",
            constructPath: "",
            content: "",
            synthesizedStackPath: "",
            annotations: [],
        };
        const terraform = new terraform_cli_1.TerraformCli(fakeStack);
        const terraformVersion = await terraform.version();
        const terraformVersionMatches = terraformVersion.match(VERSION_REGEXP);
        if (terraformVersionMatches !== null) {
            // Should always be the first match found in the string
            const cleanTerraformVersion = semver.clean(terraformVersionMatches[0].substring(terraformVersionMatches[0].indexOf("v")));
            if (cleanTerraformVersion &&
                semver.lt(cleanTerraformVersion, MIN_SUPPORTED_VERSION)) {
                const warningMessage = `Warning: unsupported Terraform version [${cleanTerraformVersion}] - please upgrade to >=${MIN_SUPPORTED_VERSION}`;
                console.warn(warningMessage);
            }
        }
    }
    catch (e) {
        console.error(e.message);
        process.exit(1);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLWNoZWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVycmFmb3JtLWNoZWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw4REFBMEQ7QUFDMUQsK0NBQWlDO0FBRWpDLHVDQUFzQztBQUN0QywyQ0FBNkI7QUFFN0IsTUFBTSxxQkFBcUIsR0FBRyxRQUFRLENBQUM7QUFDdkMsTUFBTSxjQUFjLEdBQUcsd0JBQXdCLENBQUM7QUFFbkMsUUFBQSxjQUFjLEdBQUcsS0FBSyxJQUFtQixFQUFFO0lBQ3RELElBQUk7UUFDRixJQUFJLHFCQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyxFQUFFO1lBQzdELE1BQU0sSUFBSSxLQUFLLENBQUM7OztPQUdmLENBQUMsQ0FBQztTQUNKO1FBRUQsNkNBQTZDO1FBQzdDLDBDQUEwQztRQUMxQyxpREFBaUQ7UUFDakQsTUFBTSxTQUFTLEdBQXFCO1lBQ2xDLElBQUksRUFBRSxFQUFFO1lBQ1IsZ0JBQWdCLEVBQUUsSUFBSTtZQUN0QixhQUFhLEVBQUUsRUFBRTtZQUNqQixPQUFPLEVBQUUsRUFBRTtZQUNYLG9CQUFvQixFQUFFLEVBQUU7WUFDeEIsV0FBVyxFQUFFLEVBQUU7U0FDaEIsQ0FBQztRQUVGLE1BQU0sU0FBUyxHQUFHLElBQUksNEJBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU5QyxNQUFNLGdCQUFnQixHQUFHLE1BQU0sU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25ELE1BQU0sdUJBQXVCLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXZFLElBQUksdUJBQXVCLEtBQUssSUFBSSxFQUFFO1lBQ3BDLHVEQUF1RDtZQUN2RCxNQUFNLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQ3hDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDbEMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUN4QyxDQUNGLENBQUM7WUFFRixJQUNFLHFCQUFxQjtnQkFDckIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxxQkFBcUIsQ0FBQyxFQUN2RDtnQkFDQSxNQUFNLGNBQWMsR0FBRywyQ0FBMkMscUJBQXFCLDJCQUEyQixxQkFBcUIsRUFBRSxDQUFDO2dCQUMxSSxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2FBQzlCO1NBQ0Y7S0FDRjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNqQjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlcnJhZm9ybUNsaSB9IGZyb20gXCIuLi91aS9tb2RlbHMvdGVycmFmb3JtLWNsaVwiO1xuaW1wb3J0ICogYXMgc2VtdmVyIGZyb20gXCJzZW12ZXJcIjtcbmltcG9ydCB7IFN5bnRoZXNpemVkU3RhY2sgfSBmcm9tIFwiLi9zeW50aC1zdGFja1wiO1xuaW1wb3J0IHsgZXhpc3RzU3luYyB9IGZyb20gXCJmcy1leHRyYVwiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG5jb25zdCBNSU5fU1VQUE9SVEVEX1ZFUlNJT04gPSBcIjAuMTMuMFwiO1xuY29uc3QgVkVSU0lPTl9SRUdFWFAgPSAvVGVycmFmb3JtIHZcXGQrLlxcZCsuXFxkKy87XG5cbmV4cG9ydCBjb25zdCB0ZXJyYWZvcm1DaGVjayA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoZXhpc3RzU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgXCJ0ZXJyYWZvcm0udGZzdGF0ZVwiKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXG4gICAgICAgIENESyBmb3IgVGVycmFmb3JtIG5vdyBzdXBwb3J0cyBtdWx0aXBsZSBzdGFja3MhXG4gICAgICAgIEZvdW5kICd0ZXJyYWZvcm0udGZzdGF0ZScgVGVycmFmb3JtIHN0YXRlIGZpbGUuIFBsZWFzZSByZW5hbWUgaXQgdG8gbWF0Y2ggdGhlIHN0YWNrIG5hbWUuIExlYXJuIG1vcmUgaHR0cHM6Ly9jZGsudGYvbXVsdGlwbGUtc3RhY2tzXG4gICAgICBgKTtcbiAgICB9XG5cbiAgICAvLyBXZSdyZSBhYnVzaW5nIHRoZSBUZXJyYWZvcm1DbGkgY2xhc3MgaGVyZSxcbiAgICAvLyBoZW5jZSB3ZSBuZWVkIHRvIGNvbnN0cnVjdCB0aGlzIG9iamVjdC5cbiAgICAvLyBPbmx5IHRoZSBgd29ya2luZ0RpcmVjdG9yeWAgaXMgcmVsZXZlYW50IGhlcmUuXG4gICAgY29uc3QgZmFrZVN0YWNrOiBTeW50aGVzaXplZFN0YWNrID0ge1xuICAgICAgbmFtZTogXCJcIixcbiAgICAgIHdvcmtpbmdEaXJlY3Rvcnk6IFwiLi9cIixcbiAgICAgIGNvbnN0cnVjdFBhdGg6IFwiXCIsXG4gICAgICBjb250ZW50OiBcIlwiLFxuICAgICAgc3ludGhlc2l6ZWRTdGFja1BhdGg6IFwiXCIsXG4gICAgICBhbm5vdGF0aW9uczogW10sXG4gICAgfTtcblxuICAgIGNvbnN0IHRlcnJhZm9ybSA9IG5ldyBUZXJyYWZvcm1DbGkoZmFrZVN0YWNrKTtcblxuICAgIGNvbnN0IHRlcnJhZm9ybVZlcnNpb24gPSBhd2FpdCB0ZXJyYWZvcm0udmVyc2lvbigpO1xuICAgIGNvbnN0IHRlcnJhZm9ybVZlcnNpb25NYXRjaGVzID0gdGVycmFmb3JtVmVyc2lvbi5tYXRjaChWRVJTSU9OX1JFR0VYUCk7XG5cbiAgICBpZiAodGVycmFmb3JtVmVyc2lvbk1hdGNoZXMgIT09IG51bGwpIHtcbiAgICAgIC8vIFNob3VsZCBhbHdheXMgYmUgdGhlIGZpcnN0IG1hdGNoIGZvdW5kIGluIHRoZSBzdHJpbmdcbiAgICAgIGNvbnN0IGNsZWFuVGVycmFmb3JtVmVyc2lvbiA9IHNlbXZlci5jbGVhbihcbiAgICAgICAgdGVycmFmb3JtVmVyc2lvbk1hdGNoZXNbMF0uc3Vic3RyaW5nKFxuICAgICAgICAgIHRlcnJhZm9ybVZlcnNpb25NYXRjaGVzWzBdLmluZGV4T2YoXCJ2XCIpXG4gICAgICAgIClcbiAgICAgICk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgY2xlYW5UZXJyYWZvcm1WZXJzaW9uICYmXG4gICAgICAgIHNlbXZlci5sdChjbGVhblRlcnJhZm9ybVZlcnNpb24sIE1JTl9TVVBQT1JURURfVkVSU0lPTilcbiAgICAgICkge1xuICAgICAgICBjb25zdCB3YXJuaW5nTWVzc2FnZSA9IGBXYXJuaW5nOiB1bnN1cHBvcnRlZCBUZXJyYWZvcm0gdmVyc2lvbiBbJHtjbGVhblRlcnJhZm9ybVZlcnNpb259XSAtIHBsZWFzZSB1cGdyYWRlIHRvID49JHtNSU5fU1VQUE9SVEVEX1ZFUlNJT059YDtcbiAgICAgICAgY29uc29sZS53YXJuKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSk7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9XG59O1xuIl19