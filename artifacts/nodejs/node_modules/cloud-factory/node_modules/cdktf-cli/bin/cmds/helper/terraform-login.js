"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformLogin = void 0;
const fs = __importStar(require("fs"));
const inquirer = __importStar(require("inquirer"));
const open = __importStar(require("open"));
const chalk = __importStar(require("chalk"));
const chalkColour = new chalk.Instance();
const homedir = require("os").homedir();
const terraformCredentialsFilePath = `${homedir}/.terraform.d/credentials.tfrc.json`;
const terraformLoginURL = `https://app.terraform.io/app/settings/tokens?source=terraform-login`;
class TerraformLogin {
    async askToContinue() {
        // Describe the command
        console.log(chalkColour `{greenBright Welcome to CDK for Terraform!}

By default, cdktf allows you to manage the state of your stacks using Terraform Cloud for free.
cdktf will request an API token for app.terraform.io using your browser.

If login is successful, cdktf will store the token in plain text in
the following file for use by subsequent Terraform commands:
    {whiteBright ${terraformCredentialsFilePath}}

{yellow Note: The local storage mode isn't recommended for storing the state of your stacks.}
`);
        let isLogin = false;
        const { tfCloud } = await inquirer.prompt([
            {
                name: "tfCloud",
                type: "confirm",
                message: "Do you want to continue with Terraform Cloud remote state management?",
            },
        ]);
        if (tfCloud) {
            isLogin = true;
            this.openBrowser();
        }
        return isLogin;
    }
    openBrowser() {
        console.log(`\nopening webpage using your browser.....\n`);
        console.log(chalkColour `If the web browser didn't open the window automatically, you can go to the following url:
        {whiteBright ${terraformLoginURL}}\n`);
        return open.default(terraformLoginURL);
    }
    async askForToken() {
        const { token } = await inquirer.prompt([
            {
                name: "token",
                message: "Token for app.terraform.io ðŸ”‘",
                type: "password",
            },
        ]);
        return token;
    }
    async saveTerraformCredentials(token) {
        const credentialsFileJSON = JSON.stringify({ credentials: { "app.terraform.io": { token: token } } }, undefined, 2);
        fs.writeFileSync(terraformCredentialsFilePath, credentialsFileJSON);
    }
    async checkIfTerraformCredentialsExist() {
        if (fs.existsSync(terraformCredentialsFilePath)) {
            const token = await this.getTokenFromTerraformCredentialsFile();
            if (token != "") {
                return true;
            }
        }
        return false;
    }
    async getTokenFromTerraformCredentialsFile() {
        const terraformCredentials = await this.getTerraformCredentialsFile();
        if ("app.terraform.io" in terraformCredentials.credentials) {
            return terraformCredentials.credentials["app.terraform.io"].token;
        }
        return "";
    }
    async getTerraformCredentialsFile() {
        const credentialsFile = JSON.parse(fs.readFileSync(terraformCredentialsFilePath).toString());
        const terraformCredentials = credentialsFile;
        return terraformCredentials;
    }
    async askToLogin() {
        const checkToken = await this.checkIfTerraformCredentialsExist();
        // user login if not already
        if (!checkToken) {
            const shouldContinue = await this.askToContinue();
            if (shouldContinue) {
                const token = await this.askForToken();
                if (token == "") {
                    console.error(`\nERROR: failed to gather token.\n`);
                    process.exit(1);
                }
                this.saveTerraformCredentials(token);
                return token;
            }
        }
        else {
            const token = this.getTokenFromTerraformCredentialsFile();
            return token;
        }
        return "";
    }
}
exports.TerraformLogin = TerraformLogin;
// Note: we might want to look into using 'readline' instead for async reading of input.
//# sourceMappingURL=data:application/json;base64,