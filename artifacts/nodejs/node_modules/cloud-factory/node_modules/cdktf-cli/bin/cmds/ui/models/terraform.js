"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractTerraformPlan = exports.DeployingResourceApplyState = exports.PlannedResourceAction = void 0;
var PlannedResourceAction;
(function (PlannedResourceAction) {
    PlannedResourceAction["CREATE"] = "create";
    PlannedResourceAction["UPDATE"] = "update";
    PlannedResourceAction["DELETE"] = "delete";
    PlannedResourceAction["READ"] = "read";
    PlannedResourceAction["NO_OP"] = "no-op";
})(PlannedResourceAction = exports.PlannedResourceAction || (exports.PlannedResourceAction = {}));
var DeployingResourceApplyState;
(function (DeployingResourceApplyState) {
    DeployingResourceApplyState["WAITING"] = "waiting";
    DeployingResourceApplyState["UPDATING"] = "updating";
    DeployingResourceApplyState["UPDATED"] = "updated";
    DeployingResourceApplyState["CREATING"] = "creating";
    DeployingResourceApplyState["CREATED"] = "created";
    DeployingResourceApplyState["DESTROYING"] = "destroying";
    DeployingResourceApplyState["DESTROYED"] = "destroyed";
    DeployingResourceApplyState["SUCCESS"] = "success";
    DeployingResourceApplyState["ERROR"] = "error";
})(DeployingResourceApplyState = exports.DeployingResourceApplyState || (exports.DeployingResourceApplyState = {}));
function filterChangingResources(resources) {
    const applyActions = [
        PlannedResourceAction.UPDATE,
        PlannedResourceAction.CREATE,
        PlannedResourceAction.DELETE,
        PlannedResourceAction.READ,
    ];
    return resources.filter((resource) => applyActions.includes(resource.action));
}
class AbstractTerraformPlan {
    constructor(planFile, resourceChanges, outputChanges) {
        this.planFile = planFile;
        this.resourceChanges = resourceChanges;
        this.outputChanges = outputChanges;
    }
    get resources() {
        return (this.resourceChanges || []).map((resource) => {
            return {
                id: resource.address,
                action: resource.change.actions[0],
            };
        });
    }
    get applyableResources() {
        return filterChangingResources(this.resources);
    }
    get outputs() {
        return Object.entries(this.outputChanges || {}).map(([key, value]) => ({
            id: `output.${key}`,
            action: value.actions[0],
        }));
    }
    get changingOutputs() {
        return filterChangingResources(this.outputs);
    }
    get needsApply() {
        return (this.applyableResources.length > 0 || this.changingOutputs.length > 0);
    }
}
exports.AbstractTerraformPlan = AbstractTerraformPlan;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVycmFmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQVkscUJBTVg7QUFORCxXQUFZLHFCQUFxQjtJQUMvQiwwQ0FBaUIsQ0FBQTtJQUNqQiwwQ0FBaUIsQ0FBQTtJQUNqQiwwQ0FBaUIsQ0FBQTtJQUNqQixzQ0FBYSxDQUFBO0lBQ2Isd0NBQWUsQ0FBQTtBQUNqQixDQUFDLEVBTlcscUJBQXFCLEdBQXJCLDZCQUFxQixLQUFyQiw2QkFBcUIsUUFNaEM7QUFFRCxJQUFZLDJCQVVYO0FBVkQsV0FBWSwyQkFBMkI7SUFDckMsa0RBQW1CLENBQUE7SUFDbkIsb0RBQXFCLENBQUE7SUFDckIsa0RBQW1CLENBQUE7SUFDbkIsb0RBQXFCLENBQUE7SUFDckIsa0RBQW1CLENBQUE7SUFDbkIsd0RBQXlCLENBQUE7SUFDekIsc0RBQXVCLENBQUE7SUFDdkIsa0RBQW1CLENBQUE7SUFDbkIsOENBQWUsQ0FBQTtBQUNqQixDQUFDLEVBVlcsMkJBQTJCLEdBQTNCLG1DQUEyQixLQUEzQixtQ0FBMkIsUUFVdEM7QUF3Q0QsU0FBUyx1QkFBdUIsQ0FBQyxTQUE0QjtJQUMzRCxNQUFNLFlBQVksR0FBRztRQUNuQixxQkFBcUIsQ0FBQyxNQUFNO1FBQzVCLHFCQUFxQixDQUFDLE1BQU07UUFDNUIscUJBQXFCLENBQUMsTUFBTTtRQUM1QixxQkFBcUIsQ0FBQyxJQUFJO0tBQzNCLENBQUM7SUFDRixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDaEYsQ0FBQztBQUNELE1BQXNCLHFCQUFxQjtJQUN6QyxZQUNrQixRQUFnQixFQUNmLGVBQWtDLEVBQ2xDLGFBQW9EO1FBRnJELGFBQVEsR0FBUixRQUFRLENBQVE7UUFDZixvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFDbEMsa0JBQWEsR0FBYixhQUFhLENBQXVDO0lBQ3BFLENBQUM7SUFFSixJQUFXLFNBQVM7UUFDbEIsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDbkQsT0FBTztnQkFDTCxFQUFFLEVBQUUsUUFBUSxDQUFDLE9BQU87Z0JBQ3BCLE1BQU0sRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDaEIsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxJQUFXLGtCQUFrQjtRQUMzQixPQUFPLHVCQUF1QixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2hCLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3JFLEVBQUUsRUFBRSxVQUFVLEdBQUcsRUFBRTtZQUNuQixNQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDekIsQ0FBQyxDQUFzQixDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFXLGVBQWU7UUFDeEIsT0FBTyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELElBQVcsVUFBVTtRQUNuQixPQUFPLENBQ0wsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUN0RSxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBcENELHNEQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIFBsYW5uZWRSZXNvdXJjZUFjdGlvbiB7XG4gIENSRUFURSA9IFwiY3JlYXRlXCIsXG4gIFVQREFURSA9IFwidXBkYXRlXCIsXG4gIERFTEVURSA9IFwiZGVsZXRlXCIsXG4gIFJFQUQgPSBcInJlYWRcIixcbiAgTk9fT1AgPSBcIm5vLW9wXCIsXG59XG5cbmV4cG9ydCBlbnVtIERlcGxveWluZ1Jlc291cmNlQXBwbHlTdGF0ZSB7XG4gIFdBSVRJTkcgPSBcIndhaXRpbmdcIixcbiAgVVBEQVRJTkcgPSBcInVwZGF0aW5nXCIsXG4gIFVQREFURUQgPSBcInVwZGF0ZWRcIixcbiAgQ1JFQVRJTkcgPSBcImNyZWF0aW5nXCIsXG4gIENSRUFURUQgPSBcImNyZWF0ZWRcIixcbiAgREVTVFJPWUlORyA9IFwiZGVzdHJveWluZ1wiLFxuICBERVNUUk9ZRUQgPSBcImRlc3Ryb3llZFwiLFxuICBTVUNDRVNTID0gXCJzdWNjZXNzXCIsXG4gIEVSUk9SID0gXCJlcnJvclwiLFxufVxuZXhwb3J0IGludGVyZmFjZSBQbGFubmVkUmVzb3VyY2Uge1xuICBpZDogc3RyaW5nO1xuICBhY3Rpb246IFBsYW5uZWRSZXNvdXJjZUFjdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZXBsb3lpbmdSZXNvdXJjZSBleHRlbmRzIFBsYW5uZWRSZXNvdXJjZSB7XG4gIGFwcGx5U3RhdGU6IERlcGxveWluZ1Jlc291cmNlQXBwbHlTdGF0ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZUNoYW5nZXNDaGFuZ2Uge1xuICBhY3Rpb25zOiBzdHJpbmdbXTtcbiAgYmVmb3JlOiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xuICBhZnRlcjogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZUNoYW5nZXMge1xuICBhZGRyZXNzOiBzdHJpbmc7XG4gIG1vZHVsZV9hZGRyZXNzOiBzdHJpbmc7XG4gIG1vZGU6IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGluZGV4OiBudW1iZXI7XG4gIHByb3ZpZGVyX25hbWU6IHN0cmluZztcbiAgY2hhbmdlOiBSZXNvdXJjZUNoYW5nZXNDaGFuZ2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVycmFmb3JtT3V0cHV0IHtcbiAgc2Vuc2l0aXZlOiBib29sZWFuO1xuICB0eXBlOiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmcgfCBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8IEFycmF5PGFueT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVycmFmb3JtUGxhbiB7XG4gIHJlYWRvbmx5IHJlc291cmNlczogUGxhbm5lZFJlc291cmNlW107XG4gIHJlYWRvbmx5IGFwcGx5YWJsZVJlc291cmNlczogUGxhbm5lZFJlc291cmNlW107XG4gIHJlYWRvbmx5IG5lZWRzQXBwbHk6IGJvb2xlYW47XG4gIHJlYWRvbmx5IHBsYW5GaWxlOiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGZpbHRlckNoYW5naW5nUmVzb3VyY2VzKHJlc291cmNlczogUGxhbm5lZFJlc291cmNlW10pIHtcbiAgY29uc3QgYXBwbHlBY3Rpb25zID0gW1xuICAgIFBsYW5uZWRSZXNvdXJjZUFjdGlvbi5VUERBVEUsXG4gICAgUGxhbm5lZFJlc291cmNlQWN0aW9uLkNSRUFURSxcbiAgICBQbGFubmVkUmVzb3VyY2VBY3Rpb24uREVMRVRFLFxuICAgIFBsYW5uZWRSZXNvdXJjZUFjdGlvbi5SRUFELFxuICBdO1xuICByZXR1cm4gcmVzb3VyY2VzLmZpbHRlcigocmVzb3VyY2UpID0+IGFwcGx5QWN0aW9ucy5pbmNsdWRlcyhyZXNvdXJjZS5hY3Rpb24pKTtcbn1cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFRlcnJhZm9ybVBsYW4gaW1wbGVtZW50cyBUZXJyYWZvcm1QbGFuIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHBsYW5GaWxlOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSByZXNvdXJjZUNoYW5nZXM6IFJlc291cmNlQ2hhbmdlc1tdLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgb3V0cHV0Q2hhbmdlczogUmVjb3JkPHN0cmluZywgUmVzb3VyY2VDaGFuZ2VzQ2hhbmdlPlxuICApIHt9XG5cbiAgcHVibGljIGdldCByZXNvdXJjZXMoKTogUGxhbm5lZFJlc291cmNlW10ge1xuICAgIHJldHVybiAodGhpcy5yZXNvdXJjZUNoYW5nZXMgfHwgW10pLm1hcCgocmVzb3VyY2UpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiByZXNvdXJjZS5hZGRyZXNzLFxuICAgICAgICBhY3Rpb246IHJlc291cmNlLmNoYW5nZS5hY3Rpb25zWzBdLFxuICAgICAgfSBhcyBQbGFubmVkUmVzb3VyY2U7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGFwcGx5YWJsZVJlc291cmNlcygpOiBQbGFubmVkUmVzb3VyY2VbXSB7XG4gICAgcmV0dXJuIGZpbHRlckNoYW5naW5nUmVzb3VyY2VzKHRoaXMucmVzb3VyY2VzKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgb3V0cHV0cygpOiBQbGFubmVkUmVzb3VyY2VbXSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMub3V0cHV0Q2hhbmdlcyB8fCB7fSkubWFwKChba2V5LCB2YWx1ZV0pID0+ICh7XG4gICAgICBpZDogYG91dHB1dC4ke2tleX1gLFxuICAgICAgYWN0aW9uOiB2YWx1ZS5hY3Rpb25zWzBdLFxuICAgIH0pKSBhcyBQbGFubmVkUmVzb3VyY2VbXTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY2hhbmdpbmdPdXRwdXRzKCk6IFBsYW5uZWRSZXNvdXJjZVtdIHtcbiAgICByZXR1cm4gZmlsdGVyQ2hhbmdpbmdSZXNvdXJjZXModGhpcy5vdXRwdXRzKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbmVlZHNBcHBseSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5hcHBseWFibGVSZXNvdXJjZXMubGVuZ3RoID4gMCB8fCB0aGlzLmNoYW5naW5nT3V0cHV0cy5sZW5ndGggPiAwXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRlcnJhZm9ybSB7XG4gIGluaXQ6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIHBsYW46IChkZXN0cm95OiBib29sZWFuKSA9PiBQcm9taXNlPFRlcnJhZm9ybVBsYW4+O1xuICBkZXBsb3kocGxhbkZpbGU6IHN0cmluZywgc3Rkb3V0OiAoY2h1bms6IEJ1ZmZlcikgPT4gYW55KTogUHJvbWlzZTx2b2lkPjtcbiAgZGVzdHJveShzdGRvdXQ6IChjaHVuazogQnVmZmVyKSA9PiBhbnkpOiBQcm9taXNlPHZvaWQ+O1xuICBvdXRwdXQoKTogUHJvbWlzZTx7IFtrZXk6IHN0cmluZ106IFRlcnJhZm9ybU91dHB1dCB9Pjtcbn1cbiJdfQ==