"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WatchClient = void 0;
const chokidar = __importStar(require("chokidar"));
const lodash_isequal_1 = __importDefault(require("lodash.isequal"));
const synth_stack_1 = require("../../bin/cmds/helper/synth-stack");
const terraform_cli_1 = require("../../bin/cmds/ui/models/terraform-cli");
const terraform_cloud_1 = require("../../bin/cmds/ui/models/terraform-cloud");
const terraform_context_1 = require("../../bin/cmds/ui/terraform-context");
const util_1 = require("./util");
const fs_1 = require("cdktf/lib/private/fs");
const logging_1 = require("../logging");
const checkpoint_1 = require("../checkpoint");
class RecoverableError extends Error {
    constructor(message, origin) {
        super(message);
        this.origin = origin;
        // Set the prototype explicitly. See https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, RecoverableError.prototype);
    }
}
class WatchClient {
    constructor(options) {
        this.subscribers = new Set();
        this.running = false;
        this.needsInit = true;
        this.actionQueue = [];
        this.state = {
            status: "IDLE",
            stacks: [],
            resources: new Map(),
        };
        this.targetDir = options.targetDir;
        this.synthCommand = options.synthCommand;
        if (!options.autoApprove)
            throw new Error("WatchClient does not yet support running without autoApprove");
        this.autoApprove = options.autoApprove;
        this.targetStack = options.targetStack;
    }
    isRunning() {
        return this.running;
    }
    subscribe(handler) {
        this.subscribers.add(handler);
        return () => this.subscribers.delete(handler);
    }
    updateState(state) {
        const previousState = this.state;
        // ignore state being readonly - it is readonly for safety in other places
        this.state = Object.assign({}, this.state, state);
        if (!lodash_isequal_1.default(previousState, this.state)) {
            this.subscribers.forEach((sub) => sub(this.state));
        }
    }
    async runSynth() {
        this.updateState({ status: "SYNTHESIZING", error: undefined });
        try {
            const stacks = (await synth_stack_1.SynthStack.synth(this.synthCommand, this.targetDir, true, "watch")).map((stack) => {
                return {
                    ...stack,
                    json: JSON.parse(stack.content),
                };
            });
            this.updateState({
                stacks,
            });
            if (this.needsInit)
                await this.queueAction("INIT", true);
        }
        catch (e) {
            throw new RecoverableError(e.errorOutput || e.message, "SYNTHESIZING");
        }
    }
    async runInit() {
        this.updateState({ status: "INITIALIZING" });
        const terraform = await this.getTerraform();
        await terraform.init();
        this.needsInit = false;
    }
    async runDeploy() {
        const { workingDirectory, name } = await this.getTargetStack();
        console.log(`Running deploy in workingDirectory ${workingDirectory}`);
        const newTargetStackHash = fs_1.hashPath(workingDirectory);
        if (this.lastTargetStackHash === newTargetStackHash) {
            console.log(`skipping deploy because hash ("${this.lastTargetStackHash}") of target stack "${name}" did not change for working directory ${workingDirectory}`);
            return;
        }
        else {
            console.log(`continuing deploy because new hash ("${newTargetStackHash}") of working directory "${workingDirectory}" differs from previous hash "${this.lastTargetStackHash}"`);
        }
        this.updateState({ status: "DEPLOYING" });
        const terraform = await this.getTerraform();
        // remove previous errors
        // we do this here as deploy will update the state already while
        // in progress and we don't want to see the error while successful
        // things already start to happen
        this.updateState({
            error: undefined,
        });
        try {
            if (terraform instanceof terraform_cloud_1.TerraformCloud) {
                // plan for Terraform Cloud remote execution also uploads the Terraform code
                const { planFile } = await terraform.plan(false); // false = deploy
                await terraform.deploy(planFile, this.handleTerraformOutput.bind(this));
            }
            else if (terraform instanceof terraform_cli_1.TerraformCli) {
                // skip the plan and refreshing to save time ⏱
                const NO_PLAN_FILE = "";
                await terraform.deploy(NO_PLAN_FILE, this.handleTerraformOutput.bind(this), ["-refresh=false"]);
            }
            // deployment was successful -> update hash
            this.lastTargetStackHash = newTargetStackHash;
        }
        catch (e) {
            // When new providers where added or the stack name might've
            // been changed (when using just a single stack) we need to
            // re-init Terraform. We'll do this proactively on any error.
            this.needsInit = true;
            throw new RecoverableError(`${e.message}${e.stderr ? `\n${e.stderr}` : ""}`, "DEPLOYING");
        }
    }
    handleTerraformOutput(chunk) {
        const resources = terraform_context_1.parseOutput(chunk.toString());
        if (resources.length > 0) {
            const newResources = new Map(this.state.resources);
            resources.forEach((r) => newResources.set(r.id, { ...r, changedAt: Date.now() }));
            this.updateState({ resources: newResources });
        }
    }
    async getTargetStack() {
        const { stacks } = this.state;
        if (stacks.length === 0) {
            throw new RecoverableError("Cannot determine target stack when there are no stacks", this.state.status);
        }
        if (this.targetStack) {
            const stack = stacks.find((s) => s.name === this.targetStack);
            if (!stack) {
                throw new RecoverableError(`Could not find stack ${this.targetStack}. Found ${stacks
                    .map((s) => s.name)
                    .join(", ")}`, this.state.status);
            }
            return stack;
        }
        else if (stacks.length > 1) {
            throw new RecoverableError("Found more than one stack, please specify which stack to watch using --stack", this.state.status);
        }
        return stacks[0];
    }
    // todo: optimization: cache instance as long as backend does not change
    async getTerraform() {
        var _a, _b, _c, _d;
        const stack = await this.getTargetStack();
        if ((_b = (_a = stack.json.terraform) === null || _a === void 0 ? void 0 : _a.backend) === null || _b === void 0 ? void 0 : _b.remote) {
            const terraformCloud = new terraform_cloud_1.TerraformCloud(stack, (_d = (_c = stack.json.terraform) === null || _c === void 0 ? void 0 : _c.backend) === null || _d === void 0 ? void 0 : _d.remote);
            if (await terraformCloud.isRemoteWorkspace()) {
                throw new RecoverableError("Using Terraform Cloud in Remote Execution Mode is not yet supported for cdktf watch", this.state.status);
                // return terraformCloud;
            }
        }
        return new terraform_cli_1.TerraformCli(stack);
    }
    async start() {
        this.running = true;
        let gitignored = [];
        try {
            gitignored = await util_1.readGitignore(process.cwd());
        }
        catch (e) {
            logging_1.logger.error(e);
            this.updateState({
                error: {
                    message: `Could not read .gitignore file in ${process.cwd()}. Watch requires it for knowing which files to watch. Error while reading file: ${e.message}`,
                    recoverable: false,
                    origin: "IDLE",
                    timestamp: Date.now(),
                },
            });
            return;
        }
        console.log(`Read .gitignore file: ${gitignored}`);
        // If input files change we queue a synth to be run
        this.sourceFileWatcher = chokidar.watch(".", {
            ignored: gitignored,
            cwd: process.cwd(),
            ignoreInitial: true,
        });
        this.sourceFileWatcher.on("ready", () => console.log("srcdir watcher ready"));
        ["change", "add"].forEach((event) => {
            if (this.sourceFileWatcher)
                this.sourceFileWatcher.on(event, (path) => {
                    console.log(`synth - path changed: ${event} ${path}`);
                    this.queueAction("SYNTH");
                });
        });
        // If out dir files change we queue a deploy to be run
        // The runDeploy() method will check if files of the
        // currently watched stack changed
        this.outDirWatcher = chokidar.watch(this.targetDir, {
            ignored: ["**/.terraform/**", "**/.terraform.lock.hcl", "*/*/*/plan"],
            cwd: process.cwd(),
            ignoreInitial: true,
        });
        this.outDirWatcher.on("ready", () => console.log("outdir watcher ready"));
        ["change", "add"].forEach((event) => {
            if (this.outDirWatcher)
                this.outDirWatcher.on(event, (path) => {
                    console.log(`outdir - path changed: ${event} ${path}`);
                    this.queueAction("DEPLOY");
                });
        });
        // Queue initial synth to get things started
        await this.queueAction("SYNTH");
        await checkpoint_1.sendTelemetry("watch", { event: "start" });
        this.startHandlingActions();
    }
    async queueAction(action, priority = false) {
        // only enqueue if not already enqueued anyway
        if (!this.actionQueue.includes(action)) {
            // priority = run next
            if (priority)
                this.actionQueue.unshift(action);
            else
                this.actionQueue.push(action);
        }
        console.log(`currently queued actions: ${this.actionQueue.join(", ")}`);
    }
    async startHandlingActions() {
        while (this.isRunning()) {
            const nextAction = this.actionQueue.shift();
            if (nextAction)
                console.log(`Handling next action: ${nextAction}`);
            try {
                switch (nextAction) {
                    case "SYNTH": {
                        await this.runSynth();
                        break;
                    }
                    case "INIT": {
                        await this.runInit();
                        break;
                    }
                    case "DEPLOY": {
                        await this.runDeploy();
                        break;
                    }
                    case undefined: {
                        // this is hacky but makes it very easy to keep this alive in
                        // a loop even if no events are currently enqueued. This whole
                        // queue implemenation will probably be replaced by a state
                        // machine in the future.
                        this.updateState({ status: "IDLE" });
                        await new Promise((resolve) => setTimeout(resolve, 100));
                        break;
                    }
                    default: {
                        console.warn(`warning: received unknown action ${nextAction} - ignoring it`);
                        break;
                    }
                }
            }
            catch (e) {
                if (e instanceof RecoverableError) {
                    this.updateState({
                        error: {
                            message: e.message,
                            recoverable: true,
                            origin: e.origin,
                            timestamp: Date.now(),
                        },
                    });
                }
                else {
                    throw e;
                }
            }
        }
    }
    async stop() {
        if (this.sourceFileWatcher)
            await this.sourceFileWatcher.close();
        if (this.outDirWatcher)
            await this.outDirWatcher.close();
        this.actionQueue = [];
        this.running = false;
    }
}
exports.WatchClient = WatchClient;
//# sourceMappingURL=data:application/json;base64,