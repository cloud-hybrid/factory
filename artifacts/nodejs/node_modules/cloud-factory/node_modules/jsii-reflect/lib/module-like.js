"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleLike = void 0;
const class_1 = require("./class");
const enum_1 = require("./enum");
const interface_1 = require("./interface");
class ModuleLike {
    constructor(system) {
        this.system = system;
        /**
         * Cache for the results of `tryFindType`.
         */
        this.typeLocatorCache = new Map();
    }
    get submodules() {
        return Object.values(this.submoduleMap);
    }
    get types() {
        return Object.values(this.typeMap);
    }
    get classes() {
        return this.types
            .filter((t) => t instanceof class_1.ClassType)
            .map((t) => t);
    }
    get interfaces() {
        return this.types
            .filter((t) => t instanceof interface_1.InterfaceType)
            .map((t) => t);
    }
    get enums() {
        return this.types
            .filter((t) => t instanceof enum_1.EnumType)
            .map((t) => t);
    }
    tryFindType(fqn) {
        if (this.typeLocatorCache.has(fqn)) {
            return this.typeLocatorCache.get(fqn);
        }
        const ownType = this.typeMap[fqn];
        if (ownType != null) {
            this.typeLocatorCache.set(fqn, ownType);
            return ownType;
        }
        if (!fqn.startsWith(`${this.fqn}.`)) {
            this.typeLocatorCache.set(fqn, undefined);
            return undefined;
        }
        const myFqnLength = this.fqn.split('.').length;
        const subFqn = fqn
            .split('.')
            .slice(0, myFqnLength + 1)
            .join('.');
        const sub = this.submoduleMap[subFqn];
        const submoduleType = sub === null || sub === void 0 ? void 0 : sub.tryFindType(fqn);
        this.typeLocatorCache.set(fqn, submoduleType);
        return submoduleType;
    }
}
exports.ModuleLike = ModuleLike;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLWxpa2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtb2R1bGUtbGlrZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxtQ0FBb0M7QUFDcEMsaUNBQWtDO0FBQ2xDLDJDQUE0QztBQUs1QyxNQUFzQixVQUFVO0lBb0I5QixZQUFzQyxNQUFrQjtRQUFsQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBTHhEOztXQUVHO1FBQ2MscUJBQWdCLEdBQUcsSUFBSSxHQUFHLEVBQTRCLENBQUM7SUFFYixDQUFDO0lBRTVELElBQVcsVUFBVTtRQUNuQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUFXLEtBQUs7UUFDZCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFXLE9BQU87UUFDaEIsT0FBTyxJQUFJLENBQUMsS0FBSzthQUNkLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxZQUFZLGlCQUFTLENBQUM7YUFDckMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFjLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLEtBQUs7YUFDZCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsWUFBWSx5QkFBYSxDQUFDO2FBQ3pDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBa0IsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFXLEtBQUs7UUFDZCxPQUFPLElBQUksQ0FBQyxLQUFLO2FBQ2QsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFlBQVksZUFBUSxDQUFDO2FBQ3BDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBYSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVNLFdBQVcsQ0FBQyxHQUFXO1FBQzVCLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNsQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkM7UUFFRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtZQUNuQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN4QyxPQUFPLE9BQU8sQ0FBQztTQUNoQjtRQUVELElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDMUMsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDL0MsTUFBTSxNQUFNLEdBQUcsR0FBRzthQUNmLEtBQUssQ0FBQyxHQUFHLENBQUM7YUFDVixLQUFLLENBQUMsQ0FBQyxFQUFFLFdBQVcsR0FBRyxDQUFDLENBQUM7YUFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QyxNQUFNLGFBQWEsR0FBRyxHQUFHLGFBQUgsR0FBRyx1QkFBSCxHQUFHLENBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQTFFRCxnQ0EwRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBqc2lpIGZyb20gJ0Bqc2lpL3NwZWMnO1xuXG5pbXBvcnQgeyBDbGFzc1R5cGUgfSBmcm9tICcuL2NsYXNzJztcbmltcG9ydCB7IEVudW1UeXBlIH0gZnJvbSAnLi9lbnVtJztcbmltcG9ydCB7IEludGVyZmFjZVR5cGUgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBTdWJtb2R1bGUgfSBmcm9tICcuL3N1Ym1vZHVsZSc7XG5pbXBvcnQgeyBUeXBlIH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IFR5cGVTeXN0ZW0gfSBmcm9tICcuL3R5cGUtc3lzdGVtJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE1vZHVsZUxpa2Uge1xuICBwdWJsaWMgZGVjbGFyZSBhYnN0cmFjdCByZWFkb25seSBmcW46IHN0cmluZztcblxuICAvKipcbiAgICogQSBtYXAgb2YgdGFyZ2V0IG5hbWUgdG8gY29uZmlndXJhdGlvbiwgd2hpY2ggaXMgdXNlZCB3aGVuIGdlbmVyYXRpbmcgcGFja2FnZXMgZm9yXG4gICAqIHZhcmlvdXMgbGFuZ3VhZ2VzLlxuICAgKi9cbiAgcHVibGljIGRlY2xhcmUgYWJzdHJhY3QgcmVhZG9ubHkgdGFyZ2V0cz86IGpzaWkuQXNzZW1ibHlUYXJnZXRzO1xuICBwdWJsaWMgZGVjbGFyZSBhYnN0cmFjdCByZWFkb25seSByZWFkbWU/OiBqc2lpLlJlYWRNZTtcblxuICBwcm90ZWN0ZWQgZGVjbGFyZSBhYnN0cmFjdCByZWFkb25seSBzdWJtb2R1bGVNYXA6IFJlYWRvbmx5PFxuICAgIFJlY29yZDxzdHJpbmcsIFN1Ym1vZHVsZT5cbiAgPjtcbiAgcHJvdGVjdGVkIGRlY2xhcmUgYWJzdHJhY3QgcmVhZG9ubHkgdHlwZU1hcDogUmVhZG9ubHk8UmVjb3JkPHN0cmluZywgVHlwZT4+O1xuXG4gIC8qKlxuICAgKiBDYWNoZSBmb3IgdGhlIHJlc3VsdHMgb2YgYHRyeUZpbmRUeXBlYC5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgdHlwZUxvY2F0b3JDYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCBUeXBlIHwgdW5kZWZpbmVkPigpO1xuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgc3lzdGVtOiBUeXBlU3lzdGVtKSB7fVxuXG4gIHB1YmxpYyBnZXQgc3VibW9kdWxlcygpOiByZWFkb25seSBTdWJtb2R1bGVbXSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5zdWJtb2R1bGVNYXApO1xuICB9XG5cbiAgcHVibGljIGdldCB0eXBlcygpOiByZWFkb25seSBUeXBlW10ge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMudHlwZU1hcCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGNsYXNzZXMoKTogcmVhZG9ubHkgQ2xhc3NUeXBlW10ge1xuICAgIHJldHVybiB0aGlzLnR5cGVzXG4gICAgICAuZmlsdGVyKCh0KSA9PiB0IGluc3RhbmNlb2YgQ2xhc3NUeXBlKVxuICAgICAgLm1hcCgodCkgPT4gdCBhcyBDbGFzc1R5cGUpO1xuICB9XG5cbiAgcHVibGljIGdldCBpbnRlcmZhY2VzKCk6IHJlYWRvbmx5IEludGVyZmFjZVR5cGVbXSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZXNcbiAgICAgIC5maWx0ZXIoKHQpID0+IHQgaW5zdGFuY2VvZiBJbnRlcmZhY2VUeXBlKVxuICAgICAgLm1hcCgodCkgPT4gdCBhcyBJbnRlcmZhY2VUeXBlKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZW51bXMoKTogcmVhZG9ubHkgRW51bVR5cGVbXSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZXNcbiAgICAgIC5maWx0ZXIoKHQpID0+IHQgaW5zdGFuY2VvZiBFbnVtVHlwZSlcbiAgICAgIC5tYXAoKHQpID0+IHQgYXMgRW51bVR5cGUpO1xuICB9XG5cbiAgcHVibGljIHRyeUZpbmRUeXBlKGZxbjogc3RyaW5nKTogVHlwZSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMudHlwZUxvY2F0b3JDYWNoZS5oYXMoZnFuKSkge1xuICAgICAgcmV0dXJuIHRoaXMudHlwZUxvY2F0b3JDYWNoZS5nZXQoZnFuKTtcbiAgICB9XG5cbiAgICBjb25zdCBvd25UeXBlID0gdGhpcy50eXBlTWFwW2Zxbl07XG4gICAgaWYgKG93blR5cGUgIT0gbnVsbCkge1xuICAgICAgdGhpcy50eXBlTG9jYXRvckNhY2hlLnNldChmcW4sIG93blR5cGUpO1xuICAgICAgcmV0dXJuIG93blR5cGU7XG4gICAgfVxuXG4gICAgaWYgKCFmcW4uc3RhcnRzV2l0aChgJHt0aGlzLmZxbn0uYCkpIHtcbiAgICAgIHRoaXMudHlwZUxvY2F0b3JDYWNoZS5zZXQoZnFuLCB1bmRlZmluZWQpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCBteUZxbkxlbmd0aCA9IHRoaXMuZnFuLnNwbGl0KCcuJykubGVuZ3RoO1xuICAgIGNvbnN0IHN1YkZxbiA9IGZxblxuICAgICAgLnNwbGl0KCcuJylcbiAgICAgIC5zbGljZSgwLCBteUZxbkxlbmd0aCArIDEpXG4gICAgICAuam9pbignLicpO1xuICAgIGNvbnN0IHN1YiA9IHRoaXMuc3VibW9kdWxlTWFwW3N1YkZxbl07XG4gICAgY29uc3Qgc3VibW9kdWxlVHlwZSA9IHN1Yj8udHJ5RmluZFR5cGUoZnFuKTtcbiAgICB0aGlzLnR5cGVMb2NhdG9yQ2FjaGUuc2V0KGZxbiwgc3VibW9kdWxlVHlwZSk7XG4gICAgcmV0dXJuIHN1Ym1vZHVsZVR5cGU7XG4gIH1cbn1cbiJdfQ==