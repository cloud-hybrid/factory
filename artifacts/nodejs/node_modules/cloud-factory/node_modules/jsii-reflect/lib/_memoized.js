"use strict";
/* eslint-disable @typescript-eslint/ban-types -- WeakMap<T, _> demands T extends object */
Object.defineProperty(exports, "__esModule", { value: true });
exports.memoized = void 0;
const CACHE = new WeakMap();
/**
 * Decorates property readers for readonly properties so that their results are
 * memoized in a `WeakMap`-based cache. Those properties will consequently be
 * computed exactly once.
 *
 * This can only be applied to property accessors (`public get foo(): any`), and not to
 * property declarations (`public readonly foo: any`).
 */
function memoized(_prototype, propertyKey, descriptor) {
    if (!descriptor.get) {
        throw new Error(`@memoized can only be applied to property getters!`);
    }
    if (descriptor.set) {
        throw new Error(`@memoized can only be applied to readonly properties!`);
    }
    const original = descriptor.get;
    descriptor.get = function memoizedGet() {
        let cache = CACHE.get(this);
        if (cache == null) {
            cache = new Map();
            CACHE.set(this, cache);
        }
        if (cache.has(propertyKey)) {
            const result = cache.get(propertyKey);
            if (Array.isArray(result)) {
                // Return a copy of arrays as a precaution
                return Array.from(result);
            }
            return result;
        }
        const result = original.call(this);
        // If the result is an array, memoize a copy for safety.
        cache.set(propertyKey, Array.isArray(result) ? Array.from(result) : result);
        return result;
    };
}
exports.memoized = memoized;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX21lbW9pemVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiX21lbW9pemVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwyRkFBMkY7OztBQUUzRixNQUFNLEtBQUssR0FBRyxJQUFJLE9BQU8sRUFBZ0MsQ0FBQztBQUUxRDs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsUUFBUSxDQUN0QixVQUFtQixFQUNuQixXQUFtQixFQUNuQixVQUE4QjtJQUU5QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLG9EQUFvRCxDQUFDLENBQUM7S0FDdkU7SUFDRCxJQUFJLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0tBQzFFO0lBRUQsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQztJQUNoQyxVQUFVLENBQUMsR0FBRyxHQUFHLFNBQVMsV0FBVztRQUNuQyxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtZQUNqQixLQUFLLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNsQixLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN4QjtRQUNELElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUMxQixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3RDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDekIsMENBQTBDO2dCQUMxQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDM0I7WUFDRCxPQUFPLE1BQU0sQ0FBQztTQUNmO1FBQ0QsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyx3REFBd0Q7UUFDeEQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUUsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQWhDRCw0QkFnQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzIC0tIFdlYWtNYXA8VCwgXz4gZGVtYW5kcyBUIGV4dGVuZHMgb2JqZWN0ICovXG5cbmNvbnN0IENBQ0hFID0gbmV3IFdlYWtNYXA8b2JqZWN0LCBNYXA8c3RyaW5nLCB1bmtub3duPj4oKTtcblxuLyoqXG4gKiBEZWNvcmF0ZXMgcHJvcGVydHkgcmVhZGVycyBmb3IgcmVhZG9ubHkgcHJvcGVydGllcyBzbyB0aGF0IHRoZWlyIHJlc3VsdHMgYXJlXG4gKiBtZW1vaXplZCBpbiBhIGBXZWFrTWFwYC1iYXNlZCBjYWNoZS4gVGhvc2UgcHJvcGVydGllcyB3aWxsIGNvbnNlcXVlbnRseSBiZVxuICogY29tcHV0ZWQgZXhhY3RseSBvbmNlLlxuICpcbiAqIFRoaXMgY2FuIG9ubHkgYmUgYXBwbGllZCB0byBwcm9wZXJ0eSBhY2Nlc3NvcnMgKGBwdWJsaWMgZ2V0IGZvbygpOiBhbnlgKSwgYW5kIG5vdCB0b1xuICogcHJvcGVydHkgZGVjbGFyYXRpb25zIChgcHVibGljIHJlYWRvbmx5IGZvbzogYW55YCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplZChcbiAgX3Byb3RvdHlwZTogdW5rbm93bixcbiAgcHJvcGVydHlLZXk6IHN0cmluZyxcbiAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuKTogdm9pZCB7XG4gIGlmICghZGVzY3JpcHRvci5nZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEBtZW1vaXplZCBjYW4gb25seSBiZSBhcHBsaWVkIHRvIHByb3BlcnR5IGdldHRlcnMhYCk7XG4gIH1cbiAgaWYgKGRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBAbWVtb2l6ZWQgY2FuIG9ubHkgYmUgYXBwbGllZCB0byByZWFkb25seSBwcm9wZXJ0aWVzIWApO1xuICB9XG5cbiAgY29uc3Qgb3JpZ2luYWwgPSBkZXNjcmlwdG9yLmdldDtcbiAgZGVzY3JpcHRvci5nZXQgPSBmdW5jdGlvbiBtZW1vaXplZEdldCh0aGlzOiBvYmplY3QpOiB1bmtub3duIHtcbiAgICBsZXQgY2FjaGUgPSBDQUNIRS5nZXQodGhpcyk7XG4gICAgaWYgKGNhY2hlID09IG51bGwpIHtcbiAgICAgIGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgQ0FDSEUuc2V0KHRoaXMsIGNhY2hlKTtcbiAgICB9XG4gICAgaWYgKGNhY2hlLmhhcyhwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNhY2hlLmdldChwcm9wZXJ0eUtleSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgICAgIC8vIFJldHVybiBhIGNvcHkgb2YgYXJyYXlzIGFzIGEgcHJlY2F1dGlvblxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShyZXN1bHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gb3JpZ2luYWwuY2FsbCh0aGlzKTtcbiAgICAvLyBJZiB0aGUgcmVzdWx0IGlzIGFuIGFycmF5LCBtZW1vaXplIGEgY29weSBmb3Igc2FmZXR5LlxuICAgIGNhY2hlLnNldChwcm9wZXJ0eUtleSwgQXJyYXkuaXNBcnJheShyZXN1bHQpID8gQXJyYXkuZnJvbShyZXN1bHQpIDogcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuIl19