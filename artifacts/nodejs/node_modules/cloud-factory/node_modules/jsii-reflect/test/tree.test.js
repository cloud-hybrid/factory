"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const tree_1 = require("../lib/tree");
const type_system_1 = require("../lib/type-system");
const typeSystem = new type_system_1.TypeSystem();
beforeAll(() => typeSystem.loadModule(path_1.dirname(require.resolve('jsii-calc/package.json'))));
test('defaults', () => {
    const stream = new StringWriter();
    new tree_1.TypeSystemTree(typeSystem, { colors: false }).printTree(stream);
    expect(stream.stringContent).toMatchSnapshot();
});
test('showAll', () => {
    const stream = new StringWriter();
    new tree_1.TypeSystemTree(typeSystem, { colors: false, showAll: true }).printTree(stream);
    expect(stream.stringContent).toMatchSnapshot();
});
test('types', () => {
    const stream = new StringWriter();
    new tree_1.TypeSystemTree(typeSystem, { colors: false, types: true }).printTree(stream);
    expect(stream.stringContent).toMatchSnapshot();
});
test('members', () => {
    const stream = new StringWriter();
    new tree_1.TypeSystemTree(typeSystem, { colors: false, members: true }).printTree(stream);
    expect(stream.stringContent).toMatchSnapshot();
});
test('inheritance', () => {
    const stream = new StringWriter();
    new tree_1.TypeSystemTree(typeSystem, {
        colors: false,
        inheritance: true,
    }).printTree(stream);
    expect(stream.stringContent).toMatchSnapshot();
});
test('signatures', () => {
    const stream = new StringWriter();
    new tree_1.TypeSystemTree(typeSystem, { colors: false, signatures: true }).printTree(stream);
    expect(stream.stringContent).toMatchSnapshot();
});
class StringWriter {
    constructor() {
        this.buffer = Buffer.alloc(0);
    }
    write(chunk, _encoding, cb) {
        this.buffer = Buffer.concat([this.buffer, Buffer.from(chunk)]);
        if (cb != null) {
            cb();
        }
        return true;
    }
    get stringContent() {
        return this.buffer.toString('utf-8');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidHJlZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsK0JBQStCO0FBRS9CLHNDQUE2QztBQUM3QyxvREFBZ0Q7QUFFaEQsTUFBTSxVQUFVLEdBQUcsSUFBSSx3QkFBVSxFQUFFLENBQUM7QUFFcEMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUNiLFVBQVUsQ0FBQyxVQUFVLENBQUMsY0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQzFFLENBQUM7QUFFRixJQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtJQUNwQixNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBQ2xDLElBQUkscUJBQWMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNqRCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO0lBQ25CLE1BQU0sTUFBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFDbEMsSUFBSSxxQkFBYyxDQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsU0FBUyxDQUN4RSxNQUFNLENBQ1AsQ0FBQztJQUNGLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDakQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtJQUNqQixNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBQ2xDLElBQUkscUJBQWMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FDdEUsTUFBTSxDQUNQLENBQUM7SUFDRixNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ2pELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7SUFDbkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUNsQyxJQUFJLHFCQUFjLENBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQ3hFLE1BQU0sQ0FDUCxDQUFDO0lBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNqRCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO0lBQ3ZCLE1BQU0sTUFBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFDbEMsSUFBSSxxQkFBYyxDQUFDLFVBQVUsRUFBRTtRQUM3QixNQUFNLEVBQUUsS0FBSztRQUNiLFdBQVcsRUFBRSxJQUFJO0tBQ2xCLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztBQUNqRCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO0lBQ3RCLE1BQU0sTUFBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFDbEMsSUFBSSxxQkFBYyxDQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsU0FBUyxDQUMzRSxNQUFNLENBQ1AsQ0FBQztJQUNGLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7QUFDakQsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLFlBQVk7SUFBbEI7UUFDVSxXQUFNLEdBQVcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQW1CM0MsQ0FBQztJQWZRLEtBQUssQ0FDVixLQUFzQixFQUN0QixTQUFpQyxFQUNqQyxFQUFlO1FBRWYsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvRCxJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUU7WUFDZCxFQUFFLEVBQUUsQ0FBQztTQUNOO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpbnRlciB9IGZyb20gJ29vLWFzY2lpLXRyZWUnO1xuaW1wb3J0IHsgZGlybmFtZSB9IGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBUeXBlU3lzdGVtVHJlZSB9IGZyb20gJy4uL2xpYi90cmVlJztcbmltcG9ydCB7IFR5cGVTeXN0ZW0gfSBmcm9tICcuLi9saWIvdHlwZS1zeXN0ZW0nO1xuXG5jb25zdCB0eXBlU3lzdGVtID0gbmV3IFR5cGVTeXN0ZW0oKTtcblxuYmVmb3JlQWxsKCgpID0+XG4gIHR5cGVTeXN0ZW0ubG9hZE1vZHVsZShkaXJuYW1lKHJlcXVpcmUucmVzb2x2ZSgnanNpaS1jYWxjL3BhY2thZ2UuanNvbicpKSksXG4pO1xuXG50ZXN0KCdkZWZhdWx0cycsICgpID0+IHtcbiAgY29uc3Qgc3RyZWFtID0gbmV3IFN0cmluZ1dyaXRlcigpO1xuICBuZXcgVHlwZVN5c3RlbVRyZWUodHlwZVN5c3RlbSwgeyBjb2xvcnM6IGZhbHNlIH0pLnByaW50VHJlZShzdHJlYW0pO1xuICBleHBlY3Qoc3RyZWFtLnN0cmluZ0NvbnRlbnQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xufSk7XG5cbnRlc3QoJ3Nob3dBbGwnLCAoKSA9PiB7XG4gIGNvbnN0IHN0cmVhbSA9IG5ldyBTdHJpbmdXcml0ZXIoKTtcbiAgbmV3IFR5cGVTeXN0ZW1UcmVlKHR5cGVTeXN0ZW0sIHsgY29sb3JzOiBmYWxzZSwgc2hvd0FsbDogdHJ1ZSB9KS5wcmludFRyZWUoXG4gICAgc3RyZWFtLFxuICApO1xuICBleHBlY3Qoc3RyZWFtLnN0cmluZ0NvbnRlbnQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xufSk7XG5cbnRlc3QoJ3R5cGVzJywgKCkgPT4ge1xuICBjb25zdCBzdHJlYW0gPSBuZXcgU3RyaW5nV3JpdGVyKCk7XG4gIG5ldyBUeXBlU3lzdGVtVHJlZSh0eXBlU3lzdGVtLCB7IGNvbG9yczogZmFsc2UsIHR5cGVzOiB0cnVlIH0pLnByaW50VHJlZShcbiAgICBzdHJlYW0sXG4gICk7XG4gIGV4cGVjdChzdHJlYW0uc3RyaW5nQ29udGVudCkudG9NYXRjaFNuYXBzaG90KCk7XG59KTtcblxudGVzdCgnbWVtYmVycycsICgpID0+IHtcbiAgY29uc3Qgc3RyZWFtID0gbmV3IFN0cmluZ1dyaXRlcigpO1xuICBuZXcgVHlwZVN5c3RlbVRyZWUodHlwZVN5c3RlbSwgeyBjb2xvcnM6IGZhbHNlLCBtZW1iZXJzOiB0cnVlIH0pLnByaW50VHJlZShcbiAgICBzdHJlYW0sXG4gICk7XG4gIGV4cGVjdChzdHJlYW0uc3RyaW5nQ29udGVudCkudG9NYXRjaFNuYXBzaG90KCk7XG59KTtcblxudGVzdCgnaW5oZXJpdGFuY2UnLCAoKSA9PiB7XG4gIGNvbnN0IHN0cmVhbSA9IG5ldyBTdHJpbmdXcml0ZXIoKTtcbiAgbmV3IFR5cGVTeXN0ZW1UcmVlKHR5cGVTeXN0ZW0sIHtcbiAgICBjb2xvcnM6IGZhbHNlLFxuICAgIGluaGVyaXRhbmNlOiB0cnVlLFxuICB9KS5wcmludFRyZWUoc3RyZWFtKTtcbiAgZXhwZWN0KHN0cmVhbS5zdHJpbmdDb250ZW50KS50b01hdGNoU25hcHNob3QoKTtcbn0pO1xuXG50ZXN0KCdzaWduYXR1cmVzJywgKCkgPT4ge1xuICBjb25zdCBzdHJlYW0gPSBuZXcgU3RyaW5nV3JpdGVyKCk7XG4gIG5ldyBUeXBlU3lzdGVtVHJlZSh0eXBlU3lzdGVtLCB7IGNvbG9yczogZmFsc2UsIHNpZ25hdHVyZXM6IHRydWUgfSkucHJpbnRUcmVlKFxuICAgIHN0cmVhbSxcbiAgKTtcbiAgZXhwZWN0KHN0cmVhbS5zdHJpbmdDb250ZW50KS50b01hdGNoU25hcHNob3QoKTtcbn0pO1xuXG5jbGFzcyBTdHJpbmdXcml0ZXIgaW1wbGVtZW50cyBQcmludGVyIHtcbiAgcHJpdmF0ZSBidWZmZXI6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygwKTtcblxuICBwdWJsaWMgd3JpdGUoYnVmZmVyOiBCdWZmZXIgfCBzdHJpbmcsIGNiPzogKCkgPT4gdm9pZCk6IGJvb2xlYW47XG4gIHB1YmxpYyB3cml0ZShzdHI6IHN0cmluZywgZW5jb2Rpbmc/OiBzdHJpbmcsIGNiPzogKCkgPT4gdm9pZCk6IGJvb2xlYW47XG4gIHB1YmxpYyB3cml0ZShcbiAgICBjaHVuazogQnVmZmVyIHwgc3RyaW5nLFxuICAgIF9lbmNvZGluZz86IHN0cmluZyB8ICgoKSA9PiB2b2lkKSxcbiAgICBjYj86ICgpID0+IHZvaWQsXG4gICk6IGJvb2xlYW4ge1xuICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmNvbmNhdChbdGhpcy5idWZmZXIsIEJ1ZmZlci5mcm9tKGNodW5rKV0pO1xuICAgIGlmIChjYiAhPSBudWxsKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgc3RyaW5nQ29udGVudCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmJ1ZmZlci50b1N0cmluZygndXRmLTgnKTtcbiAgfVxufVxuIl19