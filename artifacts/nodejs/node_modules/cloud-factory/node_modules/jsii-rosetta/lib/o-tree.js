"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderTree = exports.OTreeSink = exports.UnknownSyntax = exports.NO_SYNTAX = exports.OTree = void 0;
/**
 * "Output" Tree
 *
 * Tree-like structure that holds sequences of trees and strings, which
 * can be rendered to an output sink.
 */
class OTree {
    constructor(prefix, children, options = {}) {
        this.options = options;
        this.prefix = OTree.simplify(prefix);
        this.children = OTree.simplify(children !== null && children !== void 0 ? children : []);
        this.attachComment = !!options.canBreakLine;
    }
    static simplify(xs) {
        return xs.filter(notUndefined).filter(notEmpty);
    }
    /**
     * Set the span in the source file this tree node relates to
     */
    setSpan(start, end) {
        this.span = { start, end };
    }
    write(sink) {
        var _a, _b;
        if (!sink.tagOnce(this.options.renderOnce)) {
            return;
        }
        const meVisible = sink.renderingForSpan(this.span);
        for (const x of this.prefix) {
            sink.write(x);
        }
        const popIndent = sink.requestIndentChange(meVisible ? (_a = this.options.indent) !== null && _a !== void 0 ? _a : 0 : 0);
        let mark = sink.mark();
        for (const child of (_b = this.children) !== null && _b !== void 0 ? _b : []) {
            if (this.options.separator && mark.wroteNonWhitespaceSinceMark) {
                sink.write(this.options.separator);
            }
            mark = sink.mark();
            sink.write(child);
        }
        popIndent();
        if (this.options.suffix) {
            sink.renderingForSpan(this.span);
            sink.write(this.options.suffix);
        }
    }
    get isEmpty() {
        return this.prefix.length + this.children.length === 0;
    }
    toString() {
        return `<INCORRECTLY STRINGIFIED ${this.prefix.toString()}>`;
    }
}
exports.OTree = OTree;
exports.NO_SYNTAX = new OTree([]);
class UnknownSyntax extends OTree {
}
exports.UnknownSyntax = UnknownSyntax;
/**
 * Output sink for OTree objects
 *
 * Maintains state about what has been rendered supports suppressing code
 * fragments based on their tagged source location.
 *
 * Basically: manages the state that was too hard to manage in the
 * tree :).
 */
class OTreeSink {
    constructor(options = {}) {
        this.options = options;
        this.indentLevels = [0];
        this.fragments = new Array();
        this.singletonsRendered = new Set();
        this.pendingIndentChange = 0;
        this.rendering = true;
    }
    tagOnce(key) {
        if (key === undefined) {
            return true;
        }
        if (this.singletonsRendered.has(key)) {
            return false;
        }
        this.singletonsRendered.add(key);
        return true;
    }
    /**
     * Get a mark for the current sink output location
     *
     * Marks can be used to query about things that have been written to output.
     */
    mark() {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const self = this;
        const markIndex = this.fragments.length;
        return {
            get wroteNonWhitespaceSinceMark() {
                return self.fragments.slice(markIndex).some((s) => /[^\s]/.exec(s) != null);
            },
        };
    }
    write(text) {
        if (text instanceof OTree) {
            text.write(this);
        }
        else {
            if (!this.rendering) {
                return;
            }
            if (containsNewline(text)) {
                this.applyPendingIndentChange();
            }
            this.append(text.replace(/\n/g, `\n${' '.repeat(this.currentIndent)}`));
        }
    }
    renderingForSpan(span) {
        if (span && this.options.visibleSpans) {
            this.rendering = this.options.visibleSpans.fullyContainsSpan(span);
        }
        return this.rendering;
    }
    requestIndentChange(x) {
        if (x === 0) {
            return () => undefined;
        }
        this.pendingIndentChange = x;
        const currentIndentState = this.indentLevels.length;
        // Return a pop function which will reset to the current indent state,
        // regardless of whether the indent was actually applied or not.
        return () => {
            this.indentLevels.splice(currentIndentState);
            this.pendingIndentChange = 0;
        };
    }
    toString() {
        // Strip trailing whitespace from every line, and empty lines from the start and end
        return this.fragments
            .join('')
            .replace(/[ \t]+$/gm, '')
            .replace(/^\n+/, '')
            .replace(/\n+$/, '');
    }
    append(x) {
        this.fragments.push(x);
    }
    applyPendingIndentChange() {
        if (this.pendingIndentChange !== 0) {
            this.indentLevels.push(this.currentIndent + this.pendingIndentChange);
            this.pendingIndentChange = 0;
        }
    }
    get currentIndent() {
        return this.indentLevels[this.indentLevels.length - 1];
    }
}
exports.OTreeSink = OTreeSink;
function notUndefined(x) {
    return x !== undefined;
}
function notEmpty(x) {
    return x instanceof OTree ? !x.isEmpty : x !== '';
}
function renderTree(tree, options) {
    const sink = new OTreeSink(options);
    tree.write(sink);
    return sink.toString();
}
exports.renderTree = renderTree;
function containsNewline(x) {
    return x.includes('\n');
}
//# sourceMappingURL=data:application/json;base64,