"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JavaDocRenderer = void 0;
const escapes_1 = require("./escapes");
const markdown_renderer_1 = require("./markdown-renderer");
const ESCAPE = escapes_1.makeJavaEscaper();
/**
 * A renderer that will render a CommonMark tree to JavaDoc comments
 *
 * Mostly concerns itself with code annotations and escaping; tags that the
 * XML formatter doesn't have equivalents for will be rendered back to MarkDown.
 */
class JavaDocRenderer extends markdown_renderer_1.MarkdownRenderer {
    block_quote(_node, context) {
        return `<blockquote>${context.content()}</blockquote>`;
    }
    code(node, _context) {
        return `<code>${ESCAPE.text(node.literal)}</code>`;
    }
    /**
     * Render code blocks for JavaDoc
     *
     * See https://reflectoring.io/howto-format-code-snippets-in-javadoc/
     *
     * Since we need to display @ inside our examples and we don't have to
     * care about writability, the most robust option seems to be <pre>
     * tags with escaping of bad characters.
     */
    code_block(node, _context) {
        return markdown_renderer_1.para(`<blockquote><pre>\n${ESCAPE.text(node.literal)}</pre></blockquote>`);
    }
    text(node, _context) {
        var _a;
        return (_a = ESCAPE.text(node.literal)) !== null && _a !== void 0 ? _a : '';
    }
    link(node, context) {
        var _a;
        return `<a href="${(_a = ESCAPE.attribute(node.destination)) !== null && _a !== void 0 ? _a : ''}">${context.content()}</a>`;
    }
    document(_node, context) {
        return markdown_renderer_1.stripTrailingWhitespace(specialDocCommentEscape(collapseParaJava(context.content())));
    }
    heading(node, context) {
        return markdown_renderer_1.para(`<h${node.level}>${context.content()}</h${node.level}>`);
    }
    list(node, context) {
        const tag = node.listType === 'bullet' ? 'ul' : 'ol';
        return markdown_renderer_1.para(`<${tag}>\n${context.content()}</${tag}>`);
    }
    item(_node, context) {
        return `<li>${markdown_renderer_1.stripPara(context.content())}</li>\n`;
    }
    image(node, context) {
        var _a;
        return `<img alt="${ESCAPE.text2attr(context.content())}" src="${(_a = ESCAPE.attribute(node.destination)) !== null && _a !== void 0 ? _a : ''}">`;
    }
    emph(_node, context) {
        return `<em>${context.content()}</em>`;
    }
    strong(_node, context) {
        return `<strong>${context.content()}</strong>`;
    }
    thematic_break(_node, _context) {
        return markdown_renderer_1.para('<hr>');
    }
}
exports.JavaDocRenderer = JavaDocRenderer;
function collapseParaJava(x) {
    return markdown_renderer_1.collapsePara(x, '\n<p>\n');
}
/**
 * A final single-pass escape of '* /' which might otherwise end a doc comment.
 *
 * We have to do this in one final pass because I've observed that in running
 * next, the MarkDown parser will parse the two symbols to:
 *
 *    [..., text('*'), text('/'), ...]
 *
 * which means we have no other ability to observe the two-character combination
 * properly.
 */
function specialDocCommentEscape(x) {
    return x.replace(new RegExp('\\*\\/', 'g'), '*&#47;');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamF2YWRvYy1yZW5kZXJlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImphdmFkb2MtcmVuZGVyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsdUNBQTRDO0FBRTVDLDJEQUErRztBQUUvRyxNQUFNLE1BQU0sR0FBRyx5QkFBZSxFQUFFLENBQUM7QUFFakM7Ozs7O0dBS0c7QUFDSCxNQUFhLGVBQWdCLFNBQVEsb0NBQWdCO0lBQzVDLFdBQVcsQ0FBQyxLQUFjLEVBQUUsT0FBd0I7UUFDekQsT0FBTyxlQUFlLE9BQU8sQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDO0lBQ3pELENBQUM7SUFFTSxJQUFJLENBQUMsSUFBYSxFQUFFLFFBQXlCO1FBQ2xELE9BQU8sU0FBUyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ3JELENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLFVBQVUsQ0FBQyxJQUFhLEVBQUUsUUFBeUI7UUFDeEQsT0FBTyx3QkFBSSxDQUFDLHNCQUFzQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRU0sSUFBSSxDQUFDLElBQWEsRUFBRSxRQUF5Qjs7UUFDbEQsYUFBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsbUNBQUksRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFTSxJQUFJLENBQUMsSUFBYSxFQUFFLE9BQXdCOztRQUNqRCxPQUFPLFlBQVksTUFBQSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsbUNBQUksRUFBRSxLQUFLLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO0lBQzFGLENBQUM7SUFFTSxRQUFRLENBQUMsS0FBYyxFQUFFLE9BQXdCO1FBQ3RELE9BQU8sMkNBQXVCLENBQUMsdUJBQXVCLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9GLENBQUM7SUFFTSxPQUFPLENBQUMsSUFBYSxFQUFFLE9BQXdCO1FBQ3BELE9BQU8sd0JBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFTSxJQUFJLENBQUMsSUFBYSxFQUFFLE9BQXdCO1FBQ2pELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUVyRCxPQUFPLHdCQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLE9BQU8sRUFBRSxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVNLElBQUksQ0FBQyxLQUFjLEVBQUUsT0FBd0I7UUFDbEQsT0FBTyxPQUFPLDZCQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQztJQUN0RCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQWEsRUFBRSxPQUF3Qjs7UUFDbEQsT0FBTyxhQUFhLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLFVBQVUsTUFBQSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsbUNBQUksRUFBRSxJQUFJLENBQUM7SUFDaEgsQ0FBQztJQUVNLElBQUksQ0FBQyxLQUFjLEVBQUUsT0FBd0I7UUFDbEQsT0FBTyxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDO0lBQ3pDLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBYyxFQUFFLE9BQXdCO1FBQ3BELE9BQU8sV0FBVyxPQUFPLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQztJQUNqRCxDQUFDO0lBRU0sY0FBYyxDQUFDLEtBQWMsRUFBRSxRQUF5QjtRQUM3RCxPQUFPLHdCQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEIsQ0FBQztDQUNGO0FBL0RELDBDQStEQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsQ0FBUztJQUNqQyxPQUFPLGdDQUFZLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsU0FBUyx1QkFBdUIsQ0FBQyxDQUFTO0lBQ3hDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDeEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNtIGZyb20gJ2NvbW1vbm1hcmsnO1xuXG5pbXBvcnQgeyBtYWtlSmF2YUVzY2FwZXIgfSBmcm9tICcuL2VzY2FwZXMnO1xuaW1wb3J0IHsgUmVuZGVyZXJDb250ZXh0IH0gZnJvbSAnLi9tYXJrZG93bic7XG5pbXBvcnQgeyBNYXJrZG93blJlbmRlcmVyLCBjb2xsYXBzZVBhcmEsIHBhcmEsIHN0cmlwVHJhaWxpbmdXaGl0ZXNwYWNlLCBzdHJpcFBhcmEgfSBmcm9tICcuL21hcmtkb3duLXJlbmRlcmVyJztcblxuY29uc3QgRVNDQVBFID0gbWFrZUphdmFFc2NhcGVyKCk7XG5cbi8qKlxuICogQSByZW5kZXJlciB0aGF0IHdpbGwgcmVuZGVyIGEgQ29tbW9uTWFyayB0cmVlIHRvIEphdmFEb2MgY29tbWVudHNcbiAqXG4gKiBNb3N0bHkgY29uY2VybnMgaXRzZWxmIHdpdGggY29kZSBhbm5vdGF0aW9ucyBhbmQgZXNjYXBpbmc7IHRhZ3MgdGhhdCB0aGVcbiAqIFhNTCBmb3JtYXR0ZXIgZG9lc24ndCBoYXZlIGVxdWl2YWxlbnRzIGZvciB3aWxsIGJlIHJlbmRlcmVkIGJhY2sgdG8gTWFya0Rvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBKYXZhRG9jUmVuZGVyZXIgZXh0ZW5kcyBNYXJrZG93blJlbmRlcmVyIHtcbiAgcHVibGljIGJsb2NrX3F1b3RlKF9ub2RlOiBjbS5Ob2RlLCBjb250ZXh0OiBSZW5kZXJlckNvbnRleHQpIHtcbiAgICByZXR1cm4gYDxibG9ja3F1b3RlPiR7Y29udGV4dC5jb250ZW50KCl9PC9ibG9ja3F1b3RlPmA7XG4gIH1cblxuICBwdWJsaWMgY29kZShub2RlOiBjbS5Ob2RlLCBfY29udGV4dDogUmVuZGVyZXJDb250ZXh0KSB7XG4gICAgcmV0dXJuIGA8Y29kZT4ke0VTQ0FQRS50ZXh0KG5vZGUubGl0ZXJhbCl9PC9jb2RlPmA7XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIGNvZGUgYmxvY2tzIGZvciBKYXZhRG9jXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlZmxlY3RvcmluZy5pby9ob3d0by1mb3JtYXQtY29kZS1zbmlwcGV0cy1pbi1qYXZhZG9jL1xuICAgKlxuICAgKiBTaW5jZSB3ZSBuZWVkIHRvIGRpc3BsYXkgQCBpbnNpZGUgb3VyIGV4YW1wbGVzIGFuZCB3ZSBkb24ndCBoYXZlIHRvXG4gICAqIGNhcmUgYWJvdXQgd3JpdGFiaWxpdHksIHRoZSBtb3N0IHJvYnVzdCBvcHRpb24gc2VlbXMgdG8gYmUgPHByZT5cbiAgICogdGFncyB3aXRoIGVzY2FwaW5nIG9mIGJhZCBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgcHVibGljIGNvZGVfYmxvY2sobm9kZTogY20uTm9kZSwgX2NvbnRleHQ6IFJlbmRlcmVyQ29udGV4dCkge1xuICAgIHJldHVybiBwYXJhKGA8YmxvY2txdW90ZT48cHJlPlxcbiR7RVNDQVBFLnRleHQobm9kZS5saXRlcmFsKX08L3ByZT48L2Jsb2NrcXVvdGU+YCk7XG4gIH1cblxuICBwdWJsaWMgdGV4dChub2RlOiBjbS5Ob2RlLCBfY29udGV4dDogUmVuZGVyZXJDb250ZXh0KSB7XG4gICAgcmV0dXJuIEVTQ0FQRS50ZXh0KG5vZGUubGl0ZXJhbCkgPz8gJyc7XG4gIH1cblxuICBwdWJsaWMgbGluayhub2RlOiBjbS5Ob2RlLCBjb250ZXh0OiBSZW5kZXJlckNvbnRleHQpIHtcbiAgICByZXR1cm4gYDxhIGhyZWY9XCIke0VTQ0FQRS5hdHRyaWJ1dGUobm9kZS5kZXN0aW5hdGlvbikgPz8gJyd9XCI+JHtjb250ZXh0LmNvbnRlbnQoKX08L2E+YDtcbiAgfVxuXG4gIHB1YmxpYyBkb2N1bWVudChfbm9kZTogY20uTm9kZSwgY29udGV4dDogUmVuZGVyZXJDb250ZXh0KSB7XG4gICAgcmV0dXJuIHN0cmlwVHJhaWxpbmdXaGl0ZXNwYWNlKHNwZWNpYWxEb2NDb21tZW50RXNjYXBlKGNvbGxhcHNlUGFyYUphdmEoY29udGV4dC5jb250ZW50KCkpKSk7XG4gIH1cblxuICBwdWJsaWMgaGVhZGluZyhub2RlOiBjbS5Ob2RlLCBjb250ZXh0OiBSZW5kZXJlckNvbnRleHQpIHtcbiAgICByZXR1cm4gcGFyYShgPGgke25vZGUubGV2ZWx9PiR7Y29udGV4dC5jb250ZW50KCl9PC9oJHtub2RlLmxldmVsfT5gKTtcbiAgfVxuXG4gIHB1YmxpYyBsaXN0KG5vZGU6IGNtLk5vZGUsIGNvbnRleHQ6IFJlbmRlcmVyQ29udGV4dCkge1xuICAgIGNvbnN0IHRhZyA9IG5vZGUubGlzdFR5cGUgPT09ICdidWxsZXQnID8gJ3VsJyA6ICdvbCc7XG5cbiAgICByZXR1cm4gcGFyYShgPCR7dGFnfT5cXG4ke2NvbnRleHQuY29udGVudCgpfTwvJHt0YWd9PmApO1xuICB9XG5cbiAgcHVibGljIGl0ZW0oX25vZGU6IGNtLk5vZGUsIGNvbnRleHQ6IFJlbmRlcmVyQ29udGV4dCkge1xuICAgIHJldHVybiBgPGxpPiR7c3RyaXBQYXJhKGNvbnRleHQuY29udGVudCgpKX08L2xpPlxcbmA7XG4gIH1cblxuICBwdWJsaWMgaW1hZ2Uobm9kZTogY20uTm9kZSwgY29udGV4dDogUmVuZGVyZXJDb250ZXh0KSB7XG4gICAgcmV0dXJuIGA8aW1nIGFsdD1cIiR7RVNDQVBFLnRleHQyYXR0cihjb250ZXh0LmNvbnRlbnQoKSl9XCIgc3JjPVwiJHtFU0NBUEUuYXR0cmlidXRlKG5vZGUuZGVzdGluYXRpb24pID8/ICcnfVwiPmA7XG4gIH1cblxuICBwdWJsaWMgZW1waChfbm9kZTogY20uTm9kZSwgY29udGV4dDogUmVuZGVyZXJDb250ZXh0KSB7XG4gICAgcmV0dXJuIGA8ZW0+JHtjb250ZXh0LmNvbnRlbnQoKX08L2VtPmA7XG4gIH1cblxuICBwdWJsaWMgc3Ryb25nKF9ub2RlOiBjbS5Ob2RlLCBjb250ZXh0OiBSZW5kZXJlckNvbnRleHQpIHtcbiAgICByZXR1cm4gYDxzdHJvbmc+JHtjb250ZXh0LmNvbnRlbnQoKX08L3N0cm9uZz5gO1xuICB9XG5cbiAgcHVibGljIHRoZW1hdGljX2JyZWFrKF9ub2RlOiBjbS5Ob2RlLCBfY29udGV4dDogUmVuZGVyZXJDb250ZXh0KSB7XG4gICAgcmV0dXJuIHBhcmEoJzxocj4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb2xsYXBzZVBhcmFKYXZhKHg6IHN0cmluZykge1xuICByZXR1cm4gY29sbGFwc2VQYXJhKHgsICdcXG48cD5cXG4nKTtcbn1cblxuLyoqXG4gKiBBIGZpbmFsIHNpbmdsZS1wYXNzIGVzY2FwZSBvZiAnKiAvJyB3aGljaCBtaWdodCBvdGhlcndpc2UgZW5kIGEgZG9jIGNvbW1lbnQuXG4gKlxuICogV2UgaGF2ZSB0byBkbyB0aGlzIGluIG9uZSBmaW5hbCBwYXNzIGJlY2F1c2UgSSd2ZSBvYnNlcnZlZCB0aGF0IGluIHJ1bm5pbmdcbiAqIG5leHQsIHRoZSBNYXJrRG93biBwYXJzZXIgd2lsbCBwYXJzZSB0aGUgdHdvIHN5bWJvbHMgdG86XG4gKlxuICogICAgWy4uLiwgdGV4dCgnKicpLCB0ZXh0KCcvJyksIC4uLl1cbiAqXG4gKiB3aGljaCBtZWFucyB3ZSBoYXZlIG5vIG90aGVyIGFiaWxpdHkgdG8gb2JzZXJ2ZSB0aGUgdHdvLWNoYXJhY3RlciBjb21iaW5hdGlvblxuICogcHJvcGVybHkuXG4gKi9cbmZ1bmN0aW9uIHNwZWNpYWxEb2NDb21tZW50RXNjYXBlKHg6IHN0cmluZykge1xuICByZXR1cm4geC5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcXFwqXFxcXC8nLCAnZycpLCAnKiYjNDc7Jyk7XG59XG4iXX0=