"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsiiTargetParameter = exports.findPackageJson = exports.resolvePackage = void 0;
const fs = require("fs");
const path = require("path");
/**
 * Resolve a package name in an example to a JSII assembly
 *
 * We assume we've changed directory to the directory where we need to resolve from.
 */
function resolvePackage(packageName) {
    try {
        const resolved = require.resolve(`${packageName}/package.json`, {
            paths: [process.cwd()],
        });
        // eslint-disable-next-line @typescript-eslint/no-require-imports
        return require(resolved);
    }
    catch {
        return undefined;
    }
}
exports.resolvePackage = resolvePackage;
/**
 * Find an enclosing package.json file given a filename
 *
 * Will return `undefined` if a package.json could not be found.
 */
function findPackageJson(fileName) {
    // eslint-disable-next-line no-constant-condition
    while (true) {
        const candidatePath = path.join(fileName, 'package.json');
        if (fs.existsSync(candidatePath)) {
            // eslint-disable-next-line @typescript-eslint/no-require-imports
            return require(path.resolve(candidatePath));
        }
        const parent = path.dirname(fileName);
        if (parent === fileName) {
            return undefined;
        }
        fileName = parent;
    }
}
exports.findPackageJson = findPackageJson;
function jsiiTargetParameter(target, field) {
    const path = field.split('.');
    let r = target.targets;
    while (path.length > 0 && typeof r === 'object' && r !== null) {
        r = r[path.splice(0, 1)[0]];
    }
    return r;
}
exports.jsiiTargetParameter = jsiiTargetParameter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwYWNrYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx5QkFBeUI7QUFDekIsNkJBQTZCO0FBRTdCOzs7O0dBSUc7QUFDSCxTQUFnQixjQUFjLENBQUMsV0FBbUI7SUFDaEQsSUFBSTtRQUNGLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxXQUFXLGVBQWUsRUFBRTtZQUM5RCxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDdkIsQ0FBQyxDQUFDO1FBQ0gsaUVBQWlFO1FBQ2pFLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzFCO0lBQUMsTUFBTTtRQUNOLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0FBQ0gsQ0FBQztBQVZELHdDQVVDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLGVBQWUsQ0FBQyxRQUFnQjtJQUM5QyxpREFBaUQ7SUFDakQsT0FBTyxJQUFJLEVBQUU7UUFDWCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUMxRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDaEMsaUVBQWlFO1lBQ2pFLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztTQUM3QztRQUVELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEMsSUFBSSxNQUFNLEtBQUssUUFBUSxFQUFFO1lBQ3ZCLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBQ0QsUUFBUSxHQUFHLE1BQU0sQ0FBQztLQUNuQjtBQUNILENBQUM7QUFmRCwwQ0FlQztBQUVELFNBQWdCLG1CQUFtQixDQUFDLE1BQXVCLEVBQUUsS0FBYTtJQUN4RSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxHQUFRLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDNUIsT0FBTyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtRQUM3RCxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDN0I7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFQRCxrREFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHNwZWMgZnJvbSAnQGpzaWkvc3BlYyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG4vKipcbiAqIFJlc29sdmUgYSBwYWNrYWdlIG5hbWUgaW4gYW4gZXhhbXBsZSB0byBhIEpTSUkgYXNzZW1ibHlcbiAqXG4gKiBXZSBhc3N1bWUgd2UndmUgY2hhbmdlZCBkaXJlY3RvcnkgdG8gdGhlIGRpcmVjdG9yeSB3aGVyZSB3ZSBuZWVkIHRvIHJlc29sdmUgZnJvbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVQYWNrYWdlKHBhY2thZ2VOYW1lOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNvbHZlZCA9IHJlcXVpcmUucmVzb2x2ZShgJHtwYWNrYWdlTmFtZX0vcGFja2FnZS5qc29uYCwge1xuICAgICAgcGF0aHM6IFtwcm9jZXNzLmN3ZCgpXSxcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0c1xuICAgIHJldHVybiByZXF1aXJlKHJlc29sdmVkKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIEZpbmQgYW4gZW5jbG9zaW5nIHBhY2thZ2UuanNvbiBmaWxlIGdpdmVuIGEgZmlsZW5hbWVcbiAqXG4gKiBXaWxsIHJldHVybiBgdW5kZWZpbmVkYCBpZiBhIHBhY2thZ2UuanNvbiBjb3VsZCBub3QgYmUgZm91bmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kUGFja2FnZUpzb24oZmlsZU5hbWU6IHN0cmluZykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29uc3QgY2FuZGlkYXRlUGF0aCA9IHBhdGguam9pbihmaWxlTmFtZSwgJ3BhY2thZ2UuanNvbicpO1xuICAgIGlmIChmcy5leGlzdHNTeW5jKGNhbmRpZGF0ZVBhdGgpKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0c1xuICAgICAgcmV0dXJuIHJlcXVpcmUocGF0aC5yZXNvbHZlKGNhbmRpZGF0ZVBhdGgpKTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXJlbnQgPSBwYXRoLmRpcm5hbWUoZmlsZU5hbWUpO1xuICAgIGlmIChwYXJlbnQgPT09IGZpbGVOYW1lKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmaWxlTmFtZSA9IHBhcmVudDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24ganNpaVRhcmdldFBhcmFtZXRlcih0YXJnZXQ6IHNwZWMuVGFyZ2V0YWJsZSwgZmllbGQ6IHN0cmluZykge1xuICBjb25zdCBwYXRoID0gZmllbGQuc3BsaXQoJy4nKTtcbiAgbGV0IHI6IGFueSA9IHRhcmdldC50YXJnZXRzO1xuICB3aGlsZSAocGF0aC5sZW5ndGggPiAwICYmIHR5cGVvZiByID09PSAnb2JqZWN0JyAmJiByICE9PSBudWxsKSB7XG4gICAgciA9IHJbcGF0aC5zcGxpY2UoMCwgMSlbMF1dO1xuICB9XG4gIHJldHVybiByO1xufVxuIl19