"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readTablet = void 0;
const tablets_1 = require("../tablets/tablets");
async function readTablet(tabletFile, key, lang) {
    const tab = new tablets_1.LanguageTablet();
    await tab.load(tabletFile);
    if (key !== undefined) {
        const snippet = tab.tryGetSnippet(key);
        if (snippet === undefined) {
            throw new Error(`No such snippet: ${key}`);
        }
        displaySnippet(snippet);
    }
    else {
        listSnippets();
    }
    function listSnippets() {
        for (const key of tab.snippetKeys) {
            process.stdout.write(`${snippetHeader(key)}\n`);
            displaySnippet(tab.tryGetSnippet(key));
            process.stdout.write('\n');
        }
    }
    function displaySnippet(snippet) {
        if (snippet.snippet.didCompile !== undefined) {
            process.stdout.write(`Compiled: ${snippet.snippet.didCompile}\n`);
        }
        if (lang !== undefined) {
            const translation = snippet.get(lang);
            if (translation === undefined) {
                throw new Error(`No translation for ${lang} in snippet ${snippet.key}`);
            }
            displayTranslation(translation);
        }
        else {
            listTranslations(snippet);
        }
    }
    function listTranslations(snippet) {
        const original = snippet.originalSource;
        if (original !== undefined) {
            displayTranslation(original);
        }
        for (const lang of snippet.languages) {
            process.stdout.write(`${languageHeader(lang)}\n`);
            displayTranslation(snippet.get(lang));
        }
    }
    function displayTranslation(translation) {
        process.stdout.write(`${translation.source}\n`);
    }
}
exports.readTablet = readTablet;
function snippetHeader(key) {
    return center(` ${key} `, 100, '=');
}
function languageHeader(key) {
    return center(` ${key} `, 30, '-');
}
function center(str, n, fill) {
    const before = Math.floor((n - str.length) / 2);
    const after = Math.ceil((n - str.length) / 2);
    return fill.repeat(Math.max(before, 0)) + str + fill.repeat(Math.max(after, 0));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsZ0RBQW9GO0FBRTdFLEtBQUssVUFBVSxVQUFVLENBQUMsVUFBa0IsRUFBRSxHQUFZLEVBQUUsSUFBYTtJQUM5RSxNQUFNLEdBQUcsR0FBRyxJQUFJLHdCQUFjLEVBQUUsQ0FBQztJQUNqQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFM0IsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO1FBQ3JCLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkMsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDNUM7UUFDRCxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDekI7U0FBTTtRQUNMLFlBQVksRUFBRSxDQUFDO0tBQ2hCO0lBRUQsU0FBUyxZQUFZO1FBQ25CLEtBQUssTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLFdBQVcsRUFBRTtZQUNqQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEQsY0FBYyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBQztZQUN4QyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFRCxTQUFTLGNBQWMsQ0FBQyxPQUEwQjtRQUNoRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUM1QyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQztTQUNuRTtRQUVELElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUN0QixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQXNCLENBQUMsQ0FBQztZQUN4RCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7Z0JBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLElBQUksZUFBZSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzthQUN6RTtZQUNELGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2pDO2FBQU07WUFDTCxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUM7SUFFRCxTQUFTLGdCQUFnQixDQUFDLE9BQTBCO1FBQ2xELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUM7UUFDeEMsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQzFCLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzlCO1FBRUQsS0FBSyxNQUFNLElBQUksSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQ3BDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsRCxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBRSxDQUFDLENBQUM7U0FDeEM7SUFDSCxDQUFDO0lBRUQsU0FBUyxrQkFBa0IsQ0FBQyxXQUF3QjtRQUNsRCxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDO0lBQ2xELENBQUM7QUFDSCxDQUFDO0FBckRELGdDQXFEQztBQUVELFNBQVMsYUFBYSxDQUFDLEdBQVc7SUFDaEMsT0FBTyxNQUFNLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLEdBQVc7SUFDakMsT0FBTyxNQUFNLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDckMsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLEdBQVcsRUFBRSxDQUFTLEVBQUUsSUFBWTtJQUNsRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNoRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUU5QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUYXJnZXRMYW5ndWFnZSB9IGZyb20gJy4uL2xhbmd1YWdlcyc7XG5pbXBvcnQgeyBMYW5ndWFnZVRhYmxldCwgVHJhbnNsYXRlZFNuaXBwZXQsIFRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vdGFibGV0cy90YWJsZXRzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYWRUYWJsZXQodGFibGV0RmlsZTogc3RyaW5nLCBrZXk/OiBzdHJpbmcsIGxhbmc/OiBzdHJpbmcpIHtcbiAgY29uc3QgdGFiID0gbmV3IExhbmd1YWdlVGFibGV0KCk7XG4gIGF3YWl0IHRhYi5sb2FkKHRhYmxldEZpbGUpO1xuXG4gIGlmIChrZXkgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHNuaXBwZXQgPSB0YWIudHJ5R2V0U25pcHBldChrZXkpO1xuICAgIGlmIChzbmlwcGV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gc3VjaCBzbmlwcGV0OiAke2tleX1gKTtcbiAgICB9XG4gICAgZGlzcGxheVNuaXBwZXQoc25pcHBldCk7XG4gIH0gZWxzZSB7XG4gICAgbGlzdFNuaXBwZXRzKCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0U25pcHBldHMoKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgdGFiLnNuaXBwZXRLZXlzKSB7XG4gICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZShgJHtzbmlwcGV0SGVhZGVyKGtleSl9XFxuYCk7XG4gICAgICBkaXNwbGF5U25pcHBldCh0YWIudHJ5R2V0U25pcHBldChrZXkpISk7XG4gICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZSgnXFxuJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGlzcGxheVNuaXBwZXQoc25pcHBldDogVHJhbnNsYXRlZFNuaXBwZXQpIHtcbiAgICBpZiAoc25pcHBldC5zbmlwcGV0LmRpZENvbXBpbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoYENvbXBpbGVkOiAke3NuaXBwZXQuc25pcHBldC5kaWRDb21waWxlfVxcbmApO1xuICAgIH1cblxuICAgIGlmIChsYW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHRyYW5zbGF0aW9uID0gc25pcHBldC5nZXQobGFuZyBhcyBUYXJnZXRMYW5ndWFnZSk7XG4gICAgICBpZiAodHJhbnNsYXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHRyYW5zbGF0aW9uIGZvciAke2xhbmd9IGluIHNuaXBwZXQgJHtzbmlwcGV0LmtleX1gKTtcbiAgICAgIH1cbiAgICAgIGRpc3BsYXlUcmFuc2xhdGlvbih0cmFuc2xhdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3RUcmFuc2xhdGlvbnMoc25pcHBldCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbGlzdFRyYW5zbGF0aW9ucyhzbmlwcGV0OiBUcmFuc2xhdGVkU25pcHBldCkge1xuICAgIGNvbnN0IG9yaWdpbmFsID0gc25pcHBldC5vcmlnaW5hbFNvdXJjZTtcbiAgICBpZiAob3JpZ2luYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZGlzcGxheVRyYW5zbGF0aW9uKG9yaWdpbmFsKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGxhbmcgb2Ygc25pcHBldC5sYW5ndWFnZXMpIHtcbiAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGAke2xhbmd1YWdlSGVhZGVyKGxhbmcpfVxcbmApO1xuICAgICAgZGlzcGxheVRyYW5zbGF0aW9uKHNuaXBwZXQuZ2V0KGxhbmcpISk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGlzcGxheVRyYW5zbGF0aW9uKHRyYW5zbGF0aW9uOiBUcmFuc2xhdGlvbikge1xuICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGAke3RyYW5zbGF0aW9uLnNvdXJjZX1cXG5gKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzbmlwcGV0SGVhZGVyKGtleTogc3RyaW5nKSB7XG4gIHJldHVybiBjZW50ZXIoYCAke2tleX0gYCwgMTAwLCAnPScpO1xufVxuXG5mdW5jdGlvbiBsYW5ndWFnZUhlYWRlcihrZXk6IHN0cmluZykge1xuICByZXR1cm4gY2VudGVyKGAgJHtrZXl9IGAsIDMwLCAnLScpO1xufVxuXG5mdW5jdGlvbiBjZW50ZXIoc3RyOiBzdHJpbmcsIG46IG51bWJlciwgZmlsbDogc3RyaW5nKSB7XG4gIGNvbnN0IGJlZm9yZSA9IE1hdGguZmxvb3IoKG4gLSBzdHIubGVuZ3RoKSAvIDIpO1xuICBjb25zdCBhZnRlciA9IE1hdGguY2VpbCgobiAtIHN0ci5sZW5ndGgpIC8gMik7XG5cbiAgcmV0dXJuIGZpbGwucmVwZWF0KE1hdGgubWF4KGJlZm9yZSwgMCkpICsgc3RyICsgZmlsbC5yZXBlYXQoTWF0aC5tYXgoYWZ0ZXIsIDApKTtcbn1cbiJdfQ==