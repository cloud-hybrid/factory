"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.singleThreadedTranslateAll = void 0;
/**
 * Pool worker for extract.ts
 */
const workerpool = require("workerpool");
const translate_1 = require("./translate");
function translateBatch(request) {
    const result = singleThreadedTranslateAll(request.snippets, request.includeCompilerDiagnostics);
    return {
        translatedSchemas: result.translatedSnippets.map((s) => s.snippet),
        diagnostics: result.diagnostics,
    };
}
/**
 * Translate the given snippets using a single compiler
 */
function singleThreadedTranslateAll(snippets, includeCompilerDiagnostics) {
    const translatedSnippets = new Array();
    const failures = new Array();
    const translator = new translate_1.Translator(includeCompilerDiagnostics);
    for (const block of snippets) {
        try {
            translatedSnippets.push(translator.translate(block));
        }
        catch (e) {
            failures.push(translate_1.makeRosettaDiagnostic(true, `rosetta: error translating snippet: ${e}\n${e.stack}\n${block.completeSource}`));
        }
    }
    return {
        translatedSnippets,
        diagnostics: [...translator.diagnostics, ...failures],
    };
}
exports.singleThreadedTranslateAll = singleThreadedTranslateAll;
workerpool.worker({ translateBatch });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlX2FsbF93b3JrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFuc2xhdGVfYWxsX3dvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNILHlDQUF5QztBQUt6QywyQ0FBbUY7QUFjbkYsU0FBUyxjQUFjLENBQUMsT0FBOEI7SUFDcEQsTUFBTSxNQUFNLEdBQUcsMEJBQTBCLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUVoRyxPQUFPO1FBQ0wsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNsRSxXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVc7S0FDaEMsQ0FBQztBQUNKLENBQUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLDBCQUEwQixDQUN4QyxRQUE2QixFQUM3QiwwQkFBbUM7SUFFbkMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLEtBQUssRUFBcUIsQ0FBQztJQUUxRCxNQUFNLFFBQVEsR0FBRyxJQUFJLEtBQUssRUFBcUIsQ0FBQztJQUVoRCxNQUFNLFVBQVUsR0FBRyxJQUFJLHNCQUFVLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUM5RCxLQUFLLE1BQU0sS0FBSyxJQUFJLFFBQVEsRUFBRTtRQUM1QixJQUFJO1lBQ0Ysa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUN0RDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsUUFBUSxDQUFDLElBQUksQ0FDWCxpQ0FBcUIsQ0FBQyxJQUFJLEVBQUUsdUNBQXVDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUM3RyxDQUFDO1NBQ0g7S0FDRjtJQUVELE9BQU87UUFDTCxrQkFBa0I7UUFDbEIsV0FBVyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLEdBQUcsUUFBUSxDQUFDO0tBQ3RELENBQUM7QUFDSixDQUFDO0FBdkJELGdFQXVCQztBQUVELFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQb29sIHdvcmtlciBmb3IgZXh0cmFjdC50c1xuICovXG5pbXBvcnQgKiBhcyB3b3JrZXJwb29sIGZyb20gJ3dvcmtlcnBvb2wnO1xuXG5pbXBvcnQgeyBUeXBlU2NyaXB0U25pcHBldCB9IGZyb20gJy4vc25pcHBldCc7XG5pbXBvcnQgeyBUcmFuc2xhdGVkU25pcHBldFNjaGVtYSB9IGZyb20gJy4vdGFibGV0cy9zY2hlbWEnO1xuaW1wb3J0IHsgVHJhbnNsYXRlZFNuaXBwZXQgfSBmcm9tICcuL3RhYmxldHMvdGFibGV0cyc7XG5pbXBvcnQgeyBSb3NldHRhRGlhZ25vc3RpYywgVHJhbnNsYXRvciwgbWFrZVJvc2V0dGFEaWFnbm9zdGljIH0gZnJvbSAnLi90cmFuc2xhdGUnO1xuaW1wb3J0IHsgVHJhbnNsYXRlQWxsUmVzdWx0IH0gZnJvbSAnLi90cmFuc2xhdGVfYWxsJztcblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2xhdGVCYXRjaFJlcXVlc3Qge1xuICByZWFkb25seSBzbmlwcGV0czogVHlwZVNjcmlwdFNuaXBwZXRbXTtcbiAgcmVhZG9ubHkgaW5jbHVkZUNvbXBpbGVyRGlhZ25vc3RpY3M6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNsYXRlQmF0Y2hSZXNwb25zZSB7XG4gIC8vIENhbm5vdCBiZSAnVHJhbnNsYXRlZFNuaXBwZXQnIGJlY2F1c2UgbmVlZHMgdG8gYmUgc2VyaWFsaXphYmxlXG4gIHJlYWRvbmx5IHRyYW5zbGF0ZWRTY2hlbWFzOiBUcmFuc2xhdGVkU25pcHBldFNjaGVtYVtdO1xuICByZWFkb25seSBkaWFnbm9zdGljczogUm9zZXR0YURpYWdub3N0aWNbXTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlQmF0Y2gocmVxdWVzdDogVHJhbnNsYXRlQmF0Y2hSZXF1ZXN0KTogVHJhbnNsYXRlQmF0Y2hSZXNwb25zZSB7XG4gIGNvbnN0IHJlc3VsdCA9IHNpbmdsZVRocmVhZGVkVHJhbnNsYXRlQWxsKHJlcXVlc3Quc25pcHBldHMsIHJlcXVlc3QuaW5jbHVkZUNvbXBpbGVyRGlhZ25vc3RpY3MpO1xuXG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlZFNjaGVtYXM6IHJlc3VsdC50cmFuc2xhdGVkU25pcHBldHMubWFwKChzKSA9PiBzLnNuaXBwZXQpLFxuICAgIGRpYWdub3N0aWNzOiByZXN1bHQuZGlhZ25vc3RpY3MsXG4gIH07XG59XG5cbi8qKlxuICogVHJhbnNsYXRlIHRoZSBnaXZlbiBzbmlwcGV0cyB1c2luZyBhIHNpbmdsZSBjb21waWxlclxuICovXG5leHBvcnQgZnVuY3Rpb24gc2luZ2xlVGhyZWFkZWRUcmFuc2xhdGVBbGwoXG4gIHNuaXBwZXRzOiBUeXBlU2NyaXB0U25pcHBldFtdLFxuICBpbmNsdWRlQ29tcGlsZXJEaWFnbm9zdGljczogYm9vbGVhbixcbik6IFRyYW5zbGF0ZUFsbFJlc3VsdCB7XG4gIGNvbnN0IHRyYW5zbGF0ZWRTbmlwcGV0cyA9IG5ldyBBcnJheTxUcmFuc2xhdGVkU25pcHBldD4oKTtcblxuICBjb25zdCBmYWlsdXJlcyA9IG5ldyBBcnJheTxSb3NldHRhRGlhZ25vc3RpYz4oKTtcblxuICBjb25zdCB0cmFuc2xhdG9yID0gbmV3IFRyYW5zbGF0b3IoaW5jbHVkZUNvbXBpbGVyRGlhZ25vc3RpY3MpO1xuICBmb3IgKGNvbnN0IGJsb2NrIG9mIHNuaXBwZXRzKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRyYW5zbGF0ZWRTbmlwcGV0cy5wdXNoKHRyYW5zbGF0b3IudHJhbnNsYXRlKGJsb2NrKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZmFpbHVyZXMucHVzaChcbiAgICAgICAgbWFrZVJvc2V0dGFEaWFnbm9zdGljKHRydWUsIGByb3NldHRhOiBlcnJvciB0cmFuc2xhdGluZyBzbmlwcGV0OiAke2V9XFxuJHtlLnN0YWNrfVxcbiR7YmxvY2suY29tcGxldGVTb3VyY2V9YCksXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlZFNuaXBwZXRzLFxuICAgIGRpYWdub3N0aWNzOiBbLi4udHJhbnNsYXRvci5kaWFnbm9zdGljcywgLi4uZmFpbHVyZXNdLFxuICB9O1xufVxuXG53b3JrZXJwb29sLndvcmtlcih7IHRyYW5zbGF0ZUJhdGNoIH0pO1xuIl19