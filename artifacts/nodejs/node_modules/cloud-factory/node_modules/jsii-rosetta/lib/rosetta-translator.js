"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosettaTranslator = void 0;
const fingerprinting_1 = require("./jsii/fingerprinting");
const languages_1 = require("./languages");
const logging = require("./logging");
const snippet_1 = require("./snippet");
const key_1 = require("./tablets/key");
const tablets_1 = require("./tablets/tablets");
const translate_all_1 = require("./translate_all");
/**
 * Entry point for consumers that want to translate code on-the-fly
 *
 * If you want to generate and translate code on-the-fly, in ways that cannot
 * be achieved by the rosetta CLI, use this class.
 */
class RosettaTranslator {
    constructor(options = {}) {
        var _a, _b;
        /**
         * Tablet with fresh translations
         *
         * All new translations (not read from cache) are added to this tablet.
         */
        this.tablet = new tablets_1.LanguageTablet();
        this.cache = new tablets_1.LanguageTablet();
        this.fingerprinter = new fingerprinting_1.TypeFingerprinter((_a = options === null || options === void 0 ? void 0 : options.assemblies) !== null && _a !== void 0 ? _a : []);
        this.includeCompilerDiagnostics = (_b = options.includeCompilerDiagnostics) !== null && _b !== void 0 ? _b : false;
    }
    /**
     * @deprecated use `addToCache` instead
     */
    async loadCache(fileName) {
        try {
            await this.cache.load(fileName);
        }
        catch (e) {
            logging.warn(`Error reading cache ${fileName}: ${e.message}`);
        }
    }
    async addToCache(filename) {
        const tab = await tablets_1.LanguageTablet.fromOptionalFile(filename);
        this.cache.addTablet(tab);
    }
    addTabletsToCache(...tablets) {
        for (const tab of tablets) {
            this.cache.addTablet(tab);
        }
    }
    hasCache() {
        return this.cache.count > 0;
    }
    /**
     * For all the given snippets, try to read translations from the cache
     *
     * Will remove the cached snippets from the input array.
     */
    readFromCache(snippets, addToTablet = true, compiledOnly = false) {
        const remaining = [...snippets];
        const translations = new Array();
        let i = 0;
        while (i < remaining.length) {
            const fromCache = tryReadFromCache(remaining[i], this.cache, this.fingerprinter);
            // If compiledOnly is set, do not consider cached snippets that do not compile
            if (fromCache && (!compiledOnly || fromCache.snippet.didCompile)) {
                if (addToTablet) {
                    this.tablet.addSnippet(fromCache);
                }
                remaining.splice(i, 1);
                translations.push(fromCache);
            }
            else {
                i += 1;
            }
        }
        return { translations, remaining };
    }
    async translateAll(snippets, addToTablet = true) {
        const result = await translate_all_1.translateAll(snippets, this.includeCompilerDiagnostics);
        const fingerprinted = result.translatedSnippets.map((snippet) => snippet.withFingerprint(this.fingerprinter.fingerprintAll(snippet.fqnsReferenced())));
        if (addToTablet) {
            for (const translation of fingerprinted) {
                this.tablet.addSnippet(translation);
            }
        }
        return {
            translatedSnippets: fingerprinted,
            diagnostics: result.diagnostics,
        };
    }
}
exports.RosettaTranslator = RosettaTranslator;
/**
 * Try to find the translation for the given snippet in the given cache
 *
 * Rules for cacheability are:
 * - id is the same (== visible source didn't change)
 * - complete source is the same (== fixture didn't change)
 * - all types involved have the same fingerprint (== API surface didn't change)
 * - the versions of all translations match the versions on the available translators (== translator itself didn't change)
 *
 * For the versions check: we could have selectively picked some translations
 * from the cache while performing others. However, since the big work is in
 * parsing the TypeScript, and the rendering itself is peanutes (assumption), it
 * doesn't really make a lot of difference.  So, for simplification's sake,
 * we'll regen all translations if there's at least one that's outdated.
 */
function tryReadFromCache(sourceSnippet, cache, fingerprinter) {
    const fromCache = cache.tryGetSnippet(key_1.snippetKey(sourceSnippet));
    // infused snippets won't pass the full source check or the fingerprinter
    // but there is no reason to try to recompile it, so return cached snippet
    // if there exists one.
    if (isInfused(sourceSnippet)) {
        return fromCache;
    }
    const cacheable = fromCache &&
        snippet_1.completeSource(sourceSnippet) === fromCache.snippet.fullSource &&
        Object.entries(languages_1.TARGET_LANGUAGES).every(([lang, translator]) => { var _a, _b; return ((_b = (_a = fromCache.snippet.translations) === null || _a === void 0 ? void 0 : _a[lang]) === null || _b === void 0 ? void 0 : _b.version) === translator.version; }) &&
        fingerprinter.fingerprintAll(fromCache.fqnsReferenced()) === fromCache.snippet.fqnsFingerprint;
    return cacheable ? fromCache : undefined;
}
function isInfused(snippet) {
    var _a;
    return ((_a = snippet.parameters) === null || _a === void 0 ? void 0 : _a.infused) !== undefined;
}
//# sourceMappingURL=data:application/json;base64,