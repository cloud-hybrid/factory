"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntaxKindCounter = void 0;
const ts = require("typescript");
class SyntaxKindCounter {
    constructor(visibleSpans) {
        this.visibleSpans = visibleSpans;
        this.counter = {};
    }
    countKinds(sourceFile) {
        this.countNode(sourceFile);
        return this.counter;
    }
    countNode(node) {
        if (this.visibleSpans.containsStartOfNode(node)) {
            const value = node.kind.valueOf();
            this.counter[value] = this.counter[value] ? this.counter[value] + 1 : 1;
        }
        // The two recursive options produce differing results. `ts.forEachChild()` ignores some unimportant kinds.
        // `node.getChildren()` goes through all syntax kinds.
        // see: https://basarat.gitbook.io/typescript/overview/ast/ast-tip-children
        ts.forEachChild(node, (x) => this.countNode(x));
    }
}
exports.SyntaxKindCounter = SyntaxKindCounter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ludGF4LWtpbmQtY291bnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN5bnRheC1raW5kLWNvdW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQWlDO0FBSWpDLE1BQWEsaUJBQWlCO0lBRzVCLFlBQW9DLFlBQW1CO1FBQW5CLGlCQUFZLEdBQVosWUFBWSxDQUFPO1FBQ3JELElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFTSxVQUFVLENBQUMsVUFBeUI7UUFDekMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVPLFNBQVMsQ0FBQyxJQUFhO1FBQzdCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN6RTtRQUVELDJHQUEyRztRQUMzRyxzREFBc0Q7UUFDdEQsMkVBQTJFO1FBQzNFLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztDQUNGO0FBdkJELDhDQXVCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuXG5pbXBvcnQgeyBTcGFucyB9IGZyb20gJy4vdmlzaWJsZS1zcGFucyc7XG5cbmV4cG9ydCBjbGFzcyBTeW50YXhLaW5kQ291bnRlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY291bnRlcjogUmVjb3JkPHN0cmluZywgbnVtYmVyPjtcblxuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSB2aXNpYmxlU3BhbnM6IFNwYW5zKSB7XG4gICAgdGhpcy5jb3VudGVyID0ge307XG4gIH1cblxuICBwdWJsaWMgY291bnRLaW5kcyhzb3VyY2VGaWxlOiB0cy5Tb3VyY2VGaWxlKTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiB7XG4gICAgdGhpcy5jb3VudE5vZGUoc291cmNlRmlsZSk7XG4gICAgcmV0dXJuIHRoaXMuY291bnRlcjtcbiAgfVxuXG4gIHByaXZhdGUgY291bnROb2RlKG5vZGU6IHRzLk5vZGUpIHtcbiAgICBpZiAodGhpcy52aXNpYmxlU3BhbnMuY29udGFpbnNTdGFydE9mTm9kZShub2RlKSkge1xuICAgICAgY29uc3QgdmFsdWUgPSBub2RlLmtpbmQudmFsdWVPZigpO1xuICAgICAgdGhpcy5jb3VudGVyW3ZhbHVlXSA9IHRoaXMuY291bnRlclt2YWx1ZV0gPyB0aGlzLmNvdW50ZXJbdmFsdWVdICsgMSA6IDE7XG4gICAgfVxuXG4gICAgLy8gVGhlIHR3byByZWN1cnNpdmUgb3B0aW9ucyBwcm9kdWNlIGRpZmZlcmluZyByZXN1bHRzLiBgdHMuZm9yRWFjaENoaWxkKClgIGlnbm9yZXMgc29tZSB1bmltcG9ydGFudCBraW5kcy5cbiAgICAvLyBgbm9kZS5nZXRDaGlsZHJlbigpYCBnb2VzIHRocm91Z2ggYWxsIHN5bnRheCBraW5kcy5cbiAgICAvLyBzZWU6IGh0dHBzOi8vYmFzYXJhdC5naXRib29rLmlvL3R5cGVzY3JpcHQvb3ZlcnZpZXcvYXN0L2FzdC10aXAtY2hpbGRyZW5cbiAgICB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgKHgpID0+IHRoaXMuY291bnROb2RlKHgpKTtcbiAgfVxufVxuIl19