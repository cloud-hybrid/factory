"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const snippet_1 = require("../lib/snippet");
const snippet_selectors_1 = require("../lib/snippet-selectors");
const tablets_1 = require("../lib/tablets/tablets");
const testutil_1 = require("./testutil");
const snippets = [];
const sources = [
    `export class ClassA {
    public someMethod() {
    }
  }`,
    `export class ClassA {
    public someMethod() {
    }
  }
  export interface BeeArgs { readonly value: string; }
  `,
    `export class ClassA {
    public someMethod() {
    }
  }
  export class ClassB {
    public argumentMethod(args: BeeArgs) {
      Array.isArray(args);
    }
  }
  export interface BeeArgs { readonly value: string; }
  `,
];
beforeAll(() => {
    for (const source of sources) {
        const snippet = tablets_1.TranslatedSnippet.fromTypeScript(snippet_1.typeScriptSnippetFromSource(source, testutil_1.testSnippetLocation('selectors'), false));
        snippets.push(snippet);
    }
});
test('longest', () => {
    const result = snippet_selectors_1.longest(snippets);
    expect(result).toEqual(snippets[2]);
});
test('meanLength', () => {
    const result = snippet_selectors_1.meanLength(snippets);
    expect(result).toEqual(snippets[1]);
});
test('shortest', () => {
    const result = snippet_selectors_1.shortest(snippets);
    expect(result).toEqual(snippets[0]);
});
test('mean', () => {
    // Add fake syntax counters to ensure that snippets[1] is the closest euclidean distance.
    snippets[0].addSyntaxKindCounter({ 1: 1, 2: 5, 3: 1 });
    snippets[1].addSyntaxKindCounter({ 1: 1, 2: 3, 3: 2 });
    snippets[2].addSyntaxKindCounter({ 1: 1, 2: 1, 3: 4 });
    const result = snippet_selectors_1.mean(snippets);
    expect(result).toEqual(snippets[1]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25pcHBldC1zZWxlY3RvcnMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNuaXBwZXQtc2VsZWN0b3JzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBNkQ7QUFDN0QsZ0VBQStFO0FBQy9FLG9EQUEyRDtBQUMzRCx5Q0FBaUQ7QUFFakQsTUFBTSxRQUFRLEdBQXdCLEVBQUUsQ0FBQztBQUN6QyxNQUFNLE9BQU8sR0FBYTtJQUN4Qjs7O0lBR0U7SUFDRjs7Ozs7R0FLQztJQUNEOzs7Ozs7Ozs7O0dBVUM7Q0FDRixDQUFDO0FBQ0YsU0FBUyxDQUFDLEdBQUcsRUFBRTtJQUNiLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzVCLE1BQU0sT0FBTyxHQUFHLDJCQUFpQixDQUFDLGNBQWMsQ0FDOUMscUNBQTJCLENBQUMsTUFBTSxFQUFFLDhCQUFtQixDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUM3RSxDQUFDO1FBQ0YsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN4QjtBQUNILENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7SUFDbkIsTUFBTSxNQUFNLEdBQUcsMkJBQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFDdEIsTUFBTSxNQUFNLEdBQUcsOEJBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7SUFDcEIsTUFBTSxNQUFNLEdBQUcsNEJBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7SUFDaEIseUZBQXlGO0lBQ3pGLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2RCxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkQsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sTUFBTSxHQUFHLHdCQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHR5cGVTY3JpcHRTbmlwcGV0RnJvbVNvdXJjZSB9IGZyb20gJy4uL2xpYi9zbmlwcGV0JztcbmltcG9ydCB7IGxvbmdlc3QsIG1lYW4sIG1lYW5MZW5ndGgsIHNob3J0ZXN0IH0gZnJvbSAnLi4vbGliL3NuaXBwZXQtc2VsZWN0b3JzJztcbmltcG9ydCB7IFRyYW5zbGF0ZWRTbmlwcGV0IH0gZnJvbSAnLi4vbGliL3RhYmxldHMvdGFibGV0cyc7XG5pbXBvcnQgeyB0ZXN0U25pcHBldExvY2F0aW9uIH0gZnJvbSAnLi90ZXN0dXRpbCc7XG5cbmNvbnN0IHNuaXBwZXRzOiBUcmFuc2xhdGVkU25pcHBldFtdID0gW107XG5jb25zdCBzb3VyY2VzOiBzdHJpbmdbXSA9IFtcbiAgYGV4cG9ydCBjbGFzcyBDbGFzc0Ege1xuICAgIHB1YmxpYyBzb21lTWV0aG9kKCkge1xuICAgIH1cbiAgfWAsXG4gIGBleHBvcnQgY2xhc3MgQ2xhc3NBIHtcbiAgICBwdWJsaWMgc29tZU1ldGhvZCgpIHtcbiAgICB9XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBCZWVBcmdzIHsgcmVhZG9ubHkgdmFsdWU6IHN0cmluZzsgfVxuICBgLFxuICBgZXhwb3J0IGNsYXNzIENsYXNzQSB7XG4gICAgcHVibGljIHNvbWVNZXRob2QoKSB7XG4gICAgfVxuICB9XG4gIGV4cG9ydCBjbGFzcyBDbGFzc0Ige1xuICAgIHB1YmxpYyBhcmd1bWVudE1ldGhvZChhcmdzOiBCZWVBcmdzKSB7XG4gICAgICBBcnJheS5pc0FycmF5KGFyZ3MpO1xuICAgIH1cbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIEJlZUFyZ3MgeyByZWFkb25seSB2YWx1ZTogc3RyaW5nOyB9XG4gIGAsXG5dO1xuYmVmb3JlQWxsKCgpID0+IHtcbiAgZm9yIChjb25zdCBzb3VyY2Ugb2Ygc291cmNlcykge1xuICAgIGNvbnN0IHNuaXBwZXQgPSBUcmFuc2xhdGVkU25pcHBldC5mcm9tVHlwZVNjcmlwdChcbiAgICAgIHR5cGVTY3JpcHRTbmlwcGV0RnJvbVNvdXJjZShzb3VyY2UsIHRlc3RTbmlwcGV0TG9jYXRpb24oJ3NlbGVjdG9ycycpLCBmYWxzZSksXG4gICAgKTtcbiAgICBzbmlwcGV0cy5wdXNoKHNuaXBwZXQpO1xuICB9XG59KTtcblxudGVzdCgnbG9uZ2VzdCcsICgpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gbG9uZ2VzdChzbmlwcGV0cyk7XG4gIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoc25pcHBldHNbMl0pO1xufSk7XG5cbnRlc3QoJ21lYW5MZW5ndGgnLCAoKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IG1lYW5MZW5ndGgoc25pcHBldHMpO1xuICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHNuaXBwZXRzWzFdKTtcbn0pO1xuXG50ZXN0KCdzaG9ydGVzdCcsICgpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gc2hvcnRlc3Qoc25pcHBldHMpO1xuICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHNuaXBwZXRzWzBdKTtcbn0pO1xuXG50ZXN0KCdtZWFuJywgKCkgPT4ge1xuICAvLyBBZGQgZmFrZSBzeW50YXggY291bnRlcnMgdG8gZW5zdXJlIHRoYXQgc25pcHBldHNbMV0gaXMgdGhlIGNsb3Nlc3QgZXVjbGlkZWFuIGRpc3RhbmNlLlxuICBzbmlwcGV0c1swXS5hZGRTeW50YXhLaW5kQ291bnRlcih7IDE6IDEsIDI6IDUsIDM6IDEgfSk7XG4gIHNuaXBwZXRzWzFdLmFkZFN5bnRheEtpbmRDb3VudGVyKHsgMTogMSwgMjogMywgMzogMiB9KTtcbiAgc25pcHBldHNbMl0uYWRkU3ludGF4S2luZENvdW50ZXIoeyAxOiAxLCAyOiAxLCAzOiA0IH0pO1xuICBjb25zdCByZXN1bHQgPSBtZWFuKHNuaXBwZXRzKTtcbiAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChzbmlwcGV0c1sxXSk7XG59KTtcbiJdfQ==