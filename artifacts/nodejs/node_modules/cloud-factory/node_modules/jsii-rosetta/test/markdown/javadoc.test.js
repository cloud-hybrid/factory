"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../../lib");
const DEBUG = false;
test('inserts paragraph breaks between text but not code samples', () => {
    expectOutput(`
# Hello

Here's a paragraph.

Here's one more.

` +
        '```' +
        `
some_code();

with_newlines();
` +
        '```' +
        `
Some more text here.
`, `
<h1>Hello</h1>
<p>
Here's a paragraph.
<p>
Here's one more.
<p>
<blockquote><pre>
some_code();

with_newlines();
</pre></blockquote>
<p>
Some more text here.
`);
});
test('common formatting tags', () => {
    expectOutput(`
# Hello
## Bye

This is *very* **cool**.

* Yes
* Really
`, `
<h1>Hello</h1>
<p>
<h2>Bye</h2>
<p>
This is <em>very</em> <strong>cool</strong>.
<p>
<ul>
<li>Yes</li>
<li>Really</li>
</ul>
`);
});
test('special characters are escaped', () => {
    expectOutput(`
  Escape this & and this < and this > and also @

  ` +
        '```' +
        `
  if (x < 3) {
    System.Console.WriteLn("bloep");
  }
  ` +
        '```', `
Escape this &amp; and this &lt; and this &gt; and also &#64;
<p>
<blockquote><pre>
if (x &lt; 3) {
  System.Console.WriteLn("bloep");
}
</pre></blockquote>
  `);
});
test('doc comment closing chars are escaped', () => {
    expectOutput(['Escape this */', '```', 'And this */', '```'].join('\n'), `
Escape this *&#47;
<p>
<blockquote><pre>
And this *&#47;
</pre></blockquote>
  `);
});
test('quotes are escaped inside attributes', () => {
    expectOutput(`
  ['tis but a "scratch"](http://bla.ck/"kni"gh&t)

  ![nay merely a "flesh wound" &cet](http://bla.ck/"kni"gh&t.jpg)
  `, `
<a href="http://bla.ck/%22kni%22gh&amp;t">'tis but a "scratch"</a>
<p>
<img alt="nay merely a &quot;flesh wound&quot; &amp;cet" src="http://bla.ck/%22kni%22gh&amp;t.jpg">
  `);
});
function expectOutput(source, expected) {
    if (DEBUG) {
        // tslint:disable-next-line:no-console
        console.log(lib_1.markDownToStructure(source));
    }
    const output = lib_1.markDownToJavaDoc(source);
    expect(output.trim()).toEqual(expected.trim());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamF2YWRvYy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiamF2YWRvYy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW1FO0FBRW5FLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQztBQUVwQixJQUFJLENBQUMsNERBQTRELEVBQUUsR0FBRyxFQUFFO0lBQ3RFLFlBQVksQ0FDVjs7Ozs7OztDQU9IO1FBQ0ssS0FBSztRQUNMOzs7O0NBSUw7UUFDSyxLQUFLO1FBQ0w7O0NBRUwsRUFDRzs7Ozs7Ozs7Ozs7Ozs7Q0FjSCxDQUNFLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7SUFDbEMsWUFBWSxDQUNWOzs7Ozs7OztDQVFILEVBQ0c7Ozs7Ozs7Ozs7O0NBV0gsQ0FDRSxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxFQUFFO0lBQzFDLFlBQVksQ0FDVjs7O0dBR0Q7UUFDRyxLQUFLO1FBQ0w7Ozs7R0FJSDtRQUNHLEtBQUssRUFDUDs7Ozs7Ozs7R0FRRCxDQUNBLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7SUFDakQsWUFBWSxDQUNWLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQzFEOzs7Ozs7R0FNRCxDQUNBLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7SUFDaEQsWUFBWSxDQUNWOzs7O0dBSUQsRUFDQzs7OztHQUlELENBQ0EsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBUyxZQUFZLENBQUMsTUFBYyxFQUFFLFFBQWdCO0lBQ3BELElBQUksS0FBSyxFQUFFO1FBQ1Qsc0NBQXNDO1FBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUMxQztJQUVELE1BQU0sTUFBTSxHQUFHLHVCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDakQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcmtEb3duVG9TdHJ1Y3R1cmUsIG1hcmtEb3duVG9KYXZhRG9jIH0gZnJvbSAnLi4vLi4vbGliJztcblxuY29uc3QgREVCVUcgPSBmYWxzZTtcblxudGVzdCgnaW5zZXJ0cyBwYXJhZ3JhcGggYnJlYWtzIGJldHdlZW4gdGV4dCBidXQgbm90IGNvZGUgc2FtcGxlcycsICgpID0+IHtcbiAgZXhwZWN0T3V0cHV0KFxuICAgIGBcbiMgSGVsbG9cblxuSGVyZSdzIGEgcGFyYWdyYXBoLlxuXG5IZXJlJ3Mgb25lIG1vcmUuXG5cbmAgK1xuICAgICAgJ2BgYCcgK1xuICAgICAgYFxuc29tZV9jb2RlKCk7XG5cbndpdGhfbmV3bGluZXMoKTtcbmAgK1xuICAgICAgJ2BgYCcgK1xuICAgICAgYFxuU29tZSBtb3JlIHRleHQgaGVyZS5cbmAsXG4gICAgYFxuPGgxPkhlbGxvPC9oMT5cbjxwPlxuSGVyZSdzIGEgcGFyYWdyYXBoLlxuPHA+XG5IZXJlJ3Mgb25lIG1vcmUuXG48cD5cbjxibG9ja3F1b3RlPjxwcmU+XG5zb21lX2NvZGUoKTtcblxud2l0aF9uZXdsaW5lcygpO1xuPC9wcmU+PC9ibG9ja3F1b3RlPlxuPHA+XG5Tb21lIG1vcmUgdGV4dCBoZXJlLlxuYCxcbiAgKTtcbn0pO1xuXG50ZXN0KCdjb21tb24gZm9ybWF0dGluZyB0YWdzJywgKCkgPT4ge1xuICBleHBlY3RPdXRwdXQoXG4gICAgYFxuIyBIZWxsb1xuIyMgQnllXG5cblRoaXMgaXMgKnZlcnkqICoqY29vbCoqLlxuXG4qIFllc1xuKiBSZWFsbHlcbmAsXG4gICAgYFxuPGgxPkhlbGxvPC9oMT5cbjxwPlxuPGgyPkJ5ZTwvaDI+XG48cD5cblRoaXMgaXMgPGVtPnZlcnk8L2VtPiA8c3Ryb25nPmNvb2w8L3N0cm9uZz4uXG48cD5cbjx1bD5cbjxsaT5ZZXM8L2xpPlxuPGxpPlJlYWxseTwvbGk+XG48L3VsPlxuYCxcbiAgKTtcbn0pO1xuXG50ZXN0KCdzcGVjaWFsIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQnLCAoKSA9PiB7XG4gIGV4cGVjdE91dHB1dChcbiAgICBgXG4gIEVzY2FwZSB0aGlzICYgYW5kIHRoaXMgPCBhbmQgdGhpcyA+IGFuZCBhbHNvIEBcblxuICBgICtcbiAgICAgICdgYGAnICtcbiAgICAgIGBcbiAgaWYgKHggPCAzKSB7XG4gICAgU3lzdGVtLkNvbnNvbGUuV3JpdGVMbihcImJsb2VwXCIpO1xuICB9XG4gIGAgK1xuICAgICAgJ2BgYCcsXG4gICAgYFxuRXNjYXBlIHRoaXMgJmFtcDsgYW5kIHRoaXMgJmx0OyBhbmQgdGhpcyAmZ3Q7IGFuZCBhbHNvICYjNjQ7XG48cD5cbjxibG9ja3F1b3RlPjxwcmU+XG5pZiAoeCAmbHQ7IDMpIHtcbiAgU3lzdGVtLkNvbnNvbGUuV3JpdGVMbihcImJsb2VwXCIpO1xufVxuPC9wcmU+PC9ibG9ja3F1b3RlPlxuICBgLFxuICApO1xufSk7XG5cbnRlc3QoJ2RvYyBjb21tZW50IGNsb3NpbmcgY2hhcnMgYXJlIGVzY2FwZWQnLCAoKSA9PiB7XG4gIGV4cGVjdE91dHB1dChcbiAgICBbJ0VzY2FwZSB0aGlzICovJywgJ2BgYCcsICdBbmQgdGhpcyAqLycsICdgYGAnXS5qb2luKCdcXG4nKSxcbiAgICBgXG5Fc2NhcGUgdGhpcyAqJiM0NztcbjxwPlxuPGJsb2NrcXVvdGU+PHByZT5cbkFuZCB0aGlzIComIzQ3O1xuPC9wcmU+PC9ibG9ja3F1b3RlPlxuICBgLFxuICApO1xufSk7XG5cbnRlc3QoJ3F1b3RlcyBhcmUgZXNjYXBlZCBpbnNpZGUgYXR0cmlidXRlcycsICgpID0+IHtcbiAgZXhwZWN0T3V0cHV0KFxuICAgIGBcbiAgWyd0aXMgYnV0IGEgXCJzY3JhdGNoXCJdKGh0dHA6Ly9ibGEuY2svXCJrbmlcImdoJnQpXG5cbiAgIVtuYXkgbWVyZWx5IGEgXCJmbGVzaCB3b3VuZFwiICZjZXRdKGh0dHA6Ly9ibGEuY2svXCJrbmlcImdoJnQuanBnKVxuICBgLFxuICAgIGBcbjxhIGhyZWY9XCJodHRwOi8vYmxhLmNrLyUyMmtuaSUyMmdoJmFtcDt0XCI+J3RpcyBidXQgYSBcInNjcmF0Y2hcIjwvYT5cbjxwPlxuPGltZyBhbHQ9XCJuYXkgbWVyZWx5IGEgJnF1b3Q7Zmxlc2ggd291bmQmcXVvdDsgJmFtcDtjZXRcIiBzcmM9XCJodHRwOi8vYmxhLmNrLyUyMmtuaSUyMmdoJmFtcDt0LmpwZ1wiPlxuICBgLFxuICApO1xufSk7XG5cbmZ1bmN0aW9uIGV4cGVjdE91dHB1dChzb3VyY2U6IHN0cmluZywgZXhwZWN0ZWQ6IHN0cmluZykge1xuICBpZiAoREVCVUcpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKG1hcmtEb3duVG9TdHJ1Y3R1cmUoc291cmNlKSk7XG4gIH1cblxuICBjb25zdCBvdXRwdXQgPSBtYXJrRG93blRvSmF2YURvYyhzb3VyY2UpO1xuICBleHBlY3Qob3V0cHV0LnRyaW0oKSkudG9FcXVhbChleHBlY3RlZC50cmltKCkpO1xufVxuIl19