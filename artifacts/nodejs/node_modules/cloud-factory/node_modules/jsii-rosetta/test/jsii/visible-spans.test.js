"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const visible_spans_1 = require("../../lib/typescript/visible-spans");
test('full text visible by default', () => {
    const vis = visible_spans_1.Spans.visibleSpansFromSource('asdf');
    expect(vis.spans).toEqual([{ start: 0, end: 4, visible: true }]);
});
test('initial span visible if directive is hiding', () => {
    const vis = visible_spans_1.Spans.visibleSpansFromSource('asdf\n/// !hide\nxyz');
    expect(vis.spans).toEqual([{ start: 0, end: 5, visible: true }]);
});
test('initial span invisible if directive is showing', () => {
    const s = 'asdf\n/// !show\nxyz';
    const vis = visible_spans_1.Spans.visibleSpansFromSource('asdf\n/// !show\nxyz');
    expect(s.substring(vis.spans[0].start, vis.spans[0].end)).toEqual('xyz');
    expect(vis.spans).toEqual([{ start: 15, end: 18, visible: true }]);
});
test('merge adjacent spans', () => {
    const spans = new visible_spans_1.Spans([
        { start: 10, end: 18 },
        { start: 18, end: 20 },
    ]);
    expect(spans.spans).toEqual([{ start: 10, end: 20 }]);
});
test('trim source to spans', () => {
    const source = ['a', '/// !show', 'b', 'c', '/// !hide', 'd'].join('\n');
    const trimmed = visible_spans_1.trimCompleteSourceToVisible(source);
    expect(trimmed).toEqual('b\nc');
});
test('trim source to spans with leading whitespace ', () => {
    const source = ['a', '   /// !show', 'b', 'c', ' /// !hide', 'd'].join('\n');
    const trimmed = visible_spans_1.trimCompleteSourceToVisible(source);
    expect(trimmed).toEqual('b\nc');
});
test('trim source to spans with trailing whitespace ', () => {
    const source = ['a', '/// !show   ', 'b', 'c', ' /// !hide ', 'd'].join('\n');
    const trimmed = visible_spans_1.trimCompleteSourceToVisible(source);
    expect(trimmed).toEqual('b\nc');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaWJsZS1zcGFucy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidmlzaWJsZS1zcGFucy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0VBQXdGO0FBRXhGLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7SUFDeEMsTUFBTSxHQUFHLEdBQUcscUJBQUssQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRCxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbkUsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsNkNBQTZDLEVBQUUsR0FBRyxFQUFFO0lBQ3ZELE1BQU0sR0FBRyxHQUFHLHFCQUFLLENBQUMsc0JBQXNCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUNqRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbkUsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsZ0RBQWdELEVBQUUsR0FBRyxFQUFFO0lBQzFELE1BQU0sQ0FBQyxHQUFHLHNCQUFzQixDQUFDO0lBQ2pDLE1BQU0sR0FBRyxHQUFHLHFCQUFLLENBQUMsc0JBQXNCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUVqRSxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pFLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNyRSxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFDaEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxxQkFBSyxDQUFDO1FBQ3RCLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFO1FBQ3RCLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFO0tBQ3ZCLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ2hDLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFekUsTUFBTSxPQUFPLEdBQUcsMkNBQTJCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFcEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQywrQ0FBK0MsRUFBRSxHQUFHLEVBQUU7SUFDekQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU3RSxNQUFNLE9BQU8sR0FBRywyQ0FBMkIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVwRCxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGdEQUFnRCxFQUFFLEdBQUcsRUFBRTtJQUMxRCxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTlFLE1BQU0sT0FBTyxHQUFHLDJDQUEyQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXBELE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbEMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTcGFucywgdHJpbUNvbXBsZXRlU291cmNlVG9WaXNpYmxlIH0gZnJvbSAnLi4vLi4vbGliL3R5cGVzY3JpcHQvdmlzaWJsZS1zcGFucyc7XG5cbnRlc3QoJ2Z1bGwgdGV4dCB2aXNpYmxlIGJ5IGRlZmF1bHQnLCAoKSA9PiB7XG4gIGNvbnN0IHZpcyA9IFNwYW5zLnZpc2libGVTcGFuc0Zyb21Tb3VyY2UoJ2FzZGYnKTtcbiAgZXhwZWN0KHZpcy5zcGFucykudG9FcXVhbChbeyBzdGFydDogMCwgZW5kOiA0LCB2aXNpYmxlOiB0cnVlIH1dKTtcbn0pO1xuXG50ZXN0KCdpbml0aWFsIHNwYW4gdmlzaWJsZSBpZiBkaXJlY3RpdmUgaXMgaGlkaW5nJywgKCkgPT4ge1xuICBjb25zdCB2aXMgPSBTcGFucy52aXNpYmxlU3BhbnNGcm9tU291cmNlKCdhc2RmXFxuLy8vICFoaWRlXFxueHl6Jyk7XG4gIGV4cGVjdCh2aXMuc3BhbnMpLnRvRXF1YWwoW3sgc3RhcnQ6IDAsIGVuZDogNSwgdmlzaWJsZTogdHJ1ZSB9XSk7XG59KTtcblxudGVzdCgnaW5pdGlhbCBzcGFuIGludmlzaWJsZSBpZiBkaXJlY3RpdmUgaXMgc2hvd2luZycsICgpID0+IHtcbiAgY29uc3QgcyA9ICdhc2RmXFxuLy8vICFzaG93XFxueHl6JztcbiAgY29uc3QgdmlzID0gU3BhbnMudmlzaWJsZVNwYW5zRnJvbVNvdXJjZSgnYXNkZlxcbi8vLyAhc2hvd1xcbnh5eicpO1xuXG4gIGV4cGVjdChzLnN1YnN0cmluZyh2aXMuc3BhbnNbMF0uc3RhcnQsIHZpcy5zcGFuc1swXS5lbmQpKS50b0VxdWFsKCd4eXonKTtcbiAgZXhwZWN0KHZpcy5zcGFucykudG9FcXVhbChbeyBzdGFydDogMTUsIGVuZDogMTgsIHZpc2libGU6IHRydWUgfV0pO1xufSk7XG5cbnRlc3QoJ21lcmdlIGFkamFjZW50IHNwYW5zJywgKCkgPT4ge1xuICBjb25zdCBzcGFucyA9IG5ldyBTcGFucyhbXG4gICAgeyBzdGFydDogMTAsIGVuZDogMTggfSxcbiAgICB7IHN0YXJ0OiAxOCwgZW5kOiAyMCB9LFxuICBdKTtcblxuICBleHBlY3Qoc3BhbnMuc3BhbnMpLnRvRXF1YWwoW3sgc3RhcnQ6IDEwLCBlbmQ6IDIwIH1dKTtcbn0pO1xuXG50ZXN0KCd0cmltIHNvdXJjZSB0byBzcGFucycsICgpID0+IHtcbiAgY29uc3Qgc291cmNlID0gWydhJywgJy8vLyAhc2hvdycsICdiJywgJ2MnLCAnLy8vICFoaWRlJywgJ2QnXS5qb2luKCdcXG4nKTtcblxuICBjb25zdCB0cmltbWVkID0gdHJpbUNvbXBsZXRlU291cmNlVG9WaXNpYmxlKHNvdXJjZSk7XG5cbiAgZXhwZWN0KHRyaW1tZWQpLnRvRXF1YWwoJ2JcXG5jJyk7XG59KTtcblxudGVzdCgndHJpbSBzb3VyY2UgdG8gc3BhbnMgd2l0aCBsZWFkaW5nIHdoaXRlc3BhY2UgJywgKCkgPT4ge1xuICBjb25zdCBzb3VyY2UgPSBbJ2EnLCAnICAgLy8vICFzaG93JywgJ2InLCAnYycsICcgLy8vICFoaWRlJywgJ2QnXS5qb2luKCdcXG4nKTtcblxuICBjb25zdCB0cmltbWVkID0gdHJpbUNvbXBsZXRlU291cmNlVG9WaXNpYmxlKHNvdXJjZSk7XG5cbiAgZXhwZWN0KHRyaW1tZWQpLnRvRXF1YWwoJ2JcXG5jJyk7XG59KTtcblxudGVzdCgndHJpbSBzb3VyY2UgdG8gc3BhbnMgd2l0aCB0cmFpbGluZyB3aGl0ZXNwYWNlICcsICgpID0+IHtcbiAgY29uc3Qgc291cmNlID0gWydhJywgJy8vLyAhc2hvdyAgICcsICdiJywgJ2MnLCAnIC8vLyAhaGlkZSAnLCAnZCddLmpvaW4oJ1xcbicpO1xuXG4gIGNvbnN0IHRyaW1tZWQgPSB0cmltQ29tcGxldGVTb3VyY2VUb1Zpc2libGUoc291cmNlKTtcblxuICBleHBlY3QodHJpbW1lZCkudG9FcXVhbCgnYlxcbmMnKTtcbn0pO1xuIl19