"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const o_tree_1 = require("../lib/o-tree");
test('test indentation', () => {
    const tree = new o_tree_1.OTree(['{'], ['\na', '\nb', '\nc'], {
        separator: ', ',
        indent: 4,
        suffix: '\n}',
    });
    expect(o_tree_1.renderTree(tree)).toEqual('{\n    a,\n    b,\n    c\n}');
});
test('collapse subsequent unused indentation', () => {
    const tree = new o_tree_1.OTree(['{'], [new o_tree_1.OTree([], ['\na', '\nb', '\nc'], { indent: 4, separator: ', ' })], {
        separator: ', ',
        indent: 4,
        suffix: '\n}',
    });
    expect(o_tree_1.renderTree(tree)).toEqual('{\n    a,\n    b,\n    c\n}');
});
test('don not collapse subsequent USED indentation', () => {
    const tree = new o_tree_1.OTree(['{'], [
        '\na',
        new o_tree_1.OTree(['\n{'], ['\na', '\nb', '\nc'], {
            indent: 4,
            separator: ', ',
            suffix: '\n}',
        }),
        '\nb',
    ], {
        separator: ', ',
        indent: 4,
        suffix: '\n}',
    });
    expect(o_tree_1.renderTree(tree)).toEqual(['{', '    a,', '    {', '        a,', '        b,', '        c', '    },', '    b', '}'].join('\n'));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3RyZWUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm90cmVlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwQ0FBa0Q7QUFFbEQsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtJQUM1QixNQUFNLElBQUksR0FBRyxJQUFJLGNBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRTtRQUNuRCxTQUFTLEVBQUUsSUFBSTtRQUNmLE1BQU0sRUFBRSxDQUFDO1FBQ1QsTUFBTSxFQUFFLEtBQUs7S0FDZCxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsbUJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBQ2xFLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLEdBQUcsRUFBRTtJQUNsRCxNQUFNLElBQUksR0FBRyxJQUFJLGNBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxjQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRTtRQUNwRyxTQUFTLEVBQUUsSUFBSTtRQUNmLE1BQU0sRUFBRSxDQUFDO1FBQ1QsTUFBTSxFQUFFLEtBQUs7S0FDZCxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsbUJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBQ2xFLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDhDQUE4QyxFQUFFLEdBQUcsRUFBRTtJQUN4RCxNQUFNLElBQUksR0FBRyxJQUFJLGNBQUssQ0FDcEIsQ0FBQyxHQUFHLENBQUMsRUFDTDtRQUNFLEtBQUs7UUFDTCxJQUFJLGNBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRTtZQUN4QyxNQUFNLEVBQUUsQ0FBQztZQUNULFNBQVMsRUFBRSxJQUFJO1lBQ2YsTUFBTSxFQUFFLEtBQUs7U0FDZCxDQUFDO1FBQ0YsS0FBSztLQUNOLEVBQ0Q7UUFDRSxTQUFTLEVBQUUsSUFBSTtRQUNmLE1BQU0sRUFBRSxDQUFDO1FBQ1QsTUFBTSxFQUFFLEtBQUs7S0FDZCxDQUNGLENBQUM7SUFFRixNQUFNLENBQUMsbUJBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FDOUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDckcsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT1RyZWUsIHJlbmRlclRyZWUgfSBmcm9tICcuLi9saWIvby10cmVlJztcblxudGVzdCgndGVzdCBpbmRlbnRhdGlvbicsICgpID0+IHtcbiAgY29uc3QgdHJlZSA9IG5ldyBPVHJlZShbJ3snXSwgWydcXG5hJywgJ1xcbmInLCAnXFxuYyddLCB7XG4gICAgc2VwYXJhdG9yOiAnLCAnLFxuICAgIGluZGVudDogNCxcbiAgICBzdWZmaXg6ICdcXG59JyxcbiAgfSk7XG5cbiAgZXhwZWN0KHJlbmRlclRyZWUodHJlZSkpLnRvRXF1YWwoJ3tcXG4gICAgYSxcXG4gICAgYixcXG4gICAgY1xcbn0nKTtcbn0pO1xuXG50ZXN0KCdjb2xsYXBzZSBzdWJzZXF1ZW50IHVudXNlZCBpbmRlbnRhdGlvbicsICgpID0+IHtcbiAgY29uc3QgdHJlZSA9IG5ldyBPVHJlZShbJ3snXSwgW25ldyBPVHJlZShbXSwgWydcXG5hJywgJ1xcbmInLCAnXFxuYyddLCB7IGluZGVudDogNCwgc2VwYXJhdG9yOiAnLCAnIH0pXSwge1xuICAgIHNlcGFyYXRvcjogJywgJyxcbiAgICBpbmRlbnQ6IDQsXG4gICAgc3VmZml4OiAnXFxufScsXG4gIH0pO1xuXG4gIGV4cGVjdChyZW5kZXJUcmVlKHRyZWUpKS50b0VxdWFsKCd7XFxuICAgIGEsXFxuICAgIGIsXFxuICAgIGNcXG59Jyk7XG59KTtcblxudGVzdCgnZG9uIG5vdCBjb2xsYXBzZSBzdWJzZXF1ZW50IFVTRUQgaW5kZW50YXRpb24nLCAoKSA9PiB7XG4gIGNvbnN0IHRyZWUgPSBuZXcgT1RyZWUoXG4gICAgWyd7J10sXG4gICAgW1xuICAgICAgJ1xcbmEnLFxuICAgICAgbmV3IE9UcmVlKFsnXFxueyddLCBbJ1xcbmEnLCAnXFxuYicsICdcXG5jJ10sIHtcbiAgICAgICAgaW5kZW50OiA0LFxuICAgICAgICBzZXBhcmF0b3I6ICcsICcsXG4gICAgICAgIHN1ZmZpeDogJ1xcbn0nLFxuICAgICAgfSksXG4gICAgICAnXFxuYicsXG4gICAgXSxcbiAgICB7XG4gICAgICBzZXBhcmF0b3I6ICcsICcsXG4gICAgICBpbmRlbnQ6IDQsXG4gICAgICBzdWZmaXg6ICdcXG59JyxcbiAgICB9LFxuICApO1xuXG4gIGV4cGVjdChyZW5kZXJUcmVlKHRyZWUpKS50b0VxdWFsKFxuICAgIFsneycsICcgICAgYSwnLCAnICAgIHsnLCAnICAgICAgICBhLCcsICcgICAgICAgIGIsJywgJyAgICAgICAgYycsICcgICAgfSwnLCAnICAgIGInLCAnfSddLmpvaW4oJ1xcbicpLFxuICApO1xufSk7XG4iXX0=