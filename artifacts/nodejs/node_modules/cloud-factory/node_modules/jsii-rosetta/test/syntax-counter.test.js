"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testutil_1 = require("./testutil");
let assembly;
beforeAll(async () => {
    assembly = await testutil_1.TestJsiiModule.fromSource(`
    export class ClassA {
      public someMethod() {
      }
    }
    export class ClassB {
      public argumentMethod(args: BeeArgs) {
        Array.isArray(args);
      }
    }
    export interface BeeArgs { readonly value: string; readonly nested?: NestedType; }
    export interface NestedType { readonly x: number; }
    `, {
        name: 'my_assembly',
        jsii: testutil_1.DUMMY_JSII_CONFIG,
    });
});
afterAll(async () => assembly.cleanup());
test('generate syntax counter', () => {
    const translator = assembly.successfullyCompile(`
    import * as ass from 'my_assembly';
    const a = new ass.ClassA();
  `);
    expect(translator.syntaxKindCounter()).toEqual({
        10: 1,
        75: 4,
        194: 1,
        197: 1,
        225: 1,
        242: 1,
        243: 1,
        254: 1,
        255: 1,
        256: 1,
        290: 1,
    });
});
test('do not count syntax in hidden lines', () => {
    const translator = assembly.successfullyCompile(`
    /// !hide
    import * as ass from 'my_assembly';
    const a = new ass.ClassA();
    /// !show
    const b = new ass.ClassB();
  `);
    expect(translator.syntaxKindCounter()).toEqual({
        75: 3,
        194: 1,
        197: 1,
        225: 1,
        242: 1,
        243: 1,
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ludGF4LWNvdW50ZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN5bnRheC1jb3VudGVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBK0Q7QUFFL0QsSUFBSSxRQUF3QixDQUFDO0FBQzdCLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNuQixRQUFRLEdBQUcsTUFBTSx5QkFBYyxDQUFDLFVBQVUsQ0FDeEM7Ozs7Ozs7Ozs7OztLQVlDLEVBQ0Q7UUFDRSxJQUFJLEVBQUUsYUFBYTtRQUNuQixJQUFJLEVBQUUsNEJBQWlCO0tBQ3hCLENBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0gsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFFekMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUNuQyxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUM7OztHQUcvQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDN0MsRUFBRSxFQUFFLENBQUM7UUFDTCxFQUFFLEVBQUUsQ0FBQztRQUNMLEdBQUcsRUFBRSxDQUFDO1FBQ04sR0FBRyxFQUFFLENBQUM7UUFDTixHQUFHLEVBQUUsQ0FBQztRQUNOLEdBQUcsRUFBRSxDQUFDO1FBQ04sR0FBRyxFQUFFLENBQUM7UUFDTixHQUFHLEVBQUUsQ0FBQztRQUNOLEdBQUcsRUFBRSxDQUFDO1FBQ04sR0FBRyxFQUFFLENBQUM7UUFDTixHQUFHLEVBQUUsQ0FBQztLQUNQLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtJQUMvQyxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUM7Ozs7OztHQU0vQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDN0MsRUFBRSxFQUFFLENBQUM7UUFDTCxHQUFHLEVBQUUsQ0FBQztRQUNOLEdBQUcsRUFBRSxDQUFDO1FBQ04sR0FBRyxFQUFFLENBQUM7UUFDTixHQUFHLEVBQUUsQ0FBQztRQUNOLEdBQUcsRUFBRSxDQUFDO0tBQ1AsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0SnNpaU1vZHVsZSwgRFVNTVlfSlNJSV9DT05GSUcgfSBmcm9tICcuL3Rlc3R1dGlsJztcblxubGV0IGFzc2VtYmx5OiBUZXN0SnNpaU1vZHVsZTtcbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gIGFzc2VtYmx5ID0gYXdhaXQgVGVzdEpzaWlNb2R1bGUuZnJvbVNvdXJjZShcbiAgICBgXG4gICAgZXhwb3J0IGNsYXNzIENsYXNzQSB7XG4gICAgICBwdWJsaWMgc29tZU1ldGhvZCgpIHtcbiAgICAgIH1cbiAgICB9XG4gICAgZXhwb3J0IGNsYXNzIENsYXNzQiB7XG4gICAgICBwdWJsaWMgYXJndW1lbnRNZXRob2QoYXJnczogQmVlQXJncykge1xuICAgICAgICBBcnJheS5pc0FycmF5KGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgICBleHBvcnQgaW50ZXJmYWNlIEJlZUFyZ3MgeyByZWFkb25seSB2YWx1ZTogc3RyaW5nOyByZWFkb25seSBuZXN0ZWQ/OiBOZXN0ZWRUeXBlOyB9XG4gICAgZXhwb3J0IGludGVyZmFjZSBOZXN0ZWRUeXBlIHsgcmVhZG9ubHkgeDogbnVtYmVyOyB9XG4gICAgYCxcbiAgICB7XG4gICAgICBuYW1lOiAnbXlfYXNzZW1ibHknLFxuICAgICAganNpaTogRFVNTVlfSlNJSV9DT05GSUcsXG4gICAgfSxcbiAgKTtcbn0pO1xuYWZ0ZXJBbGwoYXN5bmMgKCkgPT4gYXNzZW1ibHkuY2xlYW51cCgpKTtcblxudGVzdCgnZ2VuZXJhdGUgc3ludGF4IGNvdW50ZXInLCAoKSA9PiB7XG4gIGNvbnN0IHRyYW5zbGF0b3IgPSBhc3NlbWJseS5zdWNjZXNzZnVsbHlDb21waWxlKGBcbiAgICBpbXBvcnQgKiBhcyBhc3MgZnJvbSAnbXlfYXNzZW1ibHknO1xuICAgIGNvbnN0IGEgPSBuZXcgYXNzLkNsYXNzQSgpO1xuICBgKTtcbiAgZXhwZWN0KHRyYW5zbGF0b3Iuc3ludGF4S2luZENvdW50ZXIoKSkudG9FcXVhbCh7XG4gICAgMTA6IDEsIC8vIFN0cmluZ0xpdGVyYWxcbiAgICA3NTogNCwgLy8gSWRlbnRpZmllclxuICAgIDE5NDogMSwgLy8gUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uXG4gICAgMTk3OiAxLCAvLyBOZXdFeHByZXNzaW9uXG4gICAgMjI1OiAxLCAvLyBWYXJpYWJsZVN0YXRlbWVudFxuICAgIDI0MjogMSwgLy8gVmFyaWFibGVEZWNsYXJhdGlvblxuICAgIDI0MzogMSwgLy8gVmFyaWFibGVEZWNsYXJhdGlvbkxpc3RcbiAgICAyNTQ6IDEsIC8vIEltcG9ydERlY2xhcmF0aW9uXG4gICAgMjU1OiAxLCAvLyBJbXBvcnRDbGF1c2VcbiAgICAyNTY6IDEsIC8vIE5hbWVzcGFjZUltcG9ydFxuICAgIDI5MDogMSwgLy8gU291cmNlRmlsZVxuICB9KTtcbn0pO1xuXG50ZXN0KCdkbyBub3QgY291bnQgc3ludGF4IGluIGhpZGRlbiBsaW5lcycsICgpID0+IHtcbiAgY29uc3QgdHJhbnNsYXRvciA9IGFzc2VtYmx5LnN1Y2Nlc3NmdWxseUNvbXBpbGUoYFxuICAgIC8vLyAhaGlkZVxuICAgIGltcG9ydCAqIGFzIGFzcyBmcm9tICdteV9hc3NlbWJseSc7XG4gICAgY29uc3QgYSA9IG5ldyBhc3MuQ2xhc3NBKCk7XG4gICAgLy8vICFzaG93XG4gICAgY29uc3QgYiA9IG5ldyBhc3MuQ2xhc3NCKCk7XG4gIGApO1xuICBleHBlY3QodHJhbnNsYXRvci5zeW50YXhLaW5kQ291bnRlcigpKS50b0VxdWFsKHtcbiAgICA3NTogMywgLy8gSWRlbnRpZmllclxuICAgIDE5NDogMSwgLy8gUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uXG4gICAgMTk3OiAxLCAvLyBOZXdFeHByZXNzaW9uXG4gICAgMjI1OiAxLCAvLyBWYXJpYWJsZVN0YXRlbWVudFxuICAgIDI0MjogMSwgLy8gVmFyaWFibGVEZWNsYXJhdGlvblxuICAgIDI0MzogMSwgLy8gVmFyaWFibGVEZWNsYXJhdGlvbkxpc3RcbiAgfSk7XG59KTtcbiJdfQ==