"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const testutil_1 = require("./testutil");
const location = { api: { api: 'file', fileName: 'test.ts' } };
jest.setTimeout(60000);
test('translator can translate', async () => {
    var _a;
    const translator = new lib_1.RosettaTranslator({
        includeCompilerDiagnostics: true,
    });
    const snippet = lib_1.typeScriptSnippetFromVisibleSource('console.log("hello world");', location, true);
    const { translatedSnippets } = await translator.translateAll([snippet]);
    expect(translatedSnippets).toHaveLength(1);
    expect((_a = translatedSnippets[0].get(lib_1.TargetLanguage.PYTHON)) === null || _a === void 0 ? void 0 : _a.source).toEqual('print("hello world")');
    expect(translator.tablet.snippetKeys).toHaveLength(1);
});
test('translator can read from cache', async () => {
    await testutil_1.withTemporaryDirectory(async () => {
        // GIVEN: prepare cache
        const cacheBuilder = new lib_1.RosettaTranslator({ includeCompilerDiagnostics: true });
        const snippet = lib_1.typeScriptSnippetFromVisibleSource('console.log("hello world");', location, true);
        await cacheBuilder.translateAll([snippet]);
        await cacheBuilder.tablet.save('temp.tabl.json');
        // WHEN: new translatro
        const translator = new lib_1.RosettaTranslator({ includeCompilerDiagnostics: true });
        await translator.loadCache('temp.tabl.json');
        const cached = translator.readFromCache([snippet]);
        expect(cached.translations).toHaveLength(1);
        expect(cached.remaining).toHaveLength(0);
        expect(translator.tablet.snippetKeys).toHaveLength(1);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9zZXR0YS10cmFuc2xhdG9yLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyb3NldHRhLXRyYW5zbGF0b3IudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdDQUFnSDtBQUNoSCx5Q0FBb0Q7QUFFcEQsTUFBTSxRQUFRLEdBQW9CLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQztBQUVoRixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQU0sQ0FBQyxDQUFDO0FBRXhCLElBQUksQ0FBQywwQkFBMEIsRUFBRSxLQUFLLElBQUksRUFBRTs7SUFDMUMsTUFBTSxVQUFVLEdBQUcsSUFBSSx1QkFBaUIsQ0FBQztRQUN2QywwQkFBMEIsRUFBRSxJQUFJO0tBQ2pDLENBQUMsQ0FBQztJQUVILE1BQU0sT0FBTyxHQUFHLHdDQUFrQyxDQUFDLDZCQUE2QixFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVsRyxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsR0FBRyxNQUFNLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBRXhFLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxNQUFNLE9BQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLG9CQUFjLENBQUMsTUFBTSxDQUFDLDBDQUFFLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBRWpHLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4RCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNoRCxNQUFNLGlDQUFzQixDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3RDLHVCQUF1QjtRQUN2QixNQUFNLFlBQVksR0FBRyxJQUFJLHVCQUFpQixDQUFDLEVBQUUsMEJBQTBCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNqRixNQUFNLE9BQU8sR0FBRyx3Q0FBa0MsQ0FBQyw2QkFBNkIsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEcsTUFBTSxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFakQsdUJBQXVCO1FBQ3ZCLE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQWlCLENBQUMsRUFBRSwwQkFBMEIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQy9FLE1BQU0sVUFBVSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTdDLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRW5ELE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm9zZXR0YVRyYW5zbGF0b3IsIHR5cGVTY3JpcHRTbmlwcGV0RnJvbVZpc2libGVTb3VyY2UsIFNuaXBwZXRMb2NhdGlvbiwgVGFyZ2V0TGFuZ3VhZ2UgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHsgd2l0aFRlbXBvcmFyeURpcmVjdG9yeSB9IGZyb20gJy4vdGVzdHV0aWwnO1xuXG5jb25zdCBsb2NhdGlvbjogU25pcHBldExvY2F0aW9uID0geyBhcGk6IHsgYXBpOiAnZmlsZScsIGZpbGVOYW1lOiAndGVzdC50cycgfSB9O1xuXG5qZXN0LnNldFRpbWVvdXQoNjBfMDAwKTtcblxudGVzdCgndHJhbnNsYXRvciBjYW4gdHJhbnNsYXRlJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCB0cmFuc2xhdG9yID0gbmV3IFJvc2V0dGFUcmFuc2xhdG9yKHtcbiAgICBpbmNsdWRlQ29tcGlsZXJEaWFnbm9zdGljczogdHJ1ZSxcbiAgfSk7XG5cbiAgY29uc3Qgc25pcHBldCA9IHR5cGVTY3JpcHRTbmlwcGV0RnJvbVZpc2libGVTb3VyY2UoJ2NvbnNvbGUubG9nKFwiaGVsbG8gd29ybGRcIik7JywgbG9jYXRpb24sIHRydWUpO1xuXG4gIGNvbnN0IHsgdHJhbnNsYXRlZFNuaXBwZXRzIH0gPSBhd2FpdCB0cmFuc2xhdG9yLnRyYW5zbGF0ZUFsbChbc25pcHBldF0pO1xuXG4gIGV4cGVjdCh0cmFuc2xhdGVkU25pcHBldHMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgZXhwZWN0KHRyYW5zbGF0ZWRTbmlwcGV0c1swXS5nZXQoVGFyZ2V0TGFuZ3VhZ2UuUFlUSE9OKT8uc291cmNlKS50b0VxdWFsKCdwcmludChcImhlbGxvIHdvcmxkXCIpJyk7XG5cbiAgZXhwZWN0KHRyYW5zbGF0b3IudGFibGV0LnNuaXBwZXRLZXlzKS50b0hhdmVMZW5ndGgoMSk7XG59KTtcblxudGVzdCgndHJhbnNsYXRvciBjYW4gcmVhZCBmcm9tIGNhY2hlJywgYXN5bmMgKCkgPT4ge1xuICBhd2FpdCB3aXRoVGVtcG9yYXJ5RGlyZWN0b3J5KGFzeW5jICgpID0+IHtcbiAgICAvLyBHSVZFTjogcHJlcGFyZSBjYWNoZVxuICAgIGNvbnN0IGNhY2hlQnVpbGRlciA9IG5ldyBSb3NldHRhVHJhbnNsYXRvcih7IGluY2x1ZGVDb21waWxlckRpYWdub3N0aWNzOiB0cnVlIH0pO1xuICAgIGNvbnN0IHNuaXBwZXQgPSB0eXBlU2NyaXB0U25pcHBldEZyb21WaXNpYmxlU291cmNlKCdjb25zb2xlLmxvZyhcImhlbGxvIHdvcmxkXCIpOycsIGxvY2F0aW9uLCB0cnVlKTtcbiAgICBhd2FpdCBjYWNoZUJ1aWxkZXIudHJhbnNsYXRlQWxsKFtzbmlwcGV0XSk7XG4gICAgYXdhaXQgY2FjaGVCdWlsZGVyLnRhYmxldC5zYXZlKCd0ZW1wLnRhYmwuanNvbicpO1xuXG4gICAgLy8gV0hFTjogbmV3IHRyYW5zbGF0cm9cbiAgICBjb25zdCB0cmFuc2xhdG9yID0gbmV3IFJvc2V0dGFUcmFuc2xhdG9yKHsgaW5jbHVkZUNvbXBpbGVyRGlhZ25vc3RpY3M6IHRydWUgfSk7XG4gICAgYXdhaXQgdHJhbnNsYXRvci5sb2FkQ2FjaGUoJ3RlbXAudGFibC5qc29uJyk7XG5cbiAgICBjb25zdCBjYWNoZWQgPSB0cmFuc2xhdG9yLnJlYWRGcm9tQ2FjaGUoW3NuaXBwZXRdKTtcblxuICAgIGV4cGVjdChjYWNoZWQudHJhbnNsYXRpb25zKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgZXhwZWN0KGNhY2hlZC5yZW1haW5pbmcpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICBleHBlY3QodHJhbnNsYXRvci50YWJsZXQuc25pcHBldEtleXMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgfSk7XG59KTtcbiJdfQ==