"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceParser = void 0;
const codemaker_1 = require("codemaker");
const models_1 = require("./models");
const classNames = [];
const uniqueClassName = (className) => {
    if (classNames.includes(className)) {
        className = `${className}A`;
    }
    classNames.push(className);
    return className;
};
class Parser {
    constructor() {
        this.structs = new Array();
    }
    resourceFrom(provider, type, schema, terraformSchemaType) {
        let baseName = type;
        if (baseName.startsWith(`${provider}_`)) {
            baseName = baseName.substr(provider.length + 1);
        }
        const isProvider = terraformSchemaType === "provider";
        if (isProvider) {
            baseName = `${provider}_${baseName}`;
            if (!("attributes" in schema.block)) {
                schema.block = { attributes: {}, block_types: {} };
            }
            // somehow missing from provider schema
            schema.block.attributes["alias"] = {
                type: "string",
                description: "Alias name",
                optional: true,
                computed: false,
            };
        }
        const className = uniqueClassName(codemaker_1.toPascalCase(baseName));
        // avoid naming collision - see https://github.com/hashicorp/terraform-cdk/issues/299
        const configStructName = uniqueClassName(`${className}Config`);
        const fileName = baseName === "index"
            ? "index-resource.ts"
            : `${codemaker_1.toSnakeCase(baseName).replace(/_/g, "-")}.ts`;
        const filePath = `providers/${codemaker_1.toSnakeCase(provider)}/${fileName}`;
        const attributes = this.renderAttributesForBlock(new models_1.Scope({
            name: baseName,
            isProvider,
            parent: isProvider
                ? undefined
                : new models_1.Scope({ name: provider, isProvider: true }),
        }), schema.block);
        const resourceModel = new models_1.ResourceModel({
            terraformType: type,
            baseName,
            fileName,
            filePath,
            className,
            schema,
            provider,
            attributes,
            terraformSchemaType,
            structs: this.structs,
            configStructName,
        });
        return resourceModel;
    }
    renderAttributeType(scope, attributeType) {
        const parent = scope[scope.length - 1];
        const level = scope.length;
        const isComputed = !!scope.find((e) => e.isComputed === true);
        const isOptional = parent.isOptional;
        const isRequired = parent.isRequired;
        if (typeof attributeType === "string") {
            switch (attributeType) {
                case "bool":
                    return new models_1.AttributeTypeModel("boolean", {
                        isComputed,
                        isOptional,
                        isRequired,
                        level,
                    });
                case "string":
                    return new models_1.AttributeTypeModel("string", {
                        isComputed,
                        isOptional,
                        isRequired,
                        level,
                    });
                case "number":
                    return new models_1.AttributeTypeModel("number", {
                        isComputed,
                        isOptional,
                        isRequired,
                        level,
                    });
                case "dynamic":
                    return new models_1.AttributeTypeModel("any", {
                        isComputed,
                        isOptional,
                        isRequired,
                        level,
                        isMap: true,
                    });
                default:
                    throw new Error(`invalid primitive type ${attributeType}`);
            }
        }
        if (Array.isArray(attributeType)) {
            if (attributeType.length !== 2) {
                throw new Error(`unexpected array`);
            }
            const [kind, type] = attributeType;
            if (kind === "set" || kind === "list") {
                const attrType = this.renderAttributeType(scope, type);
                attrType.isList = true;
                attrType.isComputed = isComputed;
                attrType.isOptional = isOptional;
                attrType.isRequired = isRequired;
                attrType.level = level;
                return attrType;
            }
            if (kind === "map") {
                const valueType = this.renderAttributeType(scope, type);
                valueType.isMap = true;
                valueType.isComputed = isComputed;
                valueType.isOptional = isOptional;
                valueType.isRequired = isRequired;
                valueType.level = level;
                return valueType;
            }
            if (kind === "object") {
                const objAttributes = type;
                const attributes = {};
                for (const [name, type] of Object.entries(objAttributes)) {
                    attributes[name] = { type };
                }
                const struct = this.addAnonymousStruct(scope, attributes);
                const model = new models_1.AttributeTypeModel(struct.name, {
                    struct,
                    isComputed,
                    isOptional,
                    isRequired,
                    level,
                });
                return model;
            }
        }
        throw new Error(`unknown type ${attributeType}`);
    }
    renderAttributesForBlock(parentType, block) {
        const attributes = new Array();
        for (const [terraformAttributeName, att] of Object.entries(block.attributes || {})) {
            if (parentType.inBlockType && att.computed && !!att.optional === false)
                continue;
            const type = this.renderAttributeType([
                parentType,
                new models_1.Scope({
                    name: terraformAttributeName,
                    parent: parentType,
                    isProvider: parentType.isProvider,
                    isComputed: !!att.computed,
                    isOptional: !!att.optional,
                    isRequired: !!att.required,
                }),
            ], att.type);
            const name = codemaker_1.toCamelCase(terraformAttributeName);
            attributes.push(new models_1.AttributeModel({
                terraformFullName: parentType.fullName(terraformAttributeName),
                description: att.description,
                name,
                storageName: `_${name}`,
                computed: !!att.computed,
                optional: !!att.optional,
                terraformName: terraformAttributeName,
                type,
                provider: parentType.isProvider,
                required: !!att.required,
            }));
        }
        for (const [blockTypeName, blockType] of Object.entries(block.block_types || {})) {
            // create a struct for this block
            const blockAttributes = this.renderAttributesForBlock(new models_1.Scope({
                name: `${parentType.name}_${blockTypeName}`,
                parent: parentType,
                isProvider: parentType.isProvider,
                inBlockType: true,
            }), blockType.block);
            const blockStruct = this.addStruct([
                parentType,
                new models_1.Scope({
                    name: blockTypeName,
                    parent: parentType,
                    isProvider: parentType.isProvider,
                }),
            ], blockAttributes, blockType.nesting_mode === "list" && blockType.max_items === 1);
            // define the attribute
            attributes.push(attributeForBlockType(blockTypeName, blockType, blockStruct, parentType.isProvider, parentType));
        }
        return attributes;
        function attributeForBlockType(terraformName, blockType, struct, isProvider, parent) {
            const name = codemaker_1.toCamelCase(terraformName);
            let optional;
            let required;
            switch (blockType.nesting_mode) {
                case "single":
                    optional = !struct.attributes.some((x) => !x.optional);
                    required = !struct.attributes.some((x) => !x.required);
                    return new models_1.AttributeModel({
                        name,
                        terraformName,
                        terraformFullName: parent.fullName(terraformName),
                        type: new models_1.AttributeTypeModel(struct.name, {
                            struct,
                            isOptional: optional,
                            isRequired: required,
                            isSingleItem: true,
                        }),
                        description: `${terraformName} block`,
                        storageName: `_${name}`,
                        optional,
                        computed: false,
                        provider: isProvider,
                        required,
                    });
                case "map":
                    return new models_1.AttributeModel({
                        name,
                        terraformName,
                        terraformFullName: parent.fullName(terraformName),
                        type: new models_1.AttributeTypeModel(struct.name, { struct, isMap: true }),
                        description: `${terraformName} block`,
                        storageName: `_${name}`,
                        optional: false,
                        computed: false,
                        provider: isProvider,
                        required: false,
                    });
                case "list":
                case "set":
                    optional =
                        blockType.min_items === undefined ? true : blockType.min_items < 1;
                    required =
                        blockType.min_items === undefined ? false : blockType.min_items > 0;
                    return new models_1.AttributeModel({
                        name,
                        terraformName: terraformName,
                        terraformFullName: parent.fullName(terraformName),
                        type: new models_1.AttributeTypeModel(struct.name, {
                            struct,
                            isList: true,
                            isOptional: optional,
                            isRequired: required,
                            isSingleItem: blockType.max_items === 1,
                        }),
                        description: `${terraformName} block`,
                        storageName: `_${name}`,
                        optional,
                        computed: false,
                        provider: isProvider,
                        required,
                    });
            }
        }
    }
    addAnonymousStruct(scope, attrs) {
        const attributes = new Array();
        const parent = scope[scope.length - 1];
        const computed = !!parent.isComputed;
        const optional = !!parent.isOptional;
        const required = !!parent.isRequired;
        for (const [terraformName, att] of Object.entries(attrs)) {
            const name = codemaker_1.toCamelCase(terraformName);
            attributes.push(new models_1.AttributeModel({
                name,
                storageName: `_${name}`,
                computed: computed,
                description: att.description,
                optional: optional,
                terraformName,
                terraformFullName: parent.fullName(terraformName),
                type: this.renderAttributeType([
                    ...scope,
                    new models_1.Scope({
                        name: terraformName,
                        parent,
                        isProvider: parent.isProvider,
                        isComputed: computed,
                        isOptional: optional,
                        isRequired: required,
                    }),
                ], att.type),
                provider: parent.isProvider,
                required: required,
            }));
        }
        return this.addStruct(scope, attributes);
    }
    addStruct(scope, attributes, isSingleItem = false) {
        const name = uniqueClassName(codemaker_1.toPascalCase(scope.map((x) => codemaker_1.toSnakeCase(x.name)).join("_")));
        const parent = scope[scope.length - 1];
        // blockType.nesting_mode => list/set & blockType.max_items === 1,
        const isClass = (parent.isComputed && !parent.isOptional) || isSingleItem;
        const isAnonymous = true;
        const s = new models_1.Struct(name, attributes, isClass, isAnonymous, isSingleItem);
        this.structs.push(s);
        return s;
    }
}
class ResourceParser {
    parse(provider, type, schema, terraformType) {
        const parser = new Parser();
        const resource = parser.resourceFrom(provider, type, schema, terraformType);
        return resource;
    }
}
exports.ResourceParser = ResourceParser;
//# sourceMappingURL=data:application/json;base64,