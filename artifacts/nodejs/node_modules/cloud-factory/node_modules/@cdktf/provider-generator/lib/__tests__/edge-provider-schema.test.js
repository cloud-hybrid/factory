"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const __1 = require("..");
const util_1 = require("../util");
const edge_provider_schema_1 = require("./edge-provider-schema");
describe("Edge Provider Schema", () => {
    it("compiles to Typescript", async () => {
        return util_1.mkdtemp(async (dir) => {
            await __1.generateProviderBindingsFromSchema(dir, edge_provider_schema_1.edgeSchema);
            fs.readdirSync(path.join(dir, "providers", "edge")).forEach((file) => {
                if (!file.endsWith(".ts")) {
                    return;
                }
                expect(fs.readFileSync(path.join(dir, "providers", "edge", file), "utf8")).toMatchSnapshot(file);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRnZS1wcm92aWRlci1zY2hlbWEudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVkZ2UtcHJvdmlkZXItc2NoZW1hLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkNBQStCO0FBQy9CLDJDQUE2QjtBQUM3QiwwQkFBd0Q7QUFDeEQsa0NBQWtDO0FBQ2xDLGlFQUFvRDtBQUVwRCxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN0QyxPQUFPLGNBQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDM0IsTUFBTSxzQ0FBa0MsQ0FBQyxHQUFHLEVBQUUsaUNBQVUsQ0FBQyxDQUFDO1lBRTFELEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ25FLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUN6QixPQUFPO2lCQUNSO2dCQUNELE1BQU0sQ0FDSixFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQ25FLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzFCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZVByb3ZpZGVyQmluZGluZ3NGcm9tU2NoZW1hIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBta2R0ZW1wIH0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7IGVkZ2VTY2hlbWEgfSBmcm9tIFwiLi9lZGdlLXByb3ZpZGVyLXNjaGVtYVwiO1xuXG5kZXNjcmliZShcIkVkZ2UgUHJvdmlkZXIgU2NoZW1hXCIsICgpID0+IHtcbiAgaXQoXCJjb21waWxlcyB0byBUeXBlc2NyaXB0XCIsIGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gbWtkdGVtcChhc3luYyAoZGlyKSA9PiB7XG4gICAgICBhd2FpdCBnZW5lcmF0ZVByb3ZpZGVyQmluZGluZ3NGcm9tU2NoZW1hKGRpciwgZWRnZVNjaGVtYSk7XG5cbiAgICAgIGZzLnJlYWRkaXJTeW5jKHBhdGguam9pbihkaXIsIFwicHJvdmlkZXJzXCIsIFwiZWRnZVwiKSkuZm9yRWFjaCgoZmlsZSkgPT4ge1xuICAgICAgICBpZiAoIWZpbGUuZW5kc1dpdGgoXCIudHNcIikpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgIGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oZGlyLCBcInByb3ZpZGVyc1wiLCBcImVkZ2VcIiwgZmlsZSksIFwidXRmOFwiKVxuICAgICAgICApLnRvTWF0Y2hTbmFwc2hvdChmaWxlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19