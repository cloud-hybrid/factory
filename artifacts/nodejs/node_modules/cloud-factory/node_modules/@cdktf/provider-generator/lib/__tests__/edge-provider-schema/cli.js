#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const _1 = require(".");
const __1 = require("../..");
// This script builds the schema for the edge provider into the given directory for all languages.
const args = process.argv.slice(2);
const targetPath = args[0];
if (!targetPath) {
    console.error("No target path specified");
    process.exit(1);
}
// Clear / Create path
fs.mkdirpSync(targetPath);
fs.emptyDirSync(targetPath);
const deps = ["@types/node", "constructs", "cdktf"];
(async () => {
    await __1.generateProviderBindingsFromSchema(targetPath, _1.edgeSchema, {
        entrypoint: path.join("providers", "edge", "index.ts"),
        deps: deps.map((dep) => path.dirname(require.resolve(`${dep}/package.json`))),
        moduleKey: "edge",
        python: {
            outdir: path.resolve(targetPath, "python"),
            moduleName: "edge",
        },
        java: {
            outdir: path.resolve(targetPath, "java"),
            package: `imports.edgeprovider`,
        },
        csharp: {
            outdir: path.resolve(targetPath, "csharp"),
            namespace: "Providers.Edge",
        },
        golang: {
            outdir: path.resolve(targetPath, "go"),
            moduleName: "cdk.tf/go/stack/generated/hashicorp",
            packageName: "edge",
        },
    });
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSwyQ0FBNkI7QUFDN0IsNkNBQStCO0FBQy9CLHdCQUErQjtBQUMvQiw2QkFBMkQ7QUFFM0Qsa0dBQWtHO0FBQ2xHLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25DLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUUzQixJQUFJLENBQUMsVUFBVSxFQUFFO0lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQzFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDakI7QUFFRCxzQkFBc0I7QUFDdEIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMxQixFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRTVCLE1BQU0sSUFBSSxHQUFHLENBQUMsYUFBYSxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUVwRCxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ1YsTUFBTSxzQ0FBa0MsQ0FBQyxVQUFVLEVBQUUsYUFBVSxFQUFFO1FBQy9ELFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDO1FBQ3RELElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUNyRDtRQUNELFNBQVMsRUFBRSxNQUFNO1FBQ2pCLE1BQU0sRUFBRTtZQUNOLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUM7WUFDMUMsVUFBVSxFQUFFLE1BQU07U0FDbkI7UUFDRCxJQUFJLEVBQUU7WUFDSixNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDO1lBQ3hDLE9BQU8sRUFBRSxzQkFBc0I7U0FDaEM7UUFDRCxNQUFNLEVBQUU7WUFDTixNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDO1lBQzFDLFNBQVMsRUFBRSxnQkFBZ0I7U0FDNUI7UUFDRCxNQUFNLEVBQUU7WUFDTixNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDO1lBQ3RDLFVBQVUsRUFBRSxxQ0FBcUM7WUFDakQsV0FBVyxFQUFFLE1BQU07U0FDcEI7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgeyBlZGdlU2NoZW1hIH0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IGdlbmVyYXRlUHJvdmlkZXJCaW5kaW5nc0Zyb21TY2hlbWEgfSBmcm9tIFwiLi4vLi5cIjtcblxuLy8gVGhpcyBzY3JpcHQgYnVpbGRzIHRoZSBzY2hlbWEgZm9yIHRoZSBlZGdlIHByb3ZpZGVyIGludG8gdGhlIGdpdmVuIGRpcmVjdG9yeSBmb3IgYWxsIGxhbmd1YWdlcy5cbmNvbnN0IGFyZ3MgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5jb25zdCB0YXJnZXRQYXRoID0gYXJnc1swXTtcblxuaWYgKCF0YXJnZXRQYXRoKSB7XG4gIGNvbnNvbGUuZXJyb3IoXCJObyB0YXJnZXQgcGF0aCBzcGVjaWZpZWRcIik7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn1cblxuLy8gQ2xlYXIgLyBDcmVhdGUgcGF0aFxuZnMubWtkaXJwU3luYyh0YXJnZXRQYXRoKTtcbmZzLmVtcHR5RGlyU3luYyh0YXJnZXRQYXRoKTtcblxuY29uc3QgZGVwcyA9IFtcIkB0eXBlcy9ub2RlXCIsIFwiY29uc3RydWN0c1wiLCBcImNka3RmXCJdO1xuXG4oYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBnZW5lcmF0ZVByb3ZpZGVyQmluZGluZ3NGcm9tU2NoZW1hKHRhcmdldFBhdGgsIGVkZ2VTY2hlbWEsIHtcbiAgICBlbnRyeXBvaW50OiBwYXRoLmpvaW4oXCJwcm92aWRlcnNcIiwgXCJlZGdlXCIsIFwiaW5kZXgudHNcIiksXG4gICAgZGVwczogZGVwcy5tYXAoKGRlcCkgPT5cbiAgICAgIHBhdGguZGlybmFtZShyZXF1aXJlLnJlc29sdmUoYCR7ZGVwfS9wYWNrYWdlLmpzb25gKSlcbiAgICApLFxuICAgIG1vZHVsZUtleTogXCJlZGdlXCIsXG4gICAgcHl0aG9uOiB7XG4gICAgICBvdXRkaXI6IHBhdGgucmVzb2x2ZSh0YXJnZXRQYXRoLCBcInB5dGhvblwiKSxcbiAgICAgIG1vZHVsZU5hbWU6IFwiZWRnZVwiLFxuICAgIH0sXG4gICAgamF2YToge1xuICAgICAgb3V0ZGlyOiBwYXRoLnJlc29sdmUodGFyZ2V0UGF0aCwgXCJqYXZhXCIpLFxuICAgICAgcGFja2FnZTogYGltcG9ydHMuZWRnZXByb3ZpZGVyYCxcbiAgICB9LFxuICAgIGNzaGFycDoge1xuICAgICAgb3V0ZGlyOiBwYXRoLnJlc29sdmUodGFyZ2V0UGF0aCwgXCJjc2hhcnBcIiksXG4gICAgICBuYW1lc3BhY2U6IFwiUHJvdmlkZXJzLkVkZ2VcIixcbiAgICB9LFxuICAgIGdvbGFuZzoge1xuICAgICAgb3V0ZGlyOiBwYXRoLnJlc29sdmUodGFyZ2V0UGF0aCwgXCJnb1wiKSxcbiAgICAgIG1vZHVsZU5hbWU6IFwiY2RrLnRmL2dvL3N0YWNrL2dlbmVyYXRlZC9oYXNoaWNvcnBcIixcbiAgICAgIHBhY2thZ2VOYW1lOiBcImVkZ2VcIixcbiAgICB9LFxuICB9KTtcbn0pKCk7XG4iXX0=