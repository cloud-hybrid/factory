"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigStruct = exports.Struct = void 0;
const util_1 = require("../../../util");
class Struct {
    constructor(name, attributes, isClass = false, isAnonymous = false, isSingleItem = false) {
        this.name = name;
        this.attributes = attributes;
        this.isClass = isClass;
        this.isAnonymous = isAnonymous;
        this.isSingleItem = isSingleItem;
    }
    get assignableAttributes() {
        const attributes = this.isAnonymous
            ? this.attributes
            : this.attributes.filter((attribute) => attribute.isAssignable);
        return this.filterIgnoredAttributes(attributes);
    }
    get optionalAttributes() {
        return this.attributes.filter((attribute) => attribute.optional);
    }
    get allOptional() {
        return (this.attributes.filter((attribute) => !attribute.optional && !attribute.computed).length == 0);
    }
    get attributeType() {
        return `${this.name}${this.allOptional ? " = {}" : ""}`;
    }
    filterIgnoredAttributes(attributes) {
        return attributes;
    }
    get extends() {
        return "";
    }
    get attributeTypeNames() {
        return this.attributes.map((a) => a.type.typeName);
    }
    get mapperName() {
        return `${util_1.downcaseFirst(this.name)}ToTerraform`;
    }
    get outputReferenceName() {
        return `${this.name}OutputReference`;
    }
    get isProvider() {
        return this.attributes.some((att) => att.isProvider);
    }
    get attributeTypeNamesFromClasses() {
        return this.attributes
            .filter((a) => { var _a; return (_a = a.type.struct) === null || _a === void 0 ? void 0 : _a.isClass; })
            .map((a) => a.type.typeName);
    }
}
exports.Struct = Struct;
class ConfigStruct extends Struct {
    filterIgnoredAttributes(attributes) {
        return attributes.filter((attribute) => !attribute.isConfigIgnored);
    }
    get extends() {
        return ` extends cdktf.TerraformMetaArguments`;
    }
}
exports.ConfigStruct = ConfigStruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RydWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHdDQUE4QztBQUM5QyxNQUFhLE1BQU07SUFDakIsWUFDa0IsSUFBWSxFQUNaLFVBQTRCLEVBQzVCLFVBQVUsS0FBSyxFQUNmLGNBQWMsS0FBSyxFQUM1QixlQUFlLEtBQUs7UUFKWCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osZUFBVSxHQUFWLFVBQVUsQ0FBa0I7UUFDNUIsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNmLGdCQUFXLEdBQVgsV0FBVyxDQUFRO1FBQzVCLGlCQUFZLEdBQVosWUFBWSxDQUFRO0lBQzFCLENBQUM7SUFFSixJQUFXLG9CQUFvQjtRQUM3QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVztZQUNqQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVU7WUFDakIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbEUsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELElBQVcsa0JBQWtCO1FBQzNCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsSUFBVyxXQUFXO1FBQ3BCLE9BQU8sQ0FDTCxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FDcEIsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQzFELENBQUMsTUFBTSxJQUFJLENBQUMsQ0FDZCxDQUFDO0lBQ0osQ0FBQztJQUVELElBQVcsYUFBYTtRQUN0QixPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQzFELENBQUM7SUFFUyx1QkFBdUIsQ0FDL0IsVUFBNEI7UUFFNUIsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQVcsT0FBTztRQUNoQixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxJQUFXLGtCQUFrQjtRQUMzQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxJQUFXLFVBQVU7UUFDbkIsT0FBTyxHQUFHLG9CQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDbEQsQ0FBQztJQUVELElBQVcsbUJBQW1CO1FBQzVCLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxpQkFBaUIsQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsSUFBVyw2QkFBNkI7UUFDdEMsT0FBTyxJQUFJLENBQUMsVUFBVTthQUNuQixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSx3QkFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sMENBQUUsT0FBTyxHQUFBLENBQUM7YUFDckMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Q0FDRjtBQS9ERCx3QkErREM7QUFFRCxNQUFhLFlBQWEsU0FBUSxNQUFNO0lBQzVCLHVCQUF1QixDQUMvQixVQUE0QjtRQUU1QixPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxJQUFXLE9BQU87UUFDaEIsT0FBTyx1Q0FBdUMsQ0FBQztJQUNqRCxDQUFDO0NBQ0Y7QUFWRCxvQ0FVQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF0dHJpYnV0ZU1vZGVsIH0gZnJvbSBcIi4vYXR0cmlidXRlLW1vZGVsXCI7XG5pbXBvcnQgeyBkb3duY2FzZUZpcnN0IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxcIjtcbmV4cG9ydCBjbGFzcyBTdHJ1Y3Qge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nLFxuICAgIHB1YmxpYyByZWFkb25seSBhdHRyaWJ1dGVzOiBBdHRyaWJ1dGVNb2RlbFtdLFxuICAgIHB1YmxpYyByZWFkb25seSBpc0NsYXNzID0gZmFsc2UsXG4gICAgcHVibGljIHJlYWRvbmx5IGlzQW5vbnltb3VzID0gZmFsc2UsXG4gICAgcHVibGljIGlzU2luZ2xlSXRlbSA9IGZhbHNlXG4gICkge31cblxuICBwdWJsaWMgZ2V0IGFzc2lnbmFibGVBdHRyaWJ1dGVzKCk6IEF0dHJpYnV0ZU1vZGVsW10ge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB0aGlzLmlzQW5vbnltb3VzXG4gICAgICA/IHRoaXMuYXR0cmlidXRlc1xuICAgICAgOiB0aGlzLmF0dHJpYnV0ZXMuZmlsdGVyKChhdHRyaWJ1dGUpID0+IGF0dHJpYnV0ZS5pc0Fzc2lnbmFibGUpO1xuICAgIHJldHVybiB0aGlzLmZpbHRlcklnbm9yZWRBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpO1xuICB9XG5cbiAgcHVibGljIGdldCBvcHRpb25hbEF0dHJpYnV0ZXMoKTogQXR0cmlidXRlTW9kZWxbXSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5maWx0ZXIoKGF0dHJpYnV0ZSkgPT4gYXR0cmlidXRlLm9wdGlvbmFsKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYWxsT3B0aW9uYWwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuYXR0cmlidXRlcy5maWx0ZXIoXG4gICAgICAgIChhdHRyaWJ1dGUpID0+ICFhdHRyaWJ1dGUub3B0aW9uYWwgJiYgIWF0dHJpYnV0ZS5jb21wdXRlZFxuICAgICAgKS5sZW5ndGggPT0gMFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGF0dHJpYnV0ZVR5cGUoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMubmFtZX0ke3RoaXMuYWxsT3B0aW9uYWwgPyBcIiA9IHt9XCIgOiBcIlwifWA7XG4gIH1cblxuICBwcm90ZWN0ZWQgZmlsdGVySWdub3JlZEF0dHJpYnV0ZXMoXG4gICAgYXR0cmlidXRlczogQXR0cmlidXRlTW9kZWxbXVxuICApOiBBdHRyaWJ1dGVNb2RlbFtdIHtcbiAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZXh0ZW5kcygpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgcHVibGljIGdldCBhdHRyaWJ1dGVUeXBlTmFtZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMubWFwKChhKSA9PiBhLnR5cGUudHlwZU5hbWUpO1xuICB9XG5cbiAgcHVibGljIGdldCBtYXBwZXJOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke2Rvd25jYXNlRmlyc3QodGhpcy5uYW1lKX1Ub1RlcnJhZm9ybWA7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG91dHB1dFJlZmVyZW5jZU5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5uYW1lfU91dHB1dFJlZmVyZW5jZWA7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGlzUHJvdmlkZXIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5zb21lKChhdHQpID0+IGF0dC5pc1Byb3ZpZGVyKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYXR0cmlidXRlVHlwZU5hbWVzRnJvbUNsYXNzZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXNcbiAgICAgIC5maWx0ZXIoKGEpID0+IGEudHlwZS5zdHJ1Y3Q/LmlzQ2xhc3MpXG4gICAgICAubWFwKChhKSA9PiBhLnR5cGUudHlwZU5hbWUpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25maWdTdHJ1Y3QgZXh0ZW5kcyBTdHJ1Y3Qge1xuICBwcm90ZWN0ZWQgZmlsdGVySWdub3JlZEF0dHJpYnV0ZXMoXG4gICAgYXR0cmlidXRlczogQXR0cmlidXRlTW9kZWxbXVxuICApOiBBdHRyaWJ1dGVNb2RlbFtdIHtcbiAgICByZXR1cm4gYXR0cmlidXRlcy5maWx0ZXIoKGF0dHJpYnV0ZSkgPT4gIWF0dHJpYnV0ZS5pc0NvbmZpZ0lnbm9yZWQpO1xuICB9XG5cbiAgcHVibGljIGdldCBleHRlbmRzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAgZXh0ZW5kcyBjZGt0Zi5UZXJyYWZvcm1NZXRhQXJndW1lbnRzYDtcbiAgfVxufVxuIl19