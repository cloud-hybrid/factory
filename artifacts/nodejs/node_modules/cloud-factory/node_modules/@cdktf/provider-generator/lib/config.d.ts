import { Language } from "./get/constructs-maker";
export interface TerraformDependencyConstraint {
    readonly name: string;
    readonly source: string;
    readonly version?: string;
    readonly fqn: string;
    readonly namespace?: string;
}
export declare function isLocalModule(source: string): boolean;
export declare class TerraformModuleConstraint implements TerraformDependencyConstraint {
    readonly name: string;
    readonly source: string;
    readonly localSource?: string;
    readonly fqn: string;
    readonly version?: string;
    readonly namespace?: string;
    constructor(item: TerraformDependencyConstraint | string);
    get className(): string;
    get fileName(): string;
    private parseDependencyConstraint;
}
export declare class TerraformProviderConstraint implements TerraformDependencyConstraint {
    readonly name: string;
    readonly source: string;
    readonly version?: string;
    readonly fqn: string;
    readonly namespace?: string;
    constructor(item: TerraformDependencyConstraint | string);
    private parseDependencyConstraint;
}
export interface Config {
    readonly app?: string;
    readonly language?: Language;
    readonly output: string;
    readonly codeMakerOutput: string;
    terraformProviders?: TerraformProviderConstraint[];
    terraformModules?: TerraformModuleConstraint[];
    checkCodeMakerOutput?: boolean;
    readonly context?: {
        [key: string]: any;
    };
}
export declare const parseConfig: (configJSON?: string | undefined) => Config;
export declare function readConfigSync(configFile?: string): Config;
