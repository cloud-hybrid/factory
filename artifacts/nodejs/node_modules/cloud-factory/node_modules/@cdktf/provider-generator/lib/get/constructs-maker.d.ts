import { CodeMaker } from "codemaker";
import * as srcmak from "jsii-srcmak";
import { TerraformDependencyConstraint } from "../config";
import { ProviderSchema } from "./generator/provider-schema";
import { ModuleSchema } from "./generator/module-schema";
export declare enum Language {
    TYPESCRIPT = "typescript",
    PYTHON = "python",
    CSHARP = "csharp",
    JAVA = "java",
    GO = "go"
}
export declare const LANGUAGES: Language[];
export declare function generateJsiiLanguage(code: CodeMaker, opts: srcmak.Options): Promise<void>;
export interface GetOptions {
    readonly targetLanguage: Language;
    readonly codeMakerOutput: string;
    /**
     * Path to copy the output .jsii file.
     * @default - jsii file is not emitted
     */
    readonly outputJsii?: string;
}
export declare abstract class ConstructsMakerTarget {
    readonly constraint: TerraformDependencyConstraint;
    readonly targetLanguage: Language;
    readonly fileName: string;
    constructor(constraint: TerraformDependencyConstraint, targetLanguage: Language);
    static from(constraint: TerraformDependencyConstraint, targetLanguage: Language): ConstructsMakerModuleTarget | ConstructsMakerProviderTarget;
    get version(): string | undefined;
    get source(): string;
    get name(): string;
    get fqn(): string;
    get namespace(): string | undefined;
    get moduleKey(): string;
    abstract get srcMakName(): string;
    abstract get isModule(): boolean;
    abstract get isProvider(): boolean;
    abstract get trackingPayload(): Record<string, any>;
    protected abstract get simplifiedName(): string;
    protected abstract typesPath(name: string): string;
}
export declare class ConstructsMakerModuleTarget extends ConstructsMakerTarget {
    spec?: ModuleSchema;
    get isModule(): boolean;
    get isProvider(): boolean;
    get srcMakName(): string;
    get trackingPayload(): {
        name: string;
        fullName: string;
        version: string | undefined;
        type: string;
    };
    protected typesPath(name: string): string;
    protected get simplifiedName(): string;
}
export declare class ConstructsMakerProviderTarget extends ConstructsMakerTarget {
    spec?: ProviderSchema;
    get isModule(): boolean;
    get isProvider(): boolean;
    get srcMakName(): string;
    get trackingPayload(): {
        name: string;
        fullName: string;
        version: string | undefined;
        type: string;
    };
    protected typesPath(name: string): string;
    private get isNullProvider();
    protected get simplifiedName(): string;
}
export declare class ConstructsMaker {
    private readonly options;
    private readonly constraints;
    private readonly reportTelemetry;
    private readonly codeMakerOutdir;
    private readonly code;
    private readonly targets;
    constructor(options: GetOptions, constraints: TerraformDependencyConstraint[], reportTelemetry?: (params: any) => void);
    private generateTypeScript;
    generate(): Promise<void>;
    private save;
    private get isJavascriptTarget();
    private get isPythonTarget();
    private get isJavaTarget();
    private get isCsharpTarget();
    private get isGoTarget();
}
/**
 * searches for the closest `go.mod` file and returns the nested go module name for `dir`
 * e.g. (/dir/.gen/) => cdk.tf/stack/.gen if the parent dir of .gen has a go.mod for "module cdk.tf/stack"
 *
 * @param dir the directory to start the search from (searches upwards)
 * @returns the package name for `dir`
 * @throws an Error if no go.mod was found
 */
export declare const determineGoModuleName: (dir: string) => Promise<string>;
