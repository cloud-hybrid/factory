"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const generator_1 = __importDefault(require("@babel/generator"));
const t = __importStar(require("@babel/types"));
const expressions_1 = require("../lib/expressions");
const expressions_2 = require("../lib/expressions");
const nodeIds = [
    "var.input",
    "module.vpc",
    "data.aws_s3_bucket.examplebucket",
    "aws_s3_bucket.examplebucket",
    "aws_s3_bucket.otherbucket",
    "var.users",
    "aws_kms_key.key",
    "local.service_name",
];
describe("expressions", () => {
    describe("#extractReferencesFromExpression", () => {
        it("finds no references in literals", () => {
            expect(expressions_2.extractReferencesFromExpression("nothingtobeseen", nodeIds)).toEqual([]);
        });
        it("finds no references in literals with functions", () => {
            expect(expressions_2.extractReferencesFromExpression("${foo(nothingtobeseen)}", nodeIds)).toEqual([]);
        });
        it("finds no references in literals with functions and artihmetics", () => {
            expect(expressions_2.extractReferencesFromExpression("${foo(nothingtobeseen - 2) + 3}", nodeIds)).toEqual([]);
        });
        it("finds plain var reference", () => {
            expect(expressions_2.extractReferencesFromExpression("${var.input}", nodeIds)).toEqual([
                {
                    referencee: { id: "var.input", full: "var.input" },
                    useFqn: false,
                    isVariable: true,
                    start: 2,
                    end: 11,
                },
            ]);
        });
        it("finds plain module reference", () => {
            expect(expressions_2.extractReferencesFromExpression("${module.vpc.public_subnets}", nodeIds)).toEqual([
                {
                    referencee: {
                        id: "module.vpc",
                        full: "module.vpc.public_subnets",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 2,
                    end: 27,
                },
            ]);
        });
        it("finds plain data reference", () => {
            expect(expressions_2.extractReferencesFromExpression("${data.aws_s3_bucket.examplebucket.arn}", nodeIds)).toEqual([
                {
                    referencee: {
                        id: "data.aws_s3_bucket.examplebucket",
                        full: "data.aws_s3_bucket.examplebucket.arn",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 2,
                    end: 38,
                },
            ]);
        });
        it("finds plain local reference", () => {
            expect(expressions_2.extractReferencesFromExpression("${local.service_name}", nodeIds)).toEqual([
                {
                    referencee: {
                        id: "local.service_name",
                        full: "local.service_name",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 2,
                    end: 20,
                },
            ]);
        });
        it("finds plain resource reference", () => {
            expect(expressions_2.extractReferencesFromExpression("${aws_s3_bucket.examplebucket.id}", nodeIds)).toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket.id",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 2,
                    end: 32,
                },
            ]);
        });
        it("finds plain resource references in artihmetics", () => {
            expect(expressions_2.extractReferencesFromExpression("${aws_s3_bucket.examplebucket.count + aws_s3_bucket.otherbucket.count }", nodeIds)).toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket.count",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 2,
                    end: 35,
                },
                {
                    referencee: {
                        id: "aws_s3_bucket.otherbucket",
                        full: "aws_s3_bucket.otherbucket.count",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 38,
                    end: 69,
                },
            ]);
        });
        it("use fqn for splat reference", () => {
            expect(expressions_2.extractReferencesFromExpression("${aws_s3_bucket.examplebucket.*.id}", nodeIds)).toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket",
                    },
                    useFqn: true,
                    isVariable: false,
                    start: 2,
                    end: 29,
                },
            ]);
        });
        it("use fqn for numeric access", () => {
            expect(expressions_2.extractReferencesFromExpression("${aws_s3_bucket.examplebucket.network_interface.0.access_config.0.assigned_nat_ip}", nodeIds)).toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket",
                    },
                    useFqn: true,
                    isVariable: false,
                    start: 2,
                    end: 29,
                },
            ]);
        });
        it("detect splat reference within function", () => {
            expect(expressions_2.extractReferencesFromExpression("${toset(aws_s3_bucket.examplebucket.*)}", nodeIds)).toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket",
                    },
                    useFqn: true,
                    isVariable: false,
                    start: 8,
                    end: 35,
                },
            ]);
        });
        it("finds all resources in conditional", () => {
            expect(expressions_2.extractReferencesFromExpression("${aws_kms_key.key.deletion_window_in_days > 3 ? aws_s3_bucket.examplebucket.id : []}", nodeIds)).toEqual([
                {
                    referencee: {
                        id: "aws_kms_key.key",
                        full: "aws_kms_key.key.deletion_window_in_days",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 2,
                    end: 41,
                },
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket.id",
                    },
                    useFqn: false,
                    isVariable: false,
                    start: 48,
                    end: 78,
                },
            ]);
        });
        it("finds all resources in functions", () => {
            expect(expressions_2.extractReferencesFromExpression("${element(aws_s3_bucket.examplebucket, 0).id}", nodeIds)).toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket",
                    },
                    useFqn: true,
                    isVariable: false,
                    start: 10,
                    end: 37,
                },
            ]);
        });
        it("finds all resources in functions with splat", () => {
            expect(expressions_2.extractReferencesFromExpression("${element(aws_s3_bucket.examplebucket.*.id, 0)}", nodeIds)).toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket",
                    },
                    useFqn: true,
                    isVariable: false,
                    start: 10,
                    end: 37,
                },
            ]);
        });
        it("finds all resources in for loops", () => {
            expect(expressions_2.extractReferencesFromExpression("${{ for name, user in var.users : user.role => name...}}", nodeIds)).toEqual([
                {
                    referencee: { id: "var.users", full: "var.users" },
                    useFqn: false,
                    isVariable: true,
                    start: 22,
                    end: 31,
                },
            ]);
        });
        it("finds resources with property access", () => {
            expect(expressions_2.extractReferencesFromExpression("${aws_s3_bucket.examplebucket[0].id}", nodeIds)).toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket",
                    },
                    useFqn: true,
                    isVariable: false,
                    start: 2,
                    end: 29,
                },
            ]);
        });
        it("finds references within functions that use arrays and comments", () => {
            expect(expressions_2.extractReferencesFromExpression(`\${compact([
            # The example "bucket"
            aws_s3_bucket.examplebucket,
        
            # The "Learn" single page application. This is not configured in all environments.
            var.input,
          ])}`, nodeIds)).toEqual([
                {
                    referencee: {
                        id: "aws_s3_bucket.examplebucket",
                        full: "aws_s3_bucket.examplebucket",
                    },
                    useFqn: true,
                    isVariable: false,
                    start: 59,
                    end: 86,
                },
                {
                    referencee: {
                        id: "var.input",
                        full: "var.input",
                    },
                    useFqn: false,
                    isVariable: true,
                    start: 204,
                    end: 213,
                },
            ]);
        });
        it("finds references for same referencees", () => {
            expect(expressions_2.extractReferencesFromExpression(`\${var.input == "test" ? "azure-ad-int" : "azure-ad-\${var.input}"}`, nodeIds)).toEqual([
                {
                    referencee: {
                        id: "var.input",
                        full: "var.input",
                    },
                    useFqn: false,
                    isVariable: true,
                    start: 2,
                    end: 11,
                },
                {
                    referencee: {
                        id: "var.input",
                        full: "var.input",
                    },
                    useFqn: false,
                    isVariable: true,
                    start: 53,
                    end: 62,
                },
            ]);
        });
    });
    describe("#referenceToAst", () => {
        it("property access", () => {
            const scope = {
                providerSchema: { format_version: "1.0" },
                constructs: new Set(),
                variables: {},
            };
            expect(generator_1.default(t.program([
                t.expressionStatement(expressions_2.referenceToAst(scope, {
                    start: 0,
                    end: 0,
                    useFqn: false,
                    isVariable: false,
                    referencee: {
                        id: "aws_kms_key.key",
                        full: "aws_kms_key.key.deletion_window_in_days",
                    },
                })),
            ])).code).toMatchInlineSnapshot(`"awsKmsKeyKey.deletionWindowInDays;"`);
        });
    });
    describe("#referencesToAst", () => {
        it("nested terraform expressions without space", () => {
            const scope = {
                providerSchema: { format_version: "1.0" },
                constructs: new Set(),
                variables: {},
            };
            const expr = `\${\${each.value}\${var.azure_ad_domain_name}}"`;
            expect(generator_1.default(t.program([
                t.expressionStatement(expressions_1.referencesToAst(scope, expr, expressions_2.extractReferencesFromExpression(expr, [
                    "var.azure_ad_domain_name",
                ]), [])),
            ])).code).toMatchInlineSnapshot(`"\`\\\\\${\\\\\${each.value}\\\\\${\${azureAdDomainName.value}}}\\"\`;"`);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,