"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const z = __importStar(require("zod"));
const tfObject = (config) => z.array(z.object(config).partial());
const outputConfig = tfObject({
    value: z.any(),
    description: z.string().optional(),
    sensitive: z.boolean().optional(),
    depends_on: z.string().optional(),
});
const variableConfig = tfObject({
    type: z.string(),
    default: z.any(),
    description: z.string(),
    sensitive: z.boolean(),
});
const providerConfig = z.array(z.record(z.any()));
const moduleConfig = z.array(z.object({ source: z.string() }).nonstrict());
const resourceConfig = z.array(z.record(z.any()));
const providerSpecification = z.union([
    z.object({ source: z.string(), version: z.string() }).partial(),
    z.string(),
]);
const terraformConfig = z
    .object({
    required_version: z.string(),
    required_providers: z.array(z.record(providerSpecification)),
    backend: z.record(z.array(z.record(z.any()))),
})
    .partial();
exports.schema = z
    .object({
    terraform: z.array(terraformConfig),
    locals: z.array(z.record(z.any())),
    variable: z.record(variableConfig),
    output: z.record(outputConfig),
    provider: z.record(providerConfig),
    module: z.record(moduleConfig),
    resource: z.record(z.record(resourceConfig)),
    data: z.record(z.record(resourceConfig)),
})
    .partial();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx1Q0FBeUI7QUFHekIsTUFBTSxRQUFRLEdBQUcsQ0FBd0IsTUFBUyxFQUFFLEVBQUUsQ0FDcEQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFFdEMsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDO0lBQzVCLEtBQUssRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFO0lBQ2QsV0FBVyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDbEMsU0FBUyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDakMsVUFBVSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7Q0FDbEMsQ0FBQyxDQUFDO0FBR0gsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDO0lBQzlCLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFO0lBQ2hCLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFO0lBQ2hCLFdBQVcsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFO0lBQ3ZCLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFO0NBQ3ZCLENBQUMsQ0FBQztBQUdILE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBR2xELE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFHM0UsTUFBTSxjQUFjLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFJbEQsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRTtJQUMvRCxDQUFDLENBQUMsTUFBTSxFQUFFO0NBQ1gsQ0FBQyxDQUFDO0FBRUgsTUFBTSxlQUFlLEdBQUcsQ0FBQztLQUN0QixNQUFNLENBQUM7SUFDTixnQkFBZ0IsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFO0lBQzVCLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzVELE9BQU8sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQzlDLENBQUM7S0FDRCxPQUFPLEVBQUUsQ0FBQztBQUdBLFFBQUEsTUFBTSxHQUFHLENBQUM7S0FDcEIsTUFBTSxDQUFDO0lBQ04sU0FBUyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDO0lBQ25DLE1BQU0sRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDbEMsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQ2xDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztJQUM5QixRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDbEMsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO0lBQzlCLFFBQVEsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDNUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztDQUN6QyxDQUFDO0tBQ0QsT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB6IGZyb20gXCJ6b2RcIjtcbmltcG9ydCB7IFpvZFJhd1NoYXBlIH0gZnJvbSBcInpvZC9saWIvc3JjL3R5cGVzL2Jhc2VcIjtcblxuY29uc3QgdGZPYmplY3QgPSA8VCBleHRlbmRzIFpvZFJhd1NoYXBlPihjb25maWc6IFQpID0+XG4gIHouYXJyYXkoei5vYmplY3QoY29uZmlnKS5wYXJ0aWFsKCkpO1xuXG5jb25zdCBvdXRwdXRDb25maWcgPSB0Zk9iamVjdCh7XG4gIHZhbHVlOiB6LmFueSgpLFxuICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBzZW5zaXRpdmU6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gIGRlcGVuZHNfb246IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IHR5cGUgT3V0cHV0ID0gei5pbmZlcjx0eXBlb2Ygb3V0cHV0Q29uZmlnPjtcblxuY29uc3QgdmFyaWFibGVDb25maWcgPSB0Zk9iamVjdCh7XG4gIHR5cGU6IHouc3RyaW5nKCksXG4gIGRlZmF1bHQ6IHouYW55KCksXG4gIGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLFxuICBzZW5zaXRpdmU6IHouYm9vbGVhbigpLFxufSk7XG5leHBvcnQgdHlwZSBWYXJpYWJsZSA9IHouaW5mZXI8dHlwZW9mIHZhcmlhYmxlQ29uZmlnPjtcblxuY29uc3QgcHJvdmlkZXJDb25maWcgPSB6LmFycmF5KHoucmVjb3JkKHouYW55KCkpKTtcbmV4cG9ydCB0eXBlIFByb3ZpZGVyID0gei5pbmZlcjx0eXBlb2YgcHJvdmlkZXJDb25maWc+O1xuXG5jb25zdCBtb2R1bGVDb25maWcgPSB6LmFycmF5KHoub2JqZWN0KHsgc291cmNlOiB6LnN0cmluZygpIH0pLm5vbnN0cmljdCgpKTtcbmV4cG9ydCB0eXBlIE1vZHVsZSA9IHouaW5mZXI8dHlwZW9mIG1vZHVsZUNvbmZpZz47XG5cbmNvbnN0IHJlc291cmNlQ29uZmlnID0gei5hcnJheSh6LnJlY29yZCh6LmFueSgpKSk7XG5leHBvcnQgdHlwZSBSZXNvdXJjZSA9IHouaW5mZXI8dHlwZW9mIHJlc291cmNlQ29uZmlnPjtcbmV4cG9ydCB0eXBlIERhdGEgPSBSZXNvdXJjZTtcblxuY29uc3QgcHJvdmlkZXJTcGVjaWZpY2F0aW9uID0gei51bmlvbihbXG4gIHoub2JqZWN0KHsgc291cmNlOiB6LnN0cmluZygpLCB2ZXJzaW9uOiB6LnN0cmluZygpIH0pLnBhcnRpYWwoKSxcbiAgei5zdHJpbmcoKSxcbl0pO1xuXG5jb25zdCB0ZXJyYWZvcm1Db25maWcgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHJlcXVpcmVkX3ZlcnNpb246IHouc3RyaW5nKCksXG4gICAgcmVxdWlyZWRfcHJvdmlkZXJzOiB6LmFycmF5KHoucmVjb3JkKHByb3ZpZGVyU3BlY2lmaWNhdGlvbikpLFxuICAgIGJhY2tlbmQ6IHoucmVjb3JkKHouYXJyYXkoei5yZWNvcmQoei5hbnkoKSkpKSxcbiAgfSlcbiAgLnBhcnRpYWwoKTtcbmV4cG9ydCB0eXBlIFRlcnJhZm9ybUNvbmZpZyA9IHouaW5mZXI8dHlwZW9mIHRlcnJhZm9ybUNvbmZpZz47XG5cbmV4cG9ydCBjb25zdCBzY2hlbWEgPSB6XG4gIC5vYmplY3Qoe1xuICAgIHRlcnJhZm9ybTogei5hcnJheSh0ZXJyYWZvcm1Db25maWcpLFxuICAgIGxvY2Fsczogei5hcnJheSh6LnJlY29yZCh6LmFueSgpKSksXG4gICAgdmFyaWFibGU6IHoucmVjb3JkKHZhcmlhYmxlQ29uZmlnKSxcbiAgICBvdXRwdXQ6IHoucmVjb3JkKG91dHB1dENvbmZpZyksXG4gICAgcHJvdmlkZXI6IHoucmVjb3JkKHByb3ZpZGVyQ29uZmlnKSxcbiAgICBtb2R1bGU6IHoucmVjb3JkKG1vZHVsZUNvbmZpZyksXG4gICAgcmVzb3VyY2U6IHoucmVjb3JkKHoucmVjb3JkKHJlc291cmNlQ29uZmlnKSksXG4gICAgZGF0YTogei5yZWNvcmQoei5yZWNvcmQocmVzb3VyY2VDb25maWcpKSxcbiAgfSlcbiAgLnBhcnRpYWwoKTtcbiJdfQ==