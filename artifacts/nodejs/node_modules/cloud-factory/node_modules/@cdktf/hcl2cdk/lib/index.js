"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRegistryModule = exports.convertProject = exports.getTerraformConfigFromDir = exports.convert = exports.convertToTypescript = exports.parseProviderRequirements = exports.getParsedHcl = void 0;
const hcl2json_1 = require("@cdktf/hcl2json");
const provider_generator_1 = require("@cdktf/provider-generator");
Object.defineProperty(exports, "isRegistryModule", { enumerable: true, get: function () { return provider_generator_1.isRegistryModule; } });
const t = __importStar(require("@babel/types"));
const prettier_1 = __importDefault(require("prettier"));
const path = __importStar(require("path"));
const glob = __importStar(require("glob"));
const fs = __importStar(require("fs"));
const graphology_1 = require("graphology");
const rosetta = __importStar(require("jsii-rosetta"));
const schema_1 = require("./schema");
const expressions_1 = require("./expressions");
const generation_1 = require("./generation");
const iteration_1 = require("./iteration");
const provider_1 = require("./provider");
async function getParsedHcl(hcl) {
    // Get the JSON representation of the HCL
    let json;
    try {
        json = await hcl2json_1.parse("terraform.tf", hcl);
    }
    catch (err) {
        throw new Error(`Error: Could not parse HCL, this means either that the HCL passed is invalid or that you found a bug. If the HCL seems valid, please file a bug under https://cdk.tf/bugs/new/convert`);
    }
    // Ensure the JSON representation matches the expected structure
    let plan;
    try {
        plan = schema_1.schema.parse(json);
    }
    catch (err) {
        throw new Error(`Error: HCL-JSON does not conform to schema. This is not expected, please file a bug under https://cdk.tf/bugs/new/convert
Please include this information:
${JSON.stringify(err.errors)}`);
    }
    return plan;
}
exports.getParsedHcl = getParsedHcl;
async function parseProviderRequirements(hcl) {
    const plan = await getParsedHcl(hcl);
    return provider_1.getProviderRequirements(plan);
}
exports.parseProviderRequirements = parseProviderRequirements;
async function convertToTypescript(hcl, providerSchema) {
    var _a, _b;
    const plan = await getParsedHcl(hcl);
    // Each key in the scope needs to be unique, therefore we save them in a set
    // Each variable needs to be unique as well, we save them in a record so we can identify if two variables are the same
    const scope = {
        providerSchema,
        constructs: new Set(),
        variables: {},
    };
    // Get all items in the JSON as a map of id to function that generates the AST
    // We will use this to construct the nodes for a dependency graph
    // We need to use a function here because the same node has different representation based on if it's referenced by another one
    const nodeMap = {
        ...iteration_1.forEachProvider(scope, plan.provider, generation_1.provider),
        ...iteration_1.forEachGlobal(scope, "var", plan.variable, generation_1.variable),
        // locals are a special case
        ...iteration_1.forEachGlobal(scope, "local", Array.isArray(plan.locals)
            ? plan.locals.reduce((carry, locals) => ({ ...carry, ...locals }), {})
            : {}, generation_1.local),
        ...iteration_1.forEachGlobal(scope, "out", plan.output, generation_1.output),
        ...iteration_1.forEachGlobal(scope, "module", plan.module, generation_1.modules),
        ...iteration_1.forEachNamespaced(scope, plan.resource, generation_1.resource),
        ...iteration_1.forEachNamespaced(scope, plan.data, generation_1.resource, "data"),
    };
    const graph = new graphology_1.DirectedGraph();
    // Add all nodes to the dependency graph so we can detect if an edge is added for an unknown link
    Object.entries(nodeMap).forEach(([key, value]) => graph.addNode(key, { code: value }));
    // Finding references becomes easier of the to be referenced ids are already known
    const nodeIds = Object.keys(nodeMap);
    function addEdges(id, value) {
        expressions_1.findUsedReferences(nodeIds, value).forEach((ref) => {
            if (!graph.hasDirectedEdge(ref.referencee.id, id) &&
                graph.hasNode(ref.referencee.id) // in case the referencee is a dynamic variable
            ) {
                if (!graph.hasNode(id)) {
                    throw new Error(`The dependency graph is expected to link from ${ref.referencee.id} to ${id} but ${id} does not exist. 
            These nodes exist: ${graph.nodes().join("\n")}`);
                }
                graph.addDirectedEdge(ref.referencee.id, id, { ref });
            }
        });
    }
    // We recursively inspect each resource value to find references to other values
    // We add these to a dependency graph so that the programming code has the right order
    function addGlobalEdges(_scope, _key, id, value) {
        addEdges(id, value);
    }
    function addProviderEdges(_scope, _key, id, value) {
        addEdges(id, value);
    }
    function addNamespacedEdges(_scope, _type, _key, id, value) {
        addEdges(id, value);
    }
    Object.values({
        ...iteration_1.forEachProvider(scope, plan.provider, addProviderEdges),
        ...iteration_1.forEachGlobal(scope, "var", plan.variable, addGlobalEdges),
        // locals are a special case
        ...iteration_1.forEachGlobal(scope, "local", Array.isArray(plan.locals)
            ? plan.locals.reduce((carry, locals) => ({ ...carry, ...locals }), {})
            : {}, addGlobalEdges),
        ...iteration_1.forEachGlobal(scope, "out", plan.output, addGlobalEdges),
        ...iteration_1.forEachGlobal(scope, "module", plan.module, addGlobalEdges),
        ...iteration_1.forEachNamespaced(scope, plan.resource, addNamespacedEdges),
        ...iteration_1.forEachNamespaced(scope, plan.data, addNamespacedEdges, "data"),
    }).forEach((addEdgesToGraph) => addEdgesToGraph(graph));
    // We traverse the dependency graph to get the unordered JSON nodes into an ordered array
    // where no node is referenced before it's defined
    // As we check that the nodes on both ends of an edge exist we can be sure
    // that no infinite loop exists, there can be no stray dependency on a node
    const expressions = [];
    let nodesToVisit = [...nodeIds];
    // This ensures we detect cycles and don't end up in an endless loop
    let nodesVisitedThisIteration = 0;
    do {
        nodesVisitedThisIteration = 0;
        graph.forEachNode((nodeId) => {
            if (!nodesToVisit.includes(nodeId)) {
                return;
            }
            const unresolvedDependencies = graph
                .inNeighbors(nodeId)
                .filter((item) => nodesToVisit.includes(item));
            if (unresolvedDependencies.length === 0) {
                nodesToVisit = nodesToVisit.filter((id) => nodeId !== id);
                nodesVisitedThisIteration = nodesVisitedThisIteration + 1;
                const list = graph.getNodeAttribute(nodeId, "code")(graph);
                (Array.isArray(list) ? list : [list]).forEach((item) => expressions.push(item));
            }
        });
    } while (nodesToVisit.length > 0 && nodesVisitedThisIteration != 0);
    const backendExpressions = (_a = plan.terraform) === null || _a === void 0 ? void 0 : _a.reduce((carry, terraform) => [
        ...carry,
        ...generation_1.backendToExpression(scope, terraform.backend, nodeIds),
    ], []);
    // We collect all module sources
    const moduleRequirements = [
        ...new Set(Object.values(plan.module || {}).reduce((carry, moduleBlock) => [
            ...carry,
            ...moduleBlock.reduce((arr, { source, version }) => [
                ...arr,
                version ? `${source}@${version}` : source,
            ], []),
        ], []) || []),
    ];
    // Variables, Outputs, and Backends are defined in the CDKTF project so we need to import from it
    // If none are used we don't want to leave a stray import
    const cdktfImports = ((_b = plan.terraform) === null || _b === void 0 ? void 0 : _b.some((tf) => Object.keys(tf.backend || {}).length > 0)) ||
        Object.keys({ ...plan.variable, ...plan.output }).length > 0
        ? [generation_1.cdktfImport]
        : [];
    if (Object.keys(plan.variable || {}).length > 0 && expressions.length > 0) {
        expressions[0] = t.addComment(expressions[0], "leading", `Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
You can read more about this at https://cdk.tf/variables`);
    }
    const providerRequirements = provider_1.getProviderRequirements(plan);
    const providers = generation_1.providerImports(Object.keys(providerRequirements));
    if (providers.length > 0) {
        providers[0] = t.addComment(providers[0], "leading", `Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.`);
    }
    // We add a comment if there are providers with missing schema information
    const providersLackingSchema = Object.keys(providerRequirements).filter((providerName) => !Object.keys(providerSchema.provider_schemas || {}).some((schemaName) => schemaName.endsWith(providerName)));
    if (providersLackingSchema.length > 0) {
        expressions[0] = t.addComment(expressions[0], "leading", `The following providers are missing schema information and might need manual adjustments to synthesize correctly: ${providersLackingSchema.join(", ")}.
For a more precise conversion please use the --provider flag in convert.`);
    }
    // We split up the generated code so that users can have more control over what to insert where
    return {
        all: generation_1.gen([
            ...cdktfImports,
            ...providers,
            ...generation_1.moduleImports(plan.module),
            ...(backendExpressions || []),
            ...expressions,
        ]),
        imports: generation_1.gen([
            ...cdktfImports,
            ...providers,
            ...generation_1.moduleImports(plan.module),
        ]),
        code: generation_1.gen([...(backendExpressions || []), ...expressions]),
        providers: Object.entries(providerRequirements).map(([source, version]) => version === "*" ? source : `${source}@${version}`),
        modules: moduleRequirements,
        // We track some usage data to make it easier to understand what is used
        stats: {
            numberOfModules: moduleRequirements.length,
            numberOfProviders: Object.keys(providerRequirements).length,
            resources: iteration_1.resourceStats(plan.resource || {}),
            data: iteration_1.resourceStats(plan.data || {}),
            convertedLines: hcl.split("\n").length,
        },
    };
}
exports.convertToTypescript = convertToTypescript;
const translations = {
    typescript: (file) => file.contents,
    python: (file) => rosetta.translateTypeScript(file, new rosetta.PythonVisitor()).translation,
    java: (file) => rosetta.translateTypeScript(file, new rosetta.JavaVisitor()).translation,
    csharp: (file) => rosetta.translateTypeScript(file, new rosetta.CSharpVisitor()).translation,
};
async function convert(hcl, { language, providerSchema }) {
    const fileName = "terraform.tf";
    const translater = translations[language];
    if (!translater) {
        throw new Error("Unsupported language used: " + language);
    }
    const tsCode = await convertToTypescript(hcl, providerSchema);
    return {
        ...tsCode,
        all: translater({ fileName, contents: tsCode.all }),
        imports: translater({ fileName, contents: tsCode.imports }),
        code: translater({ fileName, contents: tsCode.code }),
        stats: { ...tsCode.stats, language },
    };
}
exports.convert = convert;
function getTerraformConfigFromDir(importPath) {
    const absPath = path.resolve(importPath);
    const fileContents = glob
        .sync("./*.tf", { cwd: absPath })
        .map((p) => fs.readFileSync(path.resolve(absPath, p), "utf8"));
    return fileContents.join("\n");
}
exports.getTerraformConfigFromDir = getTerraformConfigFromDir;
async function convertProject(combinedHcl, inputMainFile, inputCdktfJson, { language, providerSchema }) {
    if (language !== "typescript") {
        throw new Error("Unsupported language used: " + language);
    }
    const { imports, code, providers, modules: tfModules, stats, } = await convert(combinedHcl, {
        language,
        providerSchema,
    });
    const importMainFile = [imports, inputMainFile].join("\n");
    const outputMainFile = importMainFile.replace("// define resources here", code);
    const cdktfJson = { ...inputCdktfJson };
    cdktfJson.terraformProviders = providers;
    cdktfJson.terraformModules = tfModules;
    return {
        code: prettier_1.default.format(outputMainFile, { parser: "babel" }),
        cdktfJson,
        stats,
    };
}
exports.convertProject = convertProject;
//# sourceMappingURL=data:application/json;base64,