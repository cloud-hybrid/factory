import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * AWS Relational Database Service.
 *
 * @stability stable
 */
export interface DataAwsRdsCertificateConfig extends cdktf.TerraformMetaArguments {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/rds_certificate.html#latest_valid_till DataAwsRdsCertificate#latest_valid_till}.
     *
     * @stability stable
     */
    readonly latestValidTill?: boolean | cdktf.IResolvable;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/d/rds_certificate.html aws_rds_certificate}.
 *
 * @stability stable
 */
export declare class DataAwsRdsCertificate extends cdktf.TerraformDataSource {
    /**
     * @stability stable
     */
    static readonly tfResourceType: string;
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/d/rds_certificate.html aws_rds_certificate} Data Source.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config?: DataAwsRdsCertificateConfig);
    /**
     * @stability stable
     */
    get arn(): string;
    /**
     * @stability stable
     */
    get certificateType(): string;
    /**
     * @stability stable
     */
    get customerOverride(): any;
    /**
     * @stability stable
     */
    get customerOverrideValidTill(): string;
    /**
     * @stability stable
     */
    get id(): string;
    private _latestValidTill?;
    /**
     * @stability stable
     */
    get latestValidTill(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set latestValidTill(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetLatestValidTill(): void;
    /**
     * @stability stable
     */
    get latestValidTillInput(): boolean | cdktf.IResolvable | undefined;
    /**
     * @stability stable
     */
    get thumbprint(): string;
    /**
     * @stability stable
     */
    get validFrom(): string;
    /**
     * @stability stable
     */
    get validTill(): string;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
