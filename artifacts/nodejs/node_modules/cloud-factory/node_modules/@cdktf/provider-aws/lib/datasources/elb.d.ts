import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * AWS Data Sources.
 *
 * @stability stable
 */
export interface ElbConfig extends cdktf.TerraformMetaArguments {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#availability_zones Elb#availability_zones}.
     *
     * @stability stable
     */
    readonly availabilityZones?: string[];
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#connection_draining Elb#connection_draining}.
     *
     * @stability stable
     */
    readonly connectionDraining?: boolean | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#connection_draining_timeout Elb#connection_draining_timeout}.
     *
     * @stability stable
     */
    readonly connectionDrainingTimeout?: number;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#cross_zone_load_balancing Elb#cross_zone_load_balancing}.
     *
     * @stability stable
     */
    readonly crossZoneLoadBalancing?: boolean | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#desync_mitigation_mode Elb#desync_mitigation_mode}.
     *
     * @stability stable
     */
    readonly desyncMitigationMode?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#idle_timeout Elb#idle_timeout}.
     *
     * @stability stable
     */
    readonly idleTimeout?: number;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#instances Elb#instances}.
     *
     * @stability stable
     */
    readonly instances?: string[];
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#internal Elb#internal}.
     *
     * @stability stable
     */
    readonly internal?: boolean | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#name Elb#name}.
     *
     * @stability stable
     */
    readonly name?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#name_prefix Elb#name_prefix}.
     *
     * @stability stable
     */
    readonly namePrefix?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#security_groups Elb#security_groups}.
     *
     * @stability stable
     */
    readonly securityGroups?: string[];
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#source_security_group Elb#source_security_group}.
     *
     * @stability stable
     */
    readonly sourceSecurityGroup?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#subnets Elb#subnets}.
     *
     * @stability stable
     */
    readonly subnets?: string[];
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#tags Elb#tags}.
     *
     * @stability stable
     */
    readonly tags?: {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#tags_all Elb#tags_all}.
     *
     * @stability stable
     */
    readonly tagsAll?: {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * access_logs block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#access_logs Elb#access_logs}
     *
     * @stability stable
     */
    readonly accessLogs?: ElbAccessLogs;
    /**
     * health_check block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#health_check Elb#health_check}
     *
     * @stability stable
     */
    readonly healthCheck?: ElbHealthCheck;
    /**
     * listener block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#listener Elb#listener}
     *
     * @stability stable
     */
    readonly listener: ElbListener[];
}
/**
 * @stability stable
 */
export interface ElbAccessLogs {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#bucket Elb#bucket}.
     *
     * @stability stable
     */
    readonly bucket: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#bucket_prefix Elb#bucket_prefix}.
     *
     * @stability stable
     */
    readonly bucketPrefix?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#enabled Elb#enabled}.
     *
     * @stability stable
     */
    readonly enabled?: boolean | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#interval Elb#interval}.
     *
     * @stability stable
     */
    readonly interval?: number;
}
export declare function elbAccessLogsToTerraform(struct?: ElbAccessLogsOutputReference | ElbAccessLogs): any;
/**
 * @stability stable
 */
export declare class ElbAccessLogsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
     * @param terraformResource The parent resource.
     * @param terraformAttribute The attribute on the parent resource this class is referencing.
     * @param isSingleItem True if this is a block, false if it's a list.
     * @stability stable
     */
    constructor(terraformResource: cdktf.ITerraformResource, terraformAttribute: string, isSingleItem: boolean);
    /**
     * @stability stable
     */
    get internalValue(): ElbAccessLogs | undefined;
    /**
     * @stability stable
     */
    set internalValue(value: ElbAccessLogs | undefined);
    private _bucket?;
    /**
     * @stability stable
     */
    get bucket(): string;
    /**
     * @stability stable
     */
    set bucket(value: string);
    /**
     * @stability stable
     */
    get bucketInput(): string | undefined;
    private _bucketPrefix?;
    /**
     * @stability stable
     */
    get bucketPrefix(): string;
    /**
     * @stability stable
     */
    set bucketPrefix(value: string);
    /**
     * @stability stable
     */
    resetBucketPrefix(): void;
    /**
     * @stability stable
     */
    get bucketPrefixInput(): string | undefined;
    private _enabled?;
    /**
     * @stability stable
     */
    get enabled(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set enabled(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetEnabled(): void;
    /**
     * @stability stable
     */
    get enabledInput(): boolean | cdktf.IResolvable | undefined;
    private _interval?;
    /**
     * @stability stable
     */
    get interval(): number;
    /**
     * @stability stable
     */
    set interval(value: number);
    /**
     * @stability stable
     */
    resetInterval(): void;
    /**
     * @stability stable
     */
    get intervalInput(): number | undefined;
}
/**
 * @stability stable
 */
export interface ElbHealthCheck {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#healthy_threshold Elb#healthy_threshold}.
     *
     * @stability stable
     */
    readonly healthyThreshold: number;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#interval Elb#interval}.
     *
     * @stability stable
     */
    readonly interval: number;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#target Elb#target}.
     *
     * @stability stable
     */
    readonly target: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#timeout Elb#timeout}.
     *
     * @stability stable
     */
    readonly timeout: number;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#unhealthy_threshold Elb#unhealthy_threshold}.
     *
     * @stability stable
     */
    readonly unhealthyThreshold: number;
}
export declare function elbHealthCheckToTerraform(struct?: ElbHealthCheckOutputReference | ElbHealthCheck): any;
/**
 * @stability stable
 */
export declare class ElbHealthCheckOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
     * @param terraformResource The parent resource.
     * @param terraformAttribute The attribute on the parent resource this class is referencing.
     * @param isSingleItem True if this is a block, false if it's a list.
     * @stability stable
     */
    constructor(terraformResource: cdktf.ITerraformResource, terraformAttribute: string, isSingleItem: boolean);
    /**
     * @stability stable
     */
    get internalValue(): ElbHealthCheck | undefined;
    /**
     * @stability stable
     */
    set internalValue(value: ElbHealthCheck | undefined);
    private _healthyThreshold?;
    /**
     * @stability stable
     */
    get healthyThreshold(): number;
    /**
     * @stability stable
     */
    set healthyThreshold(value: number);
    /**
     * @stability stable
     */
    get healthyThresholdInput(): number | undefined;
    private _interval?;
    /**
     * @stability stable
     */
    get interval(): number;
    /**
     * @stability stable
     */
    set interval(value: number);
    /**
     * @stability stable
     */
    get intervalInput(): number | undefined;
    private _target?;
    /**
     * @stability stable
     */
    get target(): string;
    /**
     * @stability stable
     */
    set target(value: string);
    /**
     * @stability stable
     */
    get targetInput(): string | undefined;
    private _timeout?;
    /**
     * @stability stable
     */
    get timeout(): number;
    /**
     * @stability stable
     */
    set timeout(value: number);
    /**
     * @stability stable
     */
    get timeoutInput(): number | undefined;
    private _unhealthyThreshold?;
    /**
     * @stability stable
     */
    get unhealthyThreshold(): number;
    /**
     * @stability stable
     */
    set unhealthyThreshold(value: number);
    /**
     * @stability stable
     */
    get unhealthyThresholdInput(): number | undefined;
}
/**
 * @stability stable
 */
export interface ElbListener {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#instance_port Elb#instance_port}.
     *
     * @stability stable
     */
    readonly instancePort: number;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#instance_protocol Elb#instance_protocol}.
     *
     * @stability stable
     */
    readonly instanceProtocol: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#lb_port Elb#lb_port}.
     *
     * @stability stable
     */
    readonly lbPort: number;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#lb_protocol Elb#lb_protocol}.
     *
     * @stability stable
     */
    readonly lbProtocol: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/elb.html#ssl_certificate_id Elb#ssl_certificate_id}.
     *
     * @stability stable
     */
    readonly sslCertificateId?: string;
}
export declare function elbListenerToTerraform(struct?: ElbListener): any;
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/elb.html aws_elb}.
 *
 * @stability stable
 */
export declare class Elb extends cdktf.TerraformResource {
    /**
     * @stability stable
     */
    static readonly tfResourceType: string;
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/elb.html aws_elb} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config: ElbConfig);
    /**
     * @stability stable
     */
    get arn(): string;
    private _availabilityZones?;
    /**
     * @stability stable
     */
    get availabilityZones(): string[];
    /**
     * @stability stable
     */
    set availabilityZones(value: string[]);
    /**
     * @stability stable
     */
    resetAvailabilityZones(): void;
    /**
     * @stability stable
     */
    get availabilityZonesInput(): string[] | undefined;
    private _connectionDraining?;
    /**
     * @stability stable
     */
    get connectionDraining(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set connectionDraining(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetConnectionDraining(): void;
    /**
     * @stability stable
     */
    get connectionDrainingInput(): boolean | cdktf.IResolvable | undefined;
    private _connectionDrainingTimeout?;
    /**
     * @stability stable
     */
    get connectionDrainingTimeout(): number;
    /**
     * @stability stable
     */
    set connectionDrainingTimeout(value: number);
    /**
     * @stability stable
     */
    resetConnectionDrainingTimeout(): void;
    /**
     * @stability stable
     */
    get connectionDrainingTimeoutInput(): number | undefined;
    private _crossZoneLoadBalancing?;
    /**
     * @stability stable
     */
    get crossZoneLoadBalancing(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set crossZoneLoadBalancing(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetCrossZoneLoadBalancing(): void;
    /**
     * @stability stable
     */
    get crossZoneLoadBalancingInput(): boolean | cdktf.IResolvable | undefined;
    private _desyncMitigationMode?;
    /**
     * @stability stable
     */
    get desyncMitigationMode(): string;
    /**
     * @stability stable
     */
    set desyncMitigationMode(value: string);
    /**
     * @stability stable
     */
    resetDesyncMitigationMode(): void;
    /**
     * @stability stable
     */
    get desyncMitigationModeInput(): string | undefined;
    /**
     * @stability stable
     */
    get dnsName(): string;
    /**
     * @stability stable
     */
    get id(): string;
    private _idleTimeout?;
    /**
     * @stability stable
     */
    get idleTimeout(): number;
    /**
     * @stability stable
     */
    set idleTimeout(value: number);
    /**
     * @stability stable
     */
    resetIdleTimeout(): void;
    /**
     * @stability stable
     */
    get idleTimeoutInput(): number | undefined;
    private _instances?;
    /**
     * @stability stable
     */
    get instances(): string[];
    /**
     * @stability stable
     */
    set instances(value: string[]);
    /**
     * @stability stable
     */
    resetInstances(): void;
    /**
     * @stability stable
     */
    get instancesInput(): string[] | undefined;
    private _internal?;
    /**
     * @stability stable
     */
    get internal(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set internal(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetInternal(): void;
    /**
     * @stability stable
     */
    get internalInput(): boolean | cdktf.IResolvable | undefined;
    private _name?;
    /**
     * @stability stable
     */
    get name(): string;
    /**
     * @stability stable
     */
    set name(value: string);
    /**
     * @stability stable
     */
    resetName(): void;
    /**
     * @stability stable
     */
    get nameInput(): string | undefined;
    private _namePrefix?;
    /**
     * @stability stable
     */
    get namePrefix(): string;
    /**
     * @stability stable
     */
    set namePrefix(value: string);
    /**
     * @stability stable
     */
    resetNamePrefix(): void;
    /**
     * @stability stable
     */
    get namePrefixInput(): string | undefined;
    private _securityGroups?;
    /**
     * @stability stable
     */
    get securityGroups(): string[];
    /**
     * @stability stable
     */
    set securityGroups(value: string[]);
    /**
     * @stability stable
     */
    resetSecurityGroups(): void;
    /**
     * @stability stable
     */
    get securityGroupsInput(): string[] | undefined;
    private _sourceSecurityGroup?;
    /**
     * @stability stable
     */
    get sourceSecurityGroup(): string;
    /**
     * @stability stable
     */
    set sourceSecurityGroup(value: string);
    /**
     * @stability stable
     */
    resetSourceSecurityGroup(): void;
    /**
     * @stability stable
     */
    get sourceSecurityGroupInput(): string | undefined;
    /**
     * @stability stable
     */
    get sourceSecurityGroupId(): string;
    private _subnets?;
    /**
     * @stability stable
     */
    get subnets(): string[];
    /**
     * @stability stable
     */
    set subnets(value: string[]);
    /**
     * @stability stable
     */
    resetSubnets(): void;
    /**
     * @stability stable
     */
    get subnetsInput(): string[] | undefined;
    private _tags?;
    /**
     * @stability stable
     */
    get tags(): {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set tags(value: {
        [key: string]: string;
    } | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetTags(): void;
    /**
     * @stability stable
     */
    get tagsInput(): cdktf.IResolvable | {
        [key: string]: string;
    } | undefined;
    private _tagsAll?;
    /**
     * @stability stable
     */
    get tagsAll(): {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set tagsAll(value: {
        [key: string]: string;
    } | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetTagsAll(): void;
    /**
     * @stability stable
     */
    get tagsAllInput(): cdktf.IResolvable | {
        [key: string]: string;
    } | undefined;
    /**
     * @stability stable
     */
    get zoneId(): string;
    private _accessLogs;
    /**
     * @stability stable
     */
    get accessLogs(): ElbAccessLogsOutputReference;
    /**
     * @stability stable
     */
    putAccessLogs(value: ElbAccessLogs): void;
    /**
     * @stability stable
     */
    resetAccessLogs(): void;
    /**
     * @stability stable
     */
    get accessLogsInput(): ElbAccessLogs | undefined;
    private _healthCheck;
    /**
     * @stability stable
     */
    get healthCheck(): ElbHealthCheckOutputReference;
    /**
     * @stability stable
     */
    putHealthCheck(value: ElbHealthCheck): void;
    /**
     * @stability stable
     */
    resetHealthCheck(): void;
    /**
     * @stability stable
     */
    get healthCheckInput(): ElbHealthCheck | undefined;
    private _listener?;
    /**
     * @stability stable
     */
    get listener(): ElbListener[];
    /**
     * @stability stable
     */
    set listener(value: ElbListener[]);
    /**
     * @stability stable
     */
    get listenerInput(): ElbListener[] | undefined;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
