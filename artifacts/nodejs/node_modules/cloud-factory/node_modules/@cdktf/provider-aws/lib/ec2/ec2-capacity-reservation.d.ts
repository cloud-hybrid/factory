import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * AWS EC2.
 *
 * @stability stable
 */
export interface Ec2CapacityReservationConfig extends cdktf.TerraformMetaArguments {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html#availability_zone Ec2CapacityReservation#availability_zone}.
     *
     * @stability stable
     */
    readonly availabilityZone: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html#ebs_optimized Ec2CapacityReservation#ebs_optimized}.
     *
     * @stability stable
     */
    readonly ebsOptimized?: boolean | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html#end_date Ec2CapacityReservation#end_date}.
     *
     * @stability stable
     */
    readonly endDate?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html#end_date_type Ec2CapacityReservation#end_date_type}.
     *
     * @stability stable
     */
    readonly endDateType?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html#ephemeral_storage Ec2CapacityReservation#ephemeral_storage}.
     *
     * @stability stable
     */
    readonly ephemeralStorage?: boolean | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html#instance_count Ec2CapacityReservation#instance_count}.
     *
     * @stability stable
     */
    readonly instanceCount: number;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html#instance_match_criteria Ec2CapacityReservation#instance_match_criteria}.
     *
     * @stability stable
     */
    readonly instanceMatchCriteria?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html#instance_platform Ec2CapacityReservation#instance_platform}.
     *
     * @stability stable
     */
    readonly instancePlatform: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html#instance_type Ec2CapacityReservation#instance_type}.
     *
     * @stability stable
     */
    readonly instanceType: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html#outpost_arn Ec2CapacityReservation#outpost_arn}.
     *
     * @stability stable
     */
    readonly outpostArn?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html#tags Ec2CapacityReservation#tags}.
     *
     * @stability stable
     */
    readonly tags?: {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html#tags_all Ec2CapacityReservation#tags_all}.
     *
     * @stability stable
     */
    readonly tagsAll?: {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html#tenancy Ec2CapacityReservation#tenancy}.
     *
     * @stability stable
     */
    readonly tenancy?: string;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html aws_ec2_capacity_reservation}.
 *
 * @stability stable
 */
export declare class Ec2CapacityReservation extends cdktf.TerraformResource {
    /**
     * @stability stable
     */
    static readonly tfResourceType: string;
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/ec2_capacity_reservation.html aws_ec2_capacity_reservation} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config: Ec2CapacityReservationConfig);
    /**
     * @stability stable
     */
    get arn(): string;
    private _availabilityZone?;
    /**
     * @stability stable
     */
    get availabilityZone(): string;
    /**
     * @stability stable
     */
    set availabilityZone(value: string);
    /**
     * @stability stable
     */
    get availabilityZoneInput(): string | undefined;
    private _ebsOptimized?;
    /**
     * @stability stable
     */
    get ebsOptimized(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set ebsOptimized(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetEbsOptimized(): void;
    /**
     * @stability stable
     */
    get ebsOptimizedInput(): boolean | cdktf.IResolvable | undefined;
    private _endDate?;
    /**
     * @stability stable
     */
    get endDate(): string;
    /**
     * @stability stable
     */
    set endDate(value: string);
    /**
     * @stability stable
     */
    resetEndDate(): void;
    /**
     * @stability stable
     */
    get endDateInput(): string | undefined;
    private _endDateType?;
    /**
     * @stability stable
     */
    get endDateType(): string;
    /**
     * @stability stable
     */
    set endDateType(value: string);
    /**
     * @stability stable
     */
    resetEndDateType(): void;
    /**
     * @stability stable
     */
    get endDateTypeInput(): string | undefined;
    private _ephemeralStorage?;
    /**
     * @stability stable
     */
    get ephemeralStorage(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set ephemeralStorage(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetEphemeralStorage(): void;
    /**
     * @stability stable
     */
    get ephemeralStorageInput(): boolean | cdktf.IResolvable | undefined;
    /**
     * @stability stable
     */
    get id(): string;
    private _instanceCount?;
    /**
     * @stability stable
     */
    get instanceCount(): number;
    /**
     * @stability stable
     */
    set instanceCount(value: number);
    /**
     * @stability stable
     */
    get instanceCountInput(): number | undefined;
    private _instanceMatchCriteria?;
    /**
     * @stability stable
     */
    get instanceMatchCriteria(): string;
    /**
     * @stability stable
     */
    set instanceMatchCriteria(value: string);
    /**
     * @stability stable
     */
    resetInstanceMatchCriteria(): void;
    /**
     * @stability stable
     */
    get instanceMatchCriteriaInput(): string | undefined;
    private _instancePlatform?;
    /**
     * @stability stable
     */
    get instancePlatform(): string;
    /**
     * @stability stable
     */
    set instancePlatform(value: string);
    /**
     * @stability stable
     */
    get instancePlatformInput(): string | undefined;
    private _instanceType?;
    /**
     * @stability stable
     */
    get instanceType(): string;
    /**
     * @stability stable
     */
    set instanceType(value: string);
    /**
     * @stability stable
     */
    get instanceTypeInput(): string | undefined;
    private _outpostArn?;
    /**
     * @stability stable
     */
    get outpostArn(): string;
    /**
     * @stability stable
     */
    set outpostArn(value: string);
    /**
     * @stability stable
     */
    resetOutpostArn(): void;
    /**
     * @stability stable
     */
    get outpostArnInput(): string | undefined;
    /**
     * @stability stable
     */
    get ownerId(): string;
    private _tags?;
    /**
     * @stability stable
     */
    get tags(): {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set tags(value: {
        [key: string]: string;
    } | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetTags(): void;
    /**
     * @stability stable
     */
    get tagsInput(): cdktf.IResolvable | {
        [key: string]: string;
    } | undefined;
    private _tagsAll?;
    /**
     * @stability stable
     */
    get tagsAll(): {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set tagsAll(value: {
        [key: string]: string;
    } | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetTagsAll(): void;
    /**
     * @stability stable
     */
    get tagsAllInput(): cdktf.IResolvable | {
        [key: string]: string;
    } | undefined;
    private _tenancy?;
    /**
     * @stability stable
     */
    get tenancy(): string;
    /**
     * @stability stable
     */
    set tenancy(value: string);
    /**
     * @stability stable
     */
    resetTenancy(): void;
    /**
     * @stability stable
     */
    get tenancyInput(): string | undefined;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
