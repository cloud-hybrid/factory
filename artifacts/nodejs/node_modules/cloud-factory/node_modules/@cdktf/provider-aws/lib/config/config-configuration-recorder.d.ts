import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * AWS Config.
 *
 * @stability stable
 */
export interface ConfigConfigurationRecorderConfig extends cdktf.TerraformMetaArguments {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/config_configuration_recorder.html#name ConfigConfigurationRecorder#name}.
     *
     * @stability stable
     */
    readonly name?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/config_configuration_recorder.html#role_arn ConfigConfigurationRecorder#role_arn}.
     *
     * @stability stable
     */
    readonly roleArn: string;
    /**
     * recording_group block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/config_configuration_recorder.html#recording_group ConfigConfigurationRecorder#recording_group}
     *
     * @stability stable
     */
    readonly recordingGroup?: ConfigConfigurationRecorderRecordingGroup;
}
/**
 * @stability stable
 */
export interface ConfigConfigurationRecorderRecordingGroup {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/config_configuration_recorder.html#all_supported ConfigConfigurationRecorder#all_supported}.
     *
     * @stability stable
     */
    readonly allSupported?: boolean | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/config_configuration_recorder.html#include_global_resource_types ConfigConfigurationRecorder#include_global_resource_types}.
     *
     * @stability stable
     */
    readonly includeGlobalResourceTypes?: boolean | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/config_configuration_recorder.html#resource_types ConfigConfigurationRecorder#resource_types}.
     *
     * @stability stable
     */
    readonly resourceTypes?: string[];
}
export declare function configConfigurationRecorderRecordingGroupToTerraform(struct?: ConfigConfigurationRecorderRecordingGroupOutputReference | ConfigConfigurationRecorderRecordingGroup): any;
/**
 * @stability stable
 */
export declare class ConfigConfigurationRecorderRecordingGroupOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
     * @param terraformResource The parent resource.
     * @param terraformAttribute The attribute on the parent resource this class is referencing.
     * @param isSingleItem True if this is a block, false if it's a list.
     * @stability stable
     */
    constructor(terraformResource: cdktf.ITerraformResource, terraformAttribute: string, isSingleItem: boolean);
    /**
     * @stability stable
     */
    get internalValue(): ConfigConfigurationRecorderRecordingGroup | undefined;
    /**
     * @stability stable
     */
    set internalValue(value: ConfigConfigurationRecorderRecordingGroup | undefined);
    private _allSupported?;
    /**
     * @stability stable
     */
    get allSupported(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set allSupported(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetAllSupported(): void;
    /**
     * @stability stable
     */
    get allSupportedInput(): boolean | cdktf.IResolvable | undefined;
    private _includeGlobalResourceTypes?;
    /**
     * @stability stable
     */
    get includeGlobalResourceTypes(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set includeGlobalResourceTypes(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetIncludeGlobalResourceTypes(): void;
    /**
     * @stability stable
     */
    get includeGlobalResourceTypesInput(): boolean | cdktf.IResolvable | undefined;
    private _resourceTypes?;
    /**
     * @stability stable
     */
    get resourceTypes(): string[];
    /**
     * @stability stable
     */
    set resourceTypes(value: string[]);
    /**
     * @stability stable
     */
    resetResourceTypes(): void;
    /**
     * @stability stable
     */
    get resourceTypesInput(): string[] | undefined;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/config_configuration_recorder.html aws_config_configuration_recorder}.
 *
 * @stability stable
 */
export declare class ConfigConfigurationRecorder extends cdktf.TerraformResource {
    /**
     * @stability stable
     */
    static readonly tfResourceType: string;
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/config_configuration_recorder.html aws_config_configuration_recorder} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config: ConfigConfigurationRecorderConfig);
    /**
     * @stability stable
     */
    get id(): string;
    private _name?;
    /**
     * @stability stable
     */
    get name(): string;
    /**
     * @stability stable
     */
    set name(value: string);
    /**
     * @stability stable
     */
    resetName(): void;
    /**
     * @stability stable
     */
    get nameInput(): string | undefined;
    private _roleArn?;
    /**
     * @stability stable
     */
    get roleArn(): string;
    /**
     * @stability stable
     */
    set roleArn(value: string);
    /**
     * @stability stable
     */
    get roleArnInput(): string | undefined;
    private _recordingGroup;
    /**
     * @stability stable
     */
    get recordingGroup(): ConfigConfigurationRecorderRecordingGroupOutputReference;
    /**
     * @stability stable
     */
    putRecordingGroup(value: ConfigConfigurationRecorderRecordingGroup): void;
    /**
     * @stability stable
     */
    resetRecordingGroup(): void;
    /**
     * @stability stable
     */
    get recordingGroupInput(): ConfigConfigurationRecorderRecordingGroup | undefined;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
