"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformModule = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const terraform_element_1 = require("./terraform-element");
const terraform_provider_1 = require("./terraform-provider");
const util_1 = require("./util");
const tokens_1 = require("./tokens");
const path = require("path");
const tfExpression_1 = require("./tfExpression");
const token_map_1 = require("./tokens/private/token-map");
/**
 * @experimental
 */
class TerraformModule extends terraform_element_1.TerraformElement {
    /**
     * @experimental
     */
    constructor(scope, id, options) {
        super(scope, id);
        if (options.source.startsWith("./") || options.source.startsWith("../")) {
            this.source = path.join("../../..", options.source);
        }
        else {
            this.source = options.source;
        }
        this.version = options.version;
        this._providers = options.providers;
        this.validateIfProvidersHaveUniqueKeys();
        if (Array.isArray(options.dependsOn)) {
            this.dependsOn = options.dependsOn.map((dependency) => dependency.fqn);
        }
    }
    // jsii can't handle abstract classes?
    /**
     * @experimental
     */
    synthesizeAttributes() {
        return {};
    }
    /**
     * @experimental
     */
    interpolationForOutput(moduleOutput) {
        return token_map_1.TokenMap.instance().registerString(tfExpression_1.ref(`module.${this.friendlyUniqueId}.${moduleOutput}`));
    }
    /**
     * @experimental
     */
    get fqn() {
        return tokens_1.Token.asString(`module.${this.friendlyUniqueId}`);
    }
    /**
     * @experimental
     */
    get providers() {
        return this._providers;
    }
    /**
     * @experimental
     */
    addProvider(provider) {
        if (!this._providers) {
            this._providers = [];
        }
        this._providers.push(provider);
        this.validateIfProvidersHaveUniqueKeys();
    }
    /**
     * @experimental
     */
    toTerraform() {
        var _b;
        const attributes = util_1.deepMerge({
            ...this.synthesizeAttributes(),
            source: this.source,
            version: this.version,
            providers: (_b = this._providers) === null || _b === void 0 ? void 0 : _b.reduce((a, p) => {
                if (p instanceof terraform_provider_1.TerraformProvider) {
                    return { ...a, [p.terraformResourceType]: p.fqn };
                }
                else {
                    return {
                        ...a,
                        [`${p.provider.terraformResourceType}.${p.moduleAlias}`]: p.provider.fqn,
                    };
                }
            }, {}),
            depends_on: this.dependsOn,
        }, this.rawOverrides);
        attributes["//"] = this.constructNodeMetadata;
        return {
            module: {
                [this.friendlyUniqueId]: attributes,
            },
        };
    }
    /**
     * @experimental
     */
    toMetadata() {
        if (!Object.keys(this.rawOverrides).length) {
            return {};
        }
        return {
            overrides: {
                [`module.${this.source}`]: Object.keys(this.rawOverrides),
            },
        };
    }
    validateIfProvidersHaveUniqueKeys() {
        var _b;
        const moduleAliases = (_b = this._providers) === null || _b === void 0 ? void 0 : _b.map((p) => {
            if (p instanceof terraform_provider_1.TerraformProvider) {
                return p.terraformResourceType;
            }
            else {
                return `${p.provider.terraformResourceType}.${p.moduleAlias}`;
            }
        });
        const uniqueModuleAliases = new Set();
        moduleAliases === null || moduleAliases === void 0 ? void 0 : moduleAliases.forEach((alias) => {
            if (uniqueModuleAliases.has(alias)) {
                throw new Error(`Error: Multiple providers have the same alias: "${alias}"`);
            }
            uniqueModuleAliases.add(alias);
        });
    }
}
exports.TerraformModule = TerraformModule;
_a = JSII_RTTI_SYMBOL_1;
TerraformModule[_a] = { fqn: "cdktf.TerraformModule", version: "0.8.3" };
//# sourceMappingURL=data:application/json;base64,