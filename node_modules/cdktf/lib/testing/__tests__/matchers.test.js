"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
const resource_1 = require("../../../test/helper/resource");
const matchers_1 = require("../matchers");
const data_source_1 = require("../../../test/helper/data-source");
const terraform_stack_1 = require("../../terraform-stack");
const provider_1 = require("../../../test/helper/provider");
const fs = require("fs");
const path = require("path");
function corruptSynthesizedStack(stackPath) {
    const manifest = JSON.parse(fs.readFileSync(path.resolve(stackPath, "manifest.json"), "utf8"));
    const { synthesizedStackPath } = Object.values(manifest.stacks)[0];
    const absoluteStackPath = path.resolve(stackPath, synthesizedStackPath);
    fs.writeFileSync(absoluteStackPath, fs.readFileSync(absoluteStackPath, "utf8") +
        "Weird text that makes the JSON file invalid", "utf8");
}
describe("deepEqualIgnoringObjectCasing", () => {
    it("should compare simple items", () => {
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing(1, 1)).toBe(true);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing("1", "1")).toBe(true);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing(true, true)).toBe(true);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing(false, false)).toBe(true);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing(null, null)).toBe(true);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing(undefined, undefined)).toBe(true);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing([1, 2, 3], [1, 2, 3])).toBe(true);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing({ a: 1, b: 2 }, { a: 1, b: 2 })).toBe(true);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing(1, 2)).toBe(false);
    });
    it("should compare arrays", () => {
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing([1, 2, 3], [1, 2, 3])).toBe(true);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing([1, 2, 3], [1, 2, 4])).toBe(false);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing([1, 2, 3], [1, 2, 3, 4])).toBe(false);
    });
    it("should compare objects", () => {
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing({ a: 1, b: 2 }, { a: 1, b: 2 })).toBe(true);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing({ a: { c: 3 }, b: 2 }, { a: { c: 3 }, b: 2 })).toBe(true);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing({ a: 3, b: 2 }, { a: { c: 3 }, b: 2 })).toBe(false);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing({ a: { c: 3 }, b: 2 }, { a: 3, b: 2 })).toBe(false);
    });
    it("should ignore case when comparing object keys", () => {
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing({ a: 1, fooBar: 2 }, { a: 1, foo_bar: 2 })).toBe(true);
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing({ a: { fooBar: 2 } }, { a: { foo_bar: 2 } })).toBe(true);
    });
    it("should ignore keys not present in expectation", () => {
        expect(matchers_1.asymetricDeepEqualIgnoringObjectCasing({ a: { fooBar: 2 } }, { a: { foo_bar: 2 }, b: 3 })).toBe(true);
    });
});
describe("matchers", () => {
    const toHaveResourceWithProperties = matchers_1.getToHaveResourceWithProperties();
    describe("toHaveResourceWithProperties", () => {
        let synthesizedStack;
        beforeEach(() => {
            synthesizedStack = index_1.Testing.synthScope((scope) => {
                new resource_1.TestResource(scope, "test", { name: "test", tags: { foo: "bar" } });
            });
        });
        it("should pass with no properties", () => {
            const res = toHaveResourceWithProperties(synthesizedStack, resource_1.TestResource);
            expect(res.pass).toBeTruthy();
            expect(res.message()).toMatchInlineSnapshot(`
        "Expected no test_resource with properties {} to be present in synthesised stack.
        Found 1 test_resource resources instead:
        [
          {
            \\"name\\": \\"test\\",
            \\"tags\\": {
              \\"foo\\": \\"bar\\"
            }
          }
        ]"
      `);
        });
        it("should fail with wrong resouce", () => {
            const res = toHaveResourceWithProperties(synthesizedStack, data_source_1.TestDataSource);
            expect(res.pass).toBeFalsy();
            expect(res.message()).toMatchInlineSnapshot(`
        "Expected test_data_source with properties {} to be present in synthesised stack.
        Found no test_data_source resources instead"
      `);
        });
        it("should work on nested elements", () => {
            const res = toHaveResourceWithProperties(synthesizedStack, resource_1.TestResource, {
                tags: { foo: "bar" },
            });
            expect(res.pass).toBeTruthy();
        });
    });
    describe("toHaveDataSourceWithProperties", () => {
        const toHaveDataSourceWithProperties = matchers_1.getToHaveDataSourceWithProperties();
        let synthesizedStack;
        beforeEach(() => {
            synthesizedStack = index_1.Testing.synthScope((scope) => {
                new resource_1.TestResource(scope, "test", { name: "test" });
                new data_source_1.TestDataSource(scope, "test-data-source", { name: "data" });
            });
        });
        it("should not find resources", () => {
            const res = toHaveDataSourceWithProperties(synthesizedStack, resource_1.TestResource);
            expect(res.pass).toBeFalsy();
        });
        it("should find data sources", () => {
            const res = toHaveDataSourceWithProperties(synthesizedStack, data_source_1.TestDataSource, { name: "data" });
            expect(res.pass).toBeTruthy();
        });
    });
    describe("toBeValidTerraform", () => {
        it("fails if anything but a path is passed", () => {
            const res = matchers_1.toBeValidTerraform("not a path");
            expect(res.pass).toBeFalsy();
            expect(res.message()).toMatchInlineSnapshot(`"Expected subject to be a terraform directory: Error: ENOENT: no such file or directory, stat 'not a path'"`);
        });
        it("succeeds if the terraform config passed is valid", () => {
            const app = index_1.Testing.app();
            const stack = new terraform_stack_1.TerraformStack(app, "test");
            new provider_1.DockerProvider(stack, "provider", {});
            new resource_1.DockerImage(stack, "test", { name: "test" });
            const res = matchers_1.toBeValidTerraform(index_1.Testing.fullSynth(stack));
            expect(res.pass).toBeTruthy();
            expect(res.message()).toMatchInlineSnapshot(`"Expected subject not to be a valid terraform stack"`);
        });
        it("fails if the terraform config passed is invalid", () => {
            const app = index_1.Testing.app();
            const stack = new terraform_stack_1.TerraformStack(app, "test");
            new provider_1.DockerProvider(stack, "provider", {});
            new resource_1.DockerImage(stack, "test", { name: "test" });
            const result = index_1.Testing.fullSynth(stack);
            corruptSynthesizedStack(result);
            const res = matchers_1.toBeValidTerraform(result);
            expect(res.pass).toBeFalsy();
            expect(res.message()).toEqual(expect.stringContaining("Expected subject to be a valid terraform stack"));
        });
    });
    describe("toPlanSuccessfully", () => {
        it("fails if anything but a path is passed", () => {
            const res = matchers_1.toPlanSuccessfully("not a path");
            expect(res.pass).toBeFalsy();
            expect(res.message()).toMatchInlineSnapshot(`"Expected subject to be a terraform directory: Error: ENOENT: no such file or directory, stat 'not a path'"`);
        });
        it("succeeds if the terraform config passed is valid", () => {
            const app = index_1.Testing.app();
            const stack = new terraform_stack_1.TerraformStack(app, "test");
            new provider_1.DockerProvider(stack, "provider", {});
            new resource_1.DockerImage(stack, "test", { name: "test" });
            const res = matchers_1.toPlanSuccessfully(index_1.Testing.fullSynth(stack));
            expect(res.pass).toBeTruthy();
            expect(res.message()).toMatchInlineSnapshot(`"Expected subject not to plan successfully"`);
        });
        it("fails if the terraform config passed is invalid", () => {
            const app = index_1.Testing.app();
            const stack = new terraform_stack_1.TerraformStack(app, "test");
            new provider_1.DockerProvider(stack, "provider", {});
            new resource_1.DockerImage(stack, "test", { name: "test" });
            const result = index_1.Testing.fullSynth(stack);
            corruptSynthesizedStack(result);
            const res = matchers_1.toPlanSuccessfully(result);
            expect(res.pass).toBeFalsy();
            expect(res.message()).toEqual(expect.stringContaining("Expected subject to plan successfully"));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,