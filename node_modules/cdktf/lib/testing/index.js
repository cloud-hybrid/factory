"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Testing = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = require("fs");
const path = require("path");
const os = require("os");
const lib_1 = require("../../lib");
const terraform_stack_1 = require("../terraform-stack");
const manifest_1 = require("../manifest");
const features_1 = require("../features");
const jest_1 = require("./adapters/jest");
const synthesizer_1 = require("../synthesize/synthesizer");
/**
 * (experimental) Testing utilities for cdktf applications.
 *
 * @experimental
 */
class Testing {
    /* istanbul ignore next */
    constructor() {
        return;
    }
    /**
     * (experimental) Returns an app for testing with the following properties: - Output directory is a temp dir.
     *
     * @experimental
     */
    static app() {
        const outdir = fs.mkdtempSync(path.join(os.tmpdir(), "cdktf.outdir."));
        const app = new lib_1.App({ outdir, stackTraces: false });
        return this.stubVersion(this.enableFutureFlags(app));
    }
    /**
     * @experimental
     */
    static stubVersion(app) {
        app.node.setContext("cdktfVersion", "stubbed");
        app.manifest.version = "stubbed";
        return app;
    }
    /**
     * @experimental
     */
    static enableFutureFlags(app) {
        const node = app.node;
        Object.entries(features_1.FUTURE_FLAGS).forEach(([key, value]) => node.setContext(key, value));
        return app;
    }
    /**
     * @experimental
     */
    static synthScope(fn) {
        const stack = new terraform_stack_1.TerraformStack(Testing.app(), "stack");
        fn(stack);
        return Testing.synth(stack);
    }
    /**
     * (experimental) Returns the Terraform synthesized JSON.
     *
     * @experimental
     */
    static synth(stack) {
        synthesizer_1.invokeAspects(stack);
        const tfConfig = stack.toTerraform();
        function removeMetadata(item) {
            if (item !== null && typeof item === "object") {
                if (Array.isArray(item)) {
                    return item.map(removeMetadata);
                }
                const cleanedItem = Object.entries(item)
                    // order alphabetically
                    .sort(([a], [b]) => a.localeCompare(b))
                    .reduce((acc, [key, value]) => ({ ...acc, [key]: removeMetadata(value) }), {});
                // Remove metadata
                delete cleanedItem["//"];
                return cleanedItem;
            }
            return item;
        }
        const cleaned = removeMetadata(tfConfig);
        return JSON.stringify(cleaned, null, 2);
    }
    /**
     * @experimental
     */
    static fullSynth(stack) {
        const outdir = fs.mkdtempSync(path.join(os.tmpdir(), "cdktf.outdir."));
        const manifest = new manifest_1.Manifest("stubbed", outdir);
        stack.synthesizer.synthesize({
            outdir,
            manifest,
        });
        manifest.writeToFile();
        return outdir;
    }
    /**
     * @experimental
     */
    static renderConstructTree(construct) {
        return render(construct, 0, false);
        function render(construct, level, isLast) {
            let prefix = "";
            if (level > 0) {
                const spaces = " ".repeat((level - 1) * 4);
                const symbol = isLast ? "└" : "├";
                prefix = `${spaces}${symbol}── `;
            }
            const name = construct instanceof lib_1.App
                ? "App"
                : `${construct.node.id} (${construct.constructor.name})`;
            return `${prefix}${name}\n${construct.node.children
                .map((child, idx, arr) => {
                const isLast = idx === arr.length - 1;
                return render(child, level + 1, isLast);
            })
                .join("")}`;
        }
    }
    /**
     * @experimental
     */
    static setupJest() {
        jest_1.setupJest();
    }
}
exports.Testing = Testing;
_a = JSII_RTTI_SYMBOL_1;
Testing[_a] = { fqn: "cdktf.Testing", version: "0.8.3" };
//# sourceMappingURL=data:application/json;base64,