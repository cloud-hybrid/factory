"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const util_1 = require("util");
const lib_1 = require("../lib");
const readFile = util_1.promisify(fs.readFile);
test('big tree', async () => {
    const tree = new lib_1.AsciiTree('root', new lib_1.AsciiTree('child1', new lib_1.AsciiTree('child1.1'), new lib_1.AsciiTree('child1.2'), new lib_1.AsciiTree('child1.3'), new lib_1.AsciiTree('child1.4', new lib_1.AsciiTree('child1.4.1'), new lib_1.AsciiTree('child1.4.2'), new lib_1.AsciiTree('child1.4.3')), new lib_1.AsciiTree('child1.6'), new lib_1.AsciiTree('child1.7'), new lib_1.AsciiTree('child1.8')), new lib_1.AsciiTree('child2', new lib_1.AsciiTree('child2.1', new lib_1.AsciiTree('child2.1.1', new lib_1.AsciiTree('child.2.1.1.1'), new lib_1.AsciiTree('child.2.1.1.2'), new lib_1.AsciiTree('child.2.1.1.3', new lib_1.AsciiTree('child.2.1.1.3.1'), new lib_1.AsciiTree('child.2.1.1.3.2')), new lib_1.AsciiTree('child.2.1.1.4'), new lib_1.AsciiTree('child.2.1.1.5'), new lib_1.AsciiTree('child.2.1.1.5')), new lib_1.AsciiTree('child2.1.2'))), new lib_1.AsciiTree('child3'));
    await diff(tree, 'big.expected.txt');
});
test('basic example', async () => {
    const tree = new lib_1.AsciiTree('root');
    tree.add(new lib_1.AsciiTree('child1'));
    tree.add(new lib_1.AsciiTree('child2', new lib_1.AsciiTree('grandchild1'), new lib_1.AsciiTree('grandchild2')));
    tree.add(new lib_1.AsciiTree('child3'));
    await diff(tree, 'basic.expected.txt');
});
test('extensability', async () => {
    class TitleNode extends lib_1.AsciiTree {
        constructor(title, ...children) {
            super([title.toLocaleUpperCase(), '='.repeat(title.length)].join('\n'), ...children);
        }
    }
    class KeyValueNode extends lib_1.AsciiTree {
        constructor(key, value) {
            super(`${key}: ${value}`);
        }
    }
    const tree = new lib_1.AsciiTree();
    tree.add(new TitleNode('props', new KeyValueNode('shape', 'circle'), new KeyValueNode('color', 'red'), new KeyValueNode('background', 'blue')));
    tree.add(new TitleNode('dimensions', new KeyValueNode('width', '30px'), new KeyValueNode('height', '40px')));
    await diff(tree, 'extend.expected.txt');
});
test('multiline', async () => {
    class MultiLine extends lib_1.AsciiTree {
        constructor(line, times) {
            let text = '';
            for (let i = 0; i < times; ++i) {
                text += `${line} [#${i}]`;
                if (i < times - 1) {
                    text += '\n';
                }
            }
            super(text);
        }
    }
    const multi = new MultiLine('hello-child-A', 3);
    multi.add(new lib_1.AsciiTree('child of multi', new MultiLine('boom', 3)));
    multi.add(new lib_1.AsciiTree('multi\nline\nchild-of-multi'));
    const tree = new lib_1.AsciiTree('root', new lib_1.AsciiTree('hello', multi, new MultiLine('hello-child-B', 10), new lib_1.AsciiTree('just-a-node')), new lib_1.AsciiTree('world'), new lib_1.AsciiTree('boom', new lib_1.AsciiTree('trach', new MultiLine('multi', 4))));
    await diff(tree, 'multiline.expected.txt');
});
test('toString', () => {
    const tree = new lib_1.AsciiTree('root');
    tree.add(new lib_1.AsciiTree('1'));
    tree.add(new lib_1.AsciiTree('2', new lib_1.AsciiTree('2.1'), new lib_1.AsciiTree('2.2')));
    tree.add(new lib_1.AsciiTree('3'));
    expect(tree.toString()).toEqual(`root
 ├── 1
 ├─┬ 2
 │ ├── 2.1
 │ └── 2.2
 └── 3
`);
});
async function diff(tree, expectedFile) {
    const expectedFilePath = path.join(__dirname, expectedFile);
    const actual = tree.toString();
    const expected = (await readFile(expectedFilePath)).toString();
    expect(actual).toStrictEqual(expected);
}
//# sourceMappingURL=data:application/json;base64,