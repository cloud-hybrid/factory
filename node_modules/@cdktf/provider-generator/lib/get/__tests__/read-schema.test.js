"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const provider_schema_1 = require("../generator/provider-schema");
const constructs_maker_1 = require("../constructs-maker");
const config_1 = require("../../config");
expect.addSnapshotSerializer({
    test: (value) => {
        if (typeof value !== "object" || value === null)
            return false;
        return value["format_version"] !== undefined;
    },
    print: (value) => {
        value["format_version"] = "STUBBED VERSION";
        return JSON.stringify(value, null, 2);
    },
});
describe("readSchema", () => {
    beforeAll(() => {
        jest.setTimeout(120000);
    });
    it("generates a single provider schema", async () => {
        const provider = new config_1.TerraformProviderConstraint("hashicorp/null@3.1.0");
        const targets = new constructs_maker_1.ConstructsMakerProviderTarget(provider, constructs_maker_1.Language.TYPESCRIPT);
        const result = await provider_schema_1.readSchema([targets]);
        expect(result).toMatchSnapshot();
    });
    it("generates a single module schema", async () => {
        const module = new config_1.TerraformModuleConstraint("terraform-aws-modules/iam/aws//modules/iam-account@3.12.0");
        const targets = new constructs_maker_1.ConstructsMakerModuleTarget(module, constructs_maker_1.Language.TYPESCRIPT);
        const result = await provider_schema_1.readSchema([targets]);
        expect(result).toMatchSnapshot();
    });
    it("generates a more complex schema", async () => {
        const module = new config_1.TerraformModuleConstraint("terraform-aws-modules/eks/aws@7.0.1");
        const targets = new constructs_maker_1.ConstructsMakerModuleTarget(module, constructs_maker_1.Language.TYPESCRIPT);
        const result = await provider_schema_1.readSchema([targets]);
        expect(result).toMatchSnapshot();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC1zY2hlbWEudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlYWQtc2NoZW1hLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrRUFBMEQ7QUFDMUQsMERBSTZCO0FBQzdCLHlDQUdzQjtBQUV0QixNQUFNLENBQUMscUJBQXFCLENBQUM7SUFDM0IsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDZCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLEtBQUssSUFBSTtZQUFFLE9BQU8sS0FBSyxDQUFDO1FBRTlELE9BQU8sS0FBSyxDQUFDLGdCQUFnQixDQUFDLEtBQUssU0FBUyxDQUFDO0lBQy9DLENBQUM7SUFDRCxLQUFLLEVBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBRTtRQUNwQixLQUFLLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxpQkFBaUIsQ0FBQztRQUM1QyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4QyxDQUFDO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFDMUIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0NBQW9DLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxvQ0FBMkIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sT0FBTyxHQUFHLElBQUksZ0RBQTZCLENBQy9DLFFBQVEsRUFDUiwyQkFBUSxDQUFDLFVBQVUsQ0FDcEIsQ0FBQztRQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sNEJBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ25DLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2hELE1BQU0sTUFBTSxHQUFHLElBQUksa0NBQXlCLENBQzFDLDJEQUEyRCxDQUM1RCxDQUFDO1FBQ0YsTUFBTSxPQUFPLEdBQUcsSUFBSSw4Q0FBMkIsQ0FDN0MsTUFBTSxFQUNOLDJCQUFRLENBQUMsVUFBVSxDQUNwQixDQUFDO1FBQ0YsTUFBTSxNQUFNLEdBQUcsTUFBTSw0QkFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsaUNBQWlDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDL0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxrQ0FBeUIsQ0FDMUMscUNBQXFDLENBQ3RDLENBQUM7UUFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLDhDQUEyQixDQUM3QyxNQUFNLEVBQ04sMkJBQVEsQ0FBQyxVQUFVLENBQ3BCLENBQUM7UUFDRixNQUFNLE1BQU0sR0FBRyxNQUFNLDRCQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVhZFNjaGVtYSB9IGZyb20gXCIuLi9nZW5lcmF0b3IvcHJvdmlkZXItc2NoZW1hXCI7XG5pbXBvcnQge1xuICBDb25zdHJ1Y3RzTWFrZXJNb2R1bGVUYXJnZXQsXG4gIENvbnN0cnVjdHNNYWtlclByb3ZpZGVyVGFyZ2V0LFxuICBMYW5ndWFnZSxcbn0gZnJvbSBcIi4uL2NvbnN0cnVjdHMtbWFrZXJcIjtcbmltcG9ydCB7XG4gIFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQsXG4gIFRlcnJhZm9ybVByb3ZpZGVyQ29uc3RyYWludCxcbn0gZnJvbSBcIi4uLy4uL2NvbmZpZ1wiO1xuXG5leHBlY3QuYWRkU25hcHNob3RTZXJpYWxpemVyKHtcbiAgdGVzdDogKHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHZhbHVlW1wiZm9ybWF0X3ZlcnNpb25cIl0gIT09IHVuZGVmaW5lZDtcbiAgfSxcbiAgcHJpbnQ6ICh2YWx1ZTogYW55KSA9PiB7XG4gICAgdmFsdWVbXCJmb3JtYXRfdmVyc2lvblwiXSA9IFwiU1RVQkJFRCBWRVJTSU9OXCI7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlLCBudWxsLCAyKTtcbiAgfSxcbn0pO1xuXG5kZXNjcmliZShcInJlYWRTY2hlbWFcIiwgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGplc3Quc2V0VGltZW91dCgxMjAwMDApO1xuICB9KTtcblxuICBpdChcImdlbmVyYXRlcyBhIHNpbmdsZSBwcm92aWRlciBzY2hlbWFcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IFRlcnJhZm9ybVByb3ZpZGVyQ29uc3RyYWludChcImhhc2hpY29ycC9udWxsQDMuMS4wXCIpO1xuICAgIGNvbnN0IHRhcmdldHMgPSBuZXcgQ29uc3RydWN0c01ha2VyUHJvdmlkZXJUYXJnZXQoXG4gICAgICBwcm92aWRlcixcbiAgICAgIExhbmd1YWdlLlRZUEVTQ1JJUFRcbiAgICApO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlYWRTY2hlbWEoW3RhcmdldHNdKTtcbiAgICBleHBlY3QocmVzdWx0KS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG5cbiAgaXQoXCJnZW5lcmF0ZXMgYSBzaW5nbGUgbW9kdWxlIHNjaGVtYVwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9kdWxlID0gbmV3IFRlcnJhZm9ybU1vZHVsZUNvbnN0cmFpbnQoXG4gICAgICBcInRlcnJhZm9ybS1hd3MtbW9kdWxlcy9pYW0vYXdzLy9tb2R1bGVzL2lhbS1hY2NvdW50QDMuMTIuMFwiXG4gICAgKTtcbiAgICBjb25zdCB0YXJnZXRzID0gbmV3IENvbnN0cnVjdHNNYWtlck1vZHVsZVRhcmdldChcbiAgICAgIG1vZHVsZSxcbiAgICAgIExhbmd1YWdlLlRZUEVTQ1JJUFRcbiAgICApO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlYWRTY2hlbWEoW3RhcmdldHNdKTtcbiAgICBleHBlY3QocmVzdWx0KS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG5cbiAgaXQoXCJnZW5lcmF0ZXMgYSBtb3JlIGNvbXBsZXggc2NoZW1hXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2R1bGUgPSBuZXcgVGVycmFmb3JtTW9kdWxlQ29uc3RyYWludChcbiAgICAgIFwidGVycmFmb3JtLWF3cy1tb2R1bGVzL2Vrcy9hd3NANy4wLjFcIlxuICAgICk7XG4gICAgY29uc3QgdGFyZ2V0cyA9IG5ldyBDb25zdHJ1Y3RzTWFrZXJNb2R1bGVUYXJnZXQoXG4gICAgICBtb2R1bGUsXG4gICAgICBMYW5ndWFnZS5UWVBFU0NSSVBUXG4gICAgKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZWFkU2NoZW1hKFt0YXJnZXRzXSk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xufSk7XG4iXX0=