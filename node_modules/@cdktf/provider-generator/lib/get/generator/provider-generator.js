"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformProviderGenerator = void 0;
const resource_parser_1 = require("./resource-parser");
const emitter_1 = require("./emitter");
const path = __importStar(require("path"));
const isMatching = (target, terraformSchemaName) => {
    if (target.isModule)
        return false;
    const elements = terraformSchemaName.split("/");
    if (elements.length === 1) {
        return target.source === terraformSchemaName;
    }
    else {
        const [hostname, scope, provider] = elements;
        if (!hostname || !scope || !provider) {
            throw new Error(`can't handle ${terraformSchemaName}`);
        }
        return target.name === provider;
    }
};
class TerraformProviderGenerator {
    constructor(code, schema, providerConstraints) {
        this.code = code;
        this.providerConstraints = providerConstraints;
        this.resourceParser = new resource_parser_1.ResourceParser();
        this.code.indentation = 2;
        this.resourceEmitter = new emitter_1.ResourceEmitter(this.code);
        this.structEmitter = new emitter_1.StructEmitter(this.code);
        if (!schema.provider_schemas) {
            console.info("no providers - nothing to do");
            return;
        }
        for (const [fqpn, provider] of Object.entries(schema.provider_schemas)) {
            if (this.providerConstraints &&
                this.providerConstraints.find((p) => isMatching(p, fqpn))) {
                this.emitProvider(fqpn, provider);
            }
            else if (!this.providerConstraints) {
                this.emitProvider(fqpn, provider);
            }
        }
    }
    async save(outdir) {
        await this.code.save(outdir);
    }
    emitProvider(fqpn, provider) {
        const name = fqpn.split("/").pop();
        if (!name) {
            throw new Error(`can't handle ${fqpn}`);
        }
        const resourceModels = [];
        for (const [type, resource] of Object.entries(provider.resource_schemas || [])) {
            resourceModels.push(this.resourceParser.parse(name, type, resource, "resource"));
        }
        for (const [type, resource] of Object.entries(provider.data_source_schemas || [])) {
            resourceModels.push(this.resourceParser.parse(name, `data_${type}`, resource, "data_source"));
        }
        const namespacedResources = {};
        const files = [];
        resourceModels.forEach((resourceModel) => {
            if (resourceModel.namespace) {
                const namespace = resourceModel.namespace.name;
                if (!namespacedResources[namespace]) {
                    namespacedResources[namespace] = [];
                }
                namespacedResources[namespace].push(resourceModel);
            }
            else if (resourceModel.structsRequireSharding) {
                files.push(this.emitResourceFileWithComplexStruct(resourceModel));
            }
            else {
                files.push(this.emitResourceFile(resourceModel));
            }
        });
        for (const [, resources] of Object.entries(namespacedResources)) {
            files.push(this.emitNamespacedResourceFile(name, resources));
        }
        if (provider.provider) {
            const providerResource = this.resourceParser.parse(name, `provider`, provider.provider, "provider");
            if (this.providerConstraints) {
                const constraint = this.providerConstraints.find((p) => isMatching(p, fqpn));
                if (!constraint) {
                    throw new Error(`can't handle ${fqpn}`);
                }
                providerResource.providerVersionConstraint = constraint.version;
                providerResource.terraformProviderSource = constraint.source;
            }
            files.push(this.emitResourceFile(providerResource));
        }
        this.emitIndexFile(name, files);
    }
    emitIndexFile(provider, files) {
        const folder = `providers/${provider}`;
        const filePath = `${folder}/index.ts`;
        this.code.openFile(filePath);
        this.code.line("// generated by cdktf get");
        for (const file of files) {
            if (file.startsWith("ns:")) {
                const fileName = file.replace("ns:", "");
                this.code.line(`export * as ${fileName} from './${fileName}'`);
            }
            else {
                this.code.line(`export * from './${file
                    .replace(`${folder}/`, "")
                    .replace(".ts", "")}';`);
            }
        }
        this.code.line();
        this.code.closeFile(filePath);
    }
    emitResourceFile(resource) {
        this.code.openFile(resource.filePath);
        this.emitFileHeader(resource);
        this.structEmitter.emit(resource);
        this.resourceEmitter.emit(resource);
        this.code.closeFile(resource.filePath);
        return resource.filePath;
    }
    emitNamespacedResourceFile(providerName, resources) {
        const ns = resources[0].namespace;
        const comment = ns === null || ns === void 0 ? void 0 : ns.comment;
        if (!(ns === null || ns === void 0 ? void 0 : ns.name))
            throw new Error("namespace name is missing");
        const generatedFiles = [];
        for (const resource of resources) {
            // drop the last segment of the filepath
            const filePath = resource.filePath.split("/").slice(0, -1).join("/");
            const namespacedFilePath = path.join(filePath, ns.name, resource.fileName);
            this.code.openFile(namespacedFilePath);
            this.code.line(`// generated from terraform resource schema`);
            this.code.line();
            if (resource.structsRequireSharding) {
                this.code.line(`import { ${resource.importableTypes.join(", \n")}} from './${resource.structsFolderName}'`);
                this.code.line(`import { ${resource.importableStructMapper.join(", \n")}} from './${resource.structsFolderName}'`);
                this.code.line(`import { ${resource.importableOutputReferences.join(",\n")} } from './${resource.structsFolderName}'`);
                resource.importStatements.forEach((statement) => this.code.line(statement));
                this.code.line();
                this.code.line(`/**`);
                this.code.line(`* ${comment}`);
                this.code.line(`*/`);
                this.structEmitter.emitInterface(resource, resource.configStruct);
                this.resourceEmitter.emit(resource);
                this.code.closeFile(namespacedFilePath);
                this.structEmitter.emit(resource);
                generatedFiles.push(resource.fileName);
                generatedFiles.push(resource.structsFolderName);
            }
            else {
                resource.importStatements.forEach((statement) => this.code.line(statement));
                this.code.line();
                this.code.line(`/**`);
                this.code.line(`* ${comment}`);
                this.code.line(`*/`);
                this.structEmitter.emit(resource);
                this.resourceEmitter.emit(resource);
                this.code.closeFile(namespacedFilePath);
                generatedFiles.push(resource.fileName);
            }
        }
        const indexFilePath = path.join(`providers`, providerName, ns.name, "index.ts");
        this.code.openFile(indexFilePath);
        this.code.line("// generated by cdktf get");
        for (const file of generatedFiles) {
            this.code.line(`export * from './${path.basename(file, ".ts")}';`);
        }
        this.code.line();
        this.code.closeFile(indexFilePath);
        return `ns:${ns.name}`;
    }
    emitResourceFileWithComplexStruct(resource) {
        const generatedFiles = [];
        // drop the last segment of the filepath
        const filePath = resource.filePath;
        this.code.openFile(filePath);
        this.code.line(`// generated from terraform resource schema`);
        this.code.line();
        if (resource.structsRequireSharding) {
            if (resource.importableTypes.length > 0) {
                this.code.line(`import { ${resource.importableTypes.join(", \n")}} from './${resource.structsFolderName}'`);
            }
            if (resource.importableStructMapper.length > 0) {
                this.code.line(`import { ${resource.importableStructMapper.join(", \n")}} from './${resource.structsFolderName}'`);
            }
            if (resource.importableOutputReferences.length > 0) {
                this.code.line(`import { ${resource.importableOutputReferences.join(",\n")} } from './${resource.structsFolderName}'`);
            }
            this.code.line(`export * from './${resource.structsFolderName}'`);
            resource.importStatements.forEach((statement) => this.code.line(statement));
            this.structEmitter.emitInterface(resource, resource.configStruct);
            this.resourceEmitter.emit(resource);
            this.code.closeFile(filePath);
            this.structEmitter.emit(resource);
            generatedFiles.push(resource.fileName);
            generatedFiles.push(resource.structsFolderName);
        }
        else {
            resource.importStatements.forEach((statement) => this.code.line(statement));
            this.structEmitter.emit(resource);
            this.resourceEmitter.emit(resource);
            this.code.closeFile(filePath);
            generatedFiles.push(resource.fileName);
        }
        return filePath;
    }
    emitFileHeader(resource) {
        this.code.line(`// ${resource.linkToDocs}`);
        this.code.line(`// generated from terraform resource schema`);
        this.code.line();
        resource.importStatements.forEach((statement) => this.code.line(statement));
        this.code.line();
        this.code.line("// Configuration");
        this.code.line();
    }
}
exports.TerraformProviderGenerator = TerraformProviderGenerator;
//# sourceMappingURL=data:application/json;base64,