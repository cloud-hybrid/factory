"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceModel = exports.STRUCT_SHARDING_THRESHOLD = void 0;
const codemaker_1 = require("codemaker");
const path_1 = __importDefault(require("path"));
const util_1 = require("../../../util");
const provider_namespaces_1 = require("../constants/provider-namespaces");
const struct_1 = require("./struct");
exports.STRUCT_SHARDING_THRESHOLD = 400;
class ResourceModel {
    constructor(options) {
        this.className = options.className;
        this.filePath = options.filePath;
        this.terraformType = options.terraformType;
        this.baseName = options.baseName;
        this.attributes = options.attributes;
        this.schema = options.schema;
        this.provider = options.provider;
        this.fileName = options.fileName;
        this._structs = options.structs;
        this.terraformSchemaType = options.terraformSchemaType;
        this.configStructName = options.configStructName;
        this.dependencies = [
            `import { Construct } from 'constructs';`,
            `import * as cdktf from 'cdktf';`,
        ];
    }
    get structsRequireSharding() {
        return this._structs.length > exports.STRUCT_SHARDING_THRESHOLD;
    }
    get structs() {
        return [this.configStruct, ...this._structs];
    }
    get configStruct() {
        return new struct_1.ConfigStruct(this.configStructName, this.attributes);
    }
    get synthesizableAttributes() {
        return this.configStruct.assignableAttributes;
    }
    get importStatements() {
        return this.dependencies;
    }
    get schemaAsJson() {
        return this.escapeSchema(JSON.stringify(this.schema, undefined, 2));
    }
    get linkToDocs() {
        if (this.isProvider)
            return `https://www.terraform.io/docs/providers/${this.provider}`;
        return `https://www.terraform.io/docs/providers/${this.provider}/${this.isDataSource ? "d" : "r"}/${this.terraformDocName}.html`;
    }
    get isProvider() {
        return this.terraformSchemaType === "provider";
    }
    get namespace() {
        return provider_namespaces_1.getResourceNamespace(this.provider, this.baseName);
    }
    get isDataSource() {
        return this.terraformSchemaType === "data_source";
    }
    get parentClassName() {
        return this.isProvider
            ? "TerraformProvider"
            : this.isDataSource
                ? "TerraformDataSource"
                : "TerraformResource";
    }
    get terraformResourceType() {
        return this.isProvider
            ? this.provider
            : this.isDataSource
                ? this.terraformType.replace(/^data_/, "")
                : this.terraformType;
    }
    get terraformDocName() {
        return codemaker_1.toSnakeCase(this.terraformResourceType.replace(new RegExp(`^${this.provider}_`, "i"), ""));
    }
    get importableTypes() {
        const structNames = this.structNames;
        const result = [
            ...this.configStruct.attributeTypeNames,
            ...this.attributeTypeNames,
        ].filter((t) => structNames.includes(t));
        return Array.from(new Set(result));
    }
    get importableTypesFromClasses() {
        const structNames = this.structNames;
        const result = [
            ...this.configStruct.attributeTypeNamesFromClasses,
            ...this.attributeTypeNamesFromClasses,
        ].filter((t) => structNames.includes(t));
        return Array.from(new Set(result));
    }
    get importableOutputReferences() {
        return this.importableTypesFromClasses.map((type) => `${type}OutputReference`);
    }
    get importableStructMapper() {
        return this.importableTypes.map((type) => `${util_1.downcaseFirst(type)}ToTerraform`);
    }
    get structNames() {
        return this.structs.map((s) => s.name);
    }
    get structsFolderName() {
        return `${path_1.default.basename(this.fileName, ".ts")}-structs`;
    }
    get attributeTypeNames() {
        return this.attributes.map((a) => a.type.typeName);
    }
    get attributeTypeNamesFromClasses() {
        return this.attributes
            .filter((a) => { var _a; return (_a = a.type.struct) === null || _a === void 0 ? void 0 : _a.isClass; })
            .map((a) => a.type.typeName);
    }
    get structsFolderPath() {
        const basePath = this.filePath.split("/").slice(0, -1).join("/");
        if (this.namespace) {
            return path_1.default.join(basePath, this.namespace.name, this.structsFolderName);
        }
        else {
            return path_1.default.join(basePath, this.structsFolderName);
        }
    }
    escapeSchema(schema) {
        return schema.replace(/(\*\/)/gi, `*\\/`);
    }
}
exports.ResourceModel = ResourceModel;
//# sourceMappingURL=data:application/json;base64,