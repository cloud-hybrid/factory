"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeTypeModel = exports.TokenizableTypes = void 0;
var TokenizableTypes;
(function (TokenizableTypes) {
    TokenizableTypes["STRING"] = "string";
    TokenizableTypes["STRING_LIST"] = "string[]";
    TokenizableTypes["NUMBER"] = "number";
    TokenizableTypes["BOOLEAN"] = "boolean";
})(TokenizableTypes = exports.TokenizableTypes || (exports.TokenizableTypes = {}));
class AttributeTypeModel {
    constructor(_type, options) {
        this._type = _type;
        this.typeName = _type;
        this.isList = !!options.isList;
        this.isMap = !!options.isMap;
        this.isComputed = !!options.isComputed;
        this.isOptional = !!options.isOptional;
        this.isRequired = !!options.isRequired;
        this.isSingleItem = !!options.isSingleItem;
        this.level = options.level;
        this.struct = options.struct;
        if (options.struct) {
            options.struct.isSingleItem = this.isSingleItem || false;
        }
    }
    get name() {
        var _a;
        if (this.isStringMap)
            return `cdktf.StringMap`;
        if (this.isNumberMap)
            return `cdktf.NumberMap`;
        if (this.isBooleanMap)
            return `cdktf.BooleanMap`;
        if (this.isMap)
            return `{ [key: string]: ${this._type} } | cdktf.IResolvable`;
        if (this.isList && !this.isComputed && this.isSingleItem)
            return `${this._type}`;
        if (this.isList && !this.isComputed)
            return `${this._type}[]`;
        if (this.isList &&
            this.isComputed &&
            (this.isPrimitive || !((_a = this.struct) === null || _a === void 0 ? void 0 : _a.isClass)))
            return `${this._type}[]`;
        if (this.isList && this.isComputed && this.isComplex)
            return `${this._type}`;
        if (this._type === TokenizableTypes.BOOLEAN)
            return `boolean | cdktf.IResolvable`;
        return this._type;
    }
    get storedName() {
        let name = this.name;
        return `${name}${this.isOptional ? " | undefined" : ""}`;
    }
    get isComplex() {
        return !!this.struct || (this.isMap && this.isComputed);
    }
    get isPrimitive() {
        return !this.isComplex;
    }
    get isString() {
        return this.name === TokenizableTypes.STRING;
    }
    get isNumber() {
        return this.name === TokenizableTypes.NUMBER;
    }
    get isStringList() {
        return this.name === TokenizableTypes.STRING_LIST;
    }
    get isNumberList() {
        return this.isList && this._type === TokenizableTypes.NUMBER;
    }
    get isBooleanList() {
        return this.isList && this._type === TokenizableTypes.BOOLEAN;
    }
    get isBoolean() {
        return this._type === TokenizableTypes.BOOLEAN || this.isBooleanMap;
    }
    get isStringMap() {
        return (!this.isOptional &&
            this.isMap &&
            this._type === TokenizableTypes.STRING &&
            this.isComputed);
    }
    get isNumberMap() {
        return (!this.isOptional &&
            this.isMap &&
            this._type === TokenizableTypes.NUMBER &&
            this.isComputed);
    }
    get isBooleanMap() {
        return (!this.isOptional &&
            this.isMap &&
            this._type === TokenizableTypes.BOOLEAN &&
            this.isComputed);
    }
    get isComputedComplex() {
        return this.isRootType && this.isComputed && this.isComplex;
    }
    get isRootType() {
        return this.level === 2;
    }
    get isComputedPrimitive() {
        return this.isComputed && this.isPrimitive;
    }
    get isTokenizable() {
        return Object.values(TokenizableTypes).includes(this.name);
    }
    get innerType() {
        return this._type;
    }
}
exports.AttributeTypeModel = AttributeTypeModel;
//# sourceMappingURL=data:application/json;base64,