"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeModel = void 0;
class AttributeModel {
    constructor(options) {
        this.storageName = options.storageName;
        this._name = options.name;
        this.type = options.type;
        this.optional = options.optional;
        this.computed = options.computed;
        this.terraformName = options.terraformName;
        this.terraformFullName = options.terraformFullName;
        this._description = options.description;
        this.provider = options.provider;
        this.required = options.required;
    }
    get typeDefinition() {
        const optional = this.optional ? "?" : "";
        return `${this.name}${optional}: ${this.type.name}`;
    }
    get isAssignable() {
        return this.required || this.optional;
    }
    get isOptional() {
        return this.optional;
    }
    get isRequired() {
        return this.required;
    }
    get isTokenizable() {
        return this.type.isTokenizable;
    }
    get isProvider() {
        return this.provider;
    }
    get getterType() {
        let getterType = { _type: "plain" };
        if (
        // Complex Computed List Map
        this.computed &&
            !this.isOptional &&
            this.type.isComputedComplex &&
            this.type.isList &&
            this.type.isMap) {
            getterType = {
                _type: "args",
                args: "index: string, key: string",
                returnType: this.mapType,
                returnStatement: `new ${this.type.name}(this, \`${this.terraformName}.\${index}\`).lookup(key)`,
            };
        }
        else if (
        // Complex Computed List
        this.computed &&
            !this.isOptional &&
            this.type.isComputedComplex &&
            this.type.isList) {
            getterType = {
                _type: "args",
                args: "index: string",
                returnStatement: `new ${this.type.name}(this, '${this.terraformName}', index)`,
            };
        }
        else if (
        // Complex Computed Map
        this.computed &&
            !this.isOptional &&
            this.type.isComputedComplex &&
            this.type.isMap) {
            getterType = {
                _type: "args",
                args: "key: string",
                returnType: this.mapType,
                returnStatement: `new ${this.type.name}(this, '${this.terraformName}').lookup(key)`,
            };
        }
        if (this.type.isSingleItem && this.type.isComplex && !this.isProvider) {
            getterType = { _type: "stored_class" };
        }
        return getterType;
    }
    get mapType() {
        const type = this.type;
        if (type.isStringMap) {
            return `string`;
        }
        if (type.isNumberMap) {
            return `number`;
        }
        if (type.isBooleanMap) {
            return `boolean`;
        }
        if (process.env.DEBUG) {
            console.error(`The attribute ${JSON.stringify(this)} isn't implemented yet`);
        }
        return `any`;
    }
    get isStored() {
        return ((this.isAssignable && !this.isConfigIgnored) ||
            this.getterType._type === "stored_class");
    }
    get setterType() {
        if (!this.isStored) {
            return { _type: "none" };
        }
        if (this.getterType._type === "stored_class") {
            return {
                _type: "stored_class",
                type: this.type.name,
            };
        }
        return {
            _type: "set",
            type: `${this.type.name}${this.isProvider ? " | undefined" : ""}`,
        };
    }
    get name() {
        // `self` and `build` doesn't work in as property name in Python
        if (this._name === "self" || this._name === "build")
            return `${this._name}Attribute`;
        // jsii can't handle `getFoo` properties, since it's incompatible with Java
        if (this._name.match(/^get[A-Z]+/))
            return this._name.replace("get", "fetch");
        // `equals` is a prohibited name in jsii
        if (this._name === "equals")
            return "equalTo";
        // `node` is already used by the Constructs base class
        if (this._name === "node")
            return "nodeAttribute";
        // `System` shadows built-in types in CSharp (see #1420)
        if (this._name === "system")
            return "systemAttribute";
        // `tfResourceType` is already used by resources to distinguish between different resource types
        if (this._name === "tfResourceType")
            return `${this._name}Attribute`;
        return this._name;
    }
    get description() {
        var _a;
        return (_a = this._description) === null || _a === void 0 ? void 0 : _a.replace(/(\*\/)/gi, `*\\/`).replace(/'''/gi, "```");
    }
    get isConfigIgnored() {
        if (this.isAssignable && !this.computed) {
            return false;
        }
        const ignoreList = ["arn", "id"];
        return ignoreList.includes(this.name);
    }
}
exports.AttributeModel = AttributeModel;
//# sourceMappingURL=data:application/json;base64,