import { ResourceNamespace } from "../constants/provider-namespaces";
import { Schema } from "../provider-schema";
import { AttributeModel } from "./attribute-model";
import { Struct, ConfigStruct } from "./struct";
export declare const STRUCT_SHARDING_THRESHOLD = 400;
interface ResourceModelOptions {
    terraformType: string;
    className: string;
    baseName: string;
    fileName: string;
    filePath: string;
    attributes: AttributeModel[];
    structs: Struct[];
    provider: string;
    schema: Schema;
    terraformSchemaType: string;
    configStructName: string;
}
export declare class ResourceModel {
    className: string;
    filePath: string;
    terraformType: string;
    baseName: string;
    provider: string;
    providerVersionConstraint?: string;
    terraformProviderSource?: string;
    fileName: string;
    attributes: AttributeModel[];
    schema: Schema;
    private _structs;
    private dependencies;
    private terraformSchemaType;
    private configStructName;
    constructor(options: ResourceModelOptions);
    get structsRequireSharding(): boolean;
    get structs(): Struct[];
    get configStruct(): ConfigStruct;
    get synthesizableAttributes(): AttributeModel[];
    get importStatements(): string[];
    get schemaAsJson(): string;
    get linkToDocs(): string;
    get isProvider(): boolean;
    get namespace(): ResourceNamespace | undefined;
    get isDataSource(): boolean;
    get parentClassName(): string;
    get terraformResourceType(): string;
    get terraformDocName(): string;
    get importableTypes(): string[];
    get importableTypesFromClasses(): string[];
    get importableOutputReferences(): string[];
    get importableStructMapper(): string[];
    get structNames(): string[];
    get structsFolderName(): string;
    get attributeTypeNames(): string[];
    get attributeTypeNamesFromClasses(): string[];
    get structsFolderPath(): string;
    private escapeSchema;
}
export {};
