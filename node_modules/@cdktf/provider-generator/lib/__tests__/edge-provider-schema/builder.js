"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaBuilder = exports.schema = void 0;
function schema({ name, provider, resources = {}, dataSources = {}, }) {
    return {
        format_version: "1.0",
        provider_schemas: {
            [`registry.terraform.io/cdktf/${name}`]: {
                provider: provider,
                resource_schemas: resources,
                data_source_schemas: dataSources,
            },
        },
    };
}
exports.schema = schema;
class SchemaBuilder {
    constructor() {
        this.schema = {
            version: 0,
            block: {
                attributes: {},
                block_types: {},
            },
        };
    }
    attribute({ name, type, required = false, computed = false, }) {
        this.schema.block.attributes[name] = {
            type,
            optional: !required,
            computed,
            required,
        };
        return this;
    }
    listBlock({ name, block, minItems, maxItems, }) {
        this.schema.block.block_types[name] = {
            nesting_mode: "list",
            block,
            min_items: minItems,
            max_items: maxItems,
        };
        return this;
    }
    mapBlock({ name, block, }) {
        this.schema.block.block_types[name] = { nesting_mode: "map", block };
        return this;
    }
    setBlock({ name, block, }) {
        this.schema.block.block_types[name] = { nesting_mode: "set", block };
        return this;
    }
    singleBlock({ name, block, }) {
        this.schema.block.block_types[name] = { nesting_mode: "single", block };
        return this;
    }
    build() {
        return this.schema;
    }
    asBlock() {
        return this.schema.block;
    }
    addAllPrimitiveTypes({ required, computed, prefix = "", }) {
        this.attribute({ name: prefix + "str", type: "string", required, computed })
            .attribute({ name: prefix + "num", type: "number", required, computed })
            .attribute({ name: prefix + "bool", type: "bool", required, computed });
        return this;
    }
    addAllPrimitivePermutations() {
        this.addAllPrimitiveTypes({
            required: false,
            computed: false,
            prefix: "opt",
        })
            .addAllPrimitiveTypes({ required: true, computed: false, prefix: "req" })
            .addAllPrimitiveTypes({
            required: false,
            computed: true,
            prefix: "computed",
        });
        return this;
    }
}
exports.SchemaBuilder = SchemaBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EsU0FBZ0IsTUFBTSxDQUFDLEVBQ3JCLElBQUksRUFDSixRQUFRLEVBQ1IsU0FBUyxHQUFHLEVBQUUsRUFDZCxXQUFXLEdBQUcsRUFBRSxHQU1qQjtJQUNDLE9BQU87UUFDTCxjQUFjLEVBQUUsS0FBSztRQUNyQixnQkFBZ0IsRUFBRTtZQUNoQixDQUFDLCtCQUErQixJQUFJLEVBQUUsQ0FBQyxFQUFFO2dCQUN2QyxRQUFRLEVBQUUsUUFBUTtnQkFDbEIsZ0JBQWdCLEVBQUUsU0FBUztnQkFDM0IsbUJBQW1CLEVBQUUsV0FBVzthQUNqQztTQUNGO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFyQkQsd0JBcUJDO0FBRUQsTUFBYSxhQUFhO0lBR3hCO1FBQ0UsSUFBSSxDQUFDLE1BQU0sR0FBRztZQUNaLE9BQU8sRUFBRSxDQUFDO1lBQ1YsS0FBSyxFQUFFO2dCQUNMLFVBQVUsRUFBRSxFQUFFO2dCQUNkLFdBQVcsRUFBRSxFQUFFO2FBQ2hCO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTSxTQUFTLENBQUMsRUFDZixJQUFJLEVBQ0osSUFBSSxFQUNKLFFBQVEsR0FBRyxLQUFLLEVBQ2hCLFFBQVEsR0FBRyxLQUFLLEdBTWpCO1FBQ0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQ25DLElBQUk7WUFDSixRQUFRLEVBQUUsQ0FBQyxRQUFRO1lBQ25CLFFBQVE7WUFDUixRQUFRO1NBQ1QsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFNBQVMsQ0FBQyxFQUNmLElBQUksRUFDSixLQUFLLEVBQ0wsUUFBUSxFQUNSLFFBQVEsR0FNVDtRQUNDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRztZQUNwQyxZQUFZLEVBQUUsTUFBTTtZQUNwQixLQUFLO1lBQ0wsU0FBUyxFQUFFLFFBQVE7WUFDbkIsU0FBUyxFQUFFLFFBQVE7U0FDcEIsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFFBQVEsQ0FBQyxFQUNkLElBQUksRUFDSixLQUFLLEdBSU47UUFDQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQ3JFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFFBQVEsQ0FBQyxFQUNkLElBQUksRUFDSixLQUFLLEdBSU47UUFDQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQ3JFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNNLFdBQVcsQ0FBQyxFQUNqQixJQUFJLEVBQ0osS0FBSyxHQUlOO1FBQ0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUN4RSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxLQUFLO1FBQ1YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFTSxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRU0sb0JBQW9CLENBQUMsRUFDMUIsUUFBUSxFQUNSLFFBQVEsRUFDUixNQUFNLEdBQUcsRUFBRSxHQUtaO1FBQ0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEdBQUcsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDO2FBQ3pFLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEdBQUcsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDO2FBQ3ZFLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEdBQUcsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFMUUsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sMkJBQTJCO1FBQ2hDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztZQUN4QixRQUFRLEVBQUUsS0FBSztZQUNmLFFBQVEsRUFBRSxLQUFLO1lBQ2YsTUFBTSxFQUFFLEtBQUs7U0FDZCxDQUFDO2FBQ0Msb0JBQW9CLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO2FBQ3hFLG9CQUFvQixDQUFDO1lBQ3BCLFFBQVEsRUFBRSxLQUFLO1lBQ2YsUUFBUSxFQUFFLElBQUk7WUFDZCxNQUFNLEVBQUUsVUFBVTtTQUNuQixDQUFDLENBQUM7UUFDTCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQTNIRCxzQ0EySEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm92aWRlclNjaGVtYSwgU2NoZW1hLCBBdHRyaWJ1dGVUeXBlLCBCbG9jayB9IGZyb20gXCIuLi8uLi9cIjtcblxudHlwZSBSZXNvdXJjZVNjaGVtYSA9IHsgW3R5cGU6IHN0cmluZ106IFNjaGVtYSB9O1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVtYSh7XG4gIG5hbWUsXG4gIHByb3ZpZGVyLFxuICByZXNvdXJjZXMgPSB7fSxcbiAgZGF0YVNvdXJjZXMgPSB7fSxcbn06IHtcbiAgbmFtZTogc3RyaW5nO1xuICBwcm92aWRlcjogU2NoZW1hO1xuICByZXNvdXJjZXM6IFJlc291cmNlU2NoZW1hO1xuICBkYXRhU291cmNlczogUmVzb3VyY2VTY2hlbWE7XG59KTogUHJvdmlkZXJTY2hlbWEge1xuICByZXR1cm4ge1xuICAgIGZvcm1hdF92ZXJzaW9uOiBcIjEuMFwiLFxuICAgIHByb3ZpZGVyX3NjaGVtYXM6IHtcbiAgICAgIFtgcmVnaXN0cnkudGVycmFmb3JtLmlvL2Nka3RmLyR7bmFtZX1gXToge1xuICAgICAgICBwcm92aWRlcjogcHJvdmlkZXIsXG4gICAgICAgIHJlc291cmNlX3NjaGVtYXM6IHJlc291cmNlcyxcbiAgICAgICAgZGF0YV9zb3VyY2Vfc2NoZW1hczogZGF0YVNvdXJjZXMsXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBTY2hlbWFCdWlsZGVyIHtcbiAgcHJpdmF0ZSBzY2hlbWE6IFNjaGVtYTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNjaGVtYSA9IHtcbiAgICAgIHZlcnNpb246IDAsXG4gICAgICBibG9jazoge1xuICAgICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgICAgYmxvY2tfdHlwZXM6IHt9LFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGF0dHJpYnV0ZSh7XG4gICAgbmFtZSxcbiAgICB0eXBlLFxuICAgIHJlcXVpcmVkID0gZmFsc2UsXG4gICAgY29tcHV0ZWQgPSBmYWxzZSxcbiAgfToge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0eXBlOiBBdHRyaWJ1dGVUeXBlO1xuICAgIHJlcXVpcmVkOiBib29sZWFuO1xuICAgIGNvbXB1dGVkOiBib29sZWFuO1xuICB9KTogU2NoZW1hQnVpbGRlciB7XG4gICAgdGhpcy5zY2hlbWEuYmxvY2suYXR0cmlidXRlc1tuYW1lXSA9IHtcbiAgICAgIHR5cGUsXG4gICAgICBvcHRpb25hbDogIXJlcXVpcmVkLFxuICAgICAgY29tcHV0ZWQsXG4gICAgICByZXF1aXJlZCxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIGxpc3RCbG9jayh7XG4gICAgbmFtZSxcbiAgICBibG9jayxcbiAgICBtaW5JdGVtcyxcbiAgICBtYXhJdGVtcyxcbiAgfToge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBibG9jazogQmxvY2s7XG4gICAgbWluSXRlbXM6IG51bWJlcjtcbiAgICBtYXhJdGVtczogbnVtYmVyO1xuICB9KTogU2NoZW1hQnVpbGRlciB7XG4gICAgdGhpcy5zY2hlbWEuYmxvY2suYmxvY2tfdHlwZXNbbmFtZV0gPSB7XG4gICAgICBuZXN0aW5nX21vZGU6IFwibGlzdFwiLFxuICAgICAgYmxvY2ssXG4gICAgICBtaW5faXRlbXM6IG1pbkl0ZW1zLFxuICAgICAgbWF4X2l0ZW1zOiBtYXhJdGVtcyxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIG1hcEJsb2NrKHtcbiAgICBuYW1lLFxuICAgIGJsb2NrLFxuICB9OiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGJsb2NrOiBCbG9jaztcbiAgfSk6IFNjaGVtYUJ1aWxkZXIge1xuICAgIHRoaXMuc2NoZW1hLmJsb2NrLmJsb2NrX3R5cGVzW25hbWVdID0geyBuZXN0aW5nX21vZGU6IFwibWFwXCIsIGJsb2NrIH07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgc2V0QmxvY2soe1xuICAgIG5hbWUsXG4gICAgYmxvY2ssXG4gIH06IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgYmxvY2s6IEJsb2NrO1xuICB9KTogU2NoZW1hQnVpbGRlciB7XG4gICAgdGhpcy5zY2hlbWEuYmxvY2suYmxvY2tfdHlwZXNbbmFtZV0gPSB7IG5lc3RpbmdfbW9kZTogXCJzZXRcIiwgYmxvY2sgfTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBwdWJsaWMgc2luZ2xlQmxvY2soe1xuICAgIG5hbWUsXG4gICAgYmxvY2ssXG4gIH06IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgYmxvY2s6IEJsb2NrO1xuICB9KTogU2NoZW1hQnVpbGRlciB7XG4gICAgdGhpcy5zY2hlbWEuYmxvY2suYmxvY2tfdHlwZXNbbmFtZV0gPSB7IG5lc3RpbmdfbW9kZTogXCJzaW5nbGVcIiwgYmxvY2sgfTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyBidWlsZCgpOiBTY2hlbWEge1xuICAgIHJldHVybiB0aGlzLnNjaGVtYTtcbiAgfVxuXG4gIHB1YmxpYyBhc0Jsb2NrKCk6IEJsb2NrIHtcbiAgICByZXR1cm4gdGhpcy5zY2hlbWEuYmxvY2s7XG4gIH1cblxuICBwdWJsaWMgYWRkQWxsUHJpbWl0aXZlVHlwZXMoe1xuICAgIHJlcXVpcmVkLFxuICAgIGNvbXB1dGVkLFxuICAgIHByZWZpeCA9IFwiXCIsXG4gIH06IHtcbiAgICByZXF1aXJlZDogYm9vbGVhbjtcbiAgICBjb21wdXRlZDogYm9vbGVhbjtcbiAgICBwcmVmaXg/OiBzdHJpbmc7XG4gIH0pOiBTY2hlbWFCdWlsZGVyIHtcbiAgICB0aGlzLmF0dHJpYnV0ZSh7IG5hbWU6IHByZWZpeCArIFwic3RyXCIsIHR5cGU6IFwic3RyaW5nXCIsIHJlcXVpcmVkLCBjb21wdXRlZCB9KVxuICAgICAgLmF0dHJpYnV0ZSh7IG5hbWU6IHByZWZpeCArIFwibnVtXCIsIHR5cGU6IFwibnVtYmVyXCIsIHJlcXVpcmVkLCBjb21wdXRlZCB9KVxuICAgICAgLmF0dHJpYnV0ZSh7IG5hbWU6IHByZWZpeCArIFwiYm9vbFwiLCB0eXBlOiBcImJvb2xcIiwgcmVxdWlyZWQsIGNvbXB1dGVkIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgYWRkQWxsUHJpbWl0aXZlUGVybXV0YXRpb25zKCk6IFNjaGVtYUJ1aWxkZXIge1xuICAgIHRoaXMuYWRkQWxsUHJpbWl0aXZlVHlwZXMoe1xuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgY29tcHV0ZWQ6IGZhbHNlLFxuICAgICAgcHJlZml4OiBcIm9wdFwiLFxuICAgIH0pXG4gICAgICAuYWRkQWxsUHJpbWl0aXZlVHlwZXMoeyByZXF1aXJlZDogdHJ1ZSwgY29tcHV0ZWQ6IGZhbHNlLCBwcmVmaXg6IFwicmVxXCIgfSlcbiAgICAgIC5hZGRBbGxQcmltaXRpdmVUeXBlcyh7XG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgY29tcHV0ZWQ6IHRydWUsXG4gICAgICAgIHByZWZpeDogXCJjb21wdXRlZFwiLFxuICAgICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdfQ==