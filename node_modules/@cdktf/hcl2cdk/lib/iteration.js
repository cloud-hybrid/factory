"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resourceStats = exports.forEachNamespaced = exports.forEachProvider = exports.forEachGlobal = void 0;
const telemetryAllowList_json_1 = require("./telemetryAllowList.json");
// locals, variables, and outputs are global key value maps
function forEachGlobal(scope, prefix, record, iterator) {
    return Object.entries(record || {}).reduce((carry, [key, item]) => {
        const id = `${prefix}.${key}`;
        return {
            ...carry,
            [id]: (graph) => iterator(scope, key, id, item, graph),
        };
    }, {});
}
exports.forEachGlobal = forEachGlobal;
function forEachProvider(scope, record, iterator) {
    return Object.entries(record || {}).reduce((carry, [key, items]) => {
        return {
            ...carry,
            ...items.reduce((innerCarry, item) => {
                const id = item.alias ? `${key}.${item.alias}` : `${key}`;
                return {
                    ...innerCarry,
                    [id]: (graph) => iterator(scope, key, id, item, graph),
                };
            }, {}),
        };
    }, {});
}
exports.forEachProvider = forEachProvider;
// data and resource are namespaced key value maps
function forEachNamespaced(scope, record, iterator, prefix) {
    return Object.entries(record || {}).reduce((outerCarry, [type, items]) => ({
        ...outerCarry,
        ...Object.entries(items).reduce((innerCarry, [key, item]) => {
            const prefixedType = prefix ? `${prefix}.${type}` : type;
            const id = prefix ? `${prefix}.${type}.${key}` : `${type}.${key}`;
            return {
                ...innerCarry,
                [id]: (graph) => iterator(scope, prefixedType, key, id, item, graph),
            };
        }, {}),
    }), {});
}
exports.forEachNamespaced = forEachNamespaced;
function resourceStats(obj) {
    return Object.entries(obj).reduce((carry, [key, value]) => {
        const [provider, ...resourceParts] = key.split("_");
        const shouldBeTracked = telemetryAllowList_json_1.providers.includes(provider);
        const providerKey = shouldBeTracked ? provider : "other";
        const resourceName = shouldBeTracked ? resourceParts.join("_") : "other";
        return {
            ...carry,
            [providerKey]: {
                ...(carry[providerKey] || {}),
                [resourceName]: Object.keys(value).length,
            },
        };
    }, {});
}
exports.resourceStats = resourceStats;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlcmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlcmF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHVFQUFtRjtBQUduRiwyREFBMkQ7QUFDM0QsU0FBZ0IsYUFBYSxDQUMzQixLQUFZLEVBQ1osTUFBYyxFQUNkLE1BQXFDLEVBQ3JDLFFBTU07SUFFTixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2hFLE1BQU0sRUFBRSxHQUFHLEdBQUcsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQzlCLE9BQU87WUFDTCxHQUFHLEtBQUs7WUFDUixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBb0IsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUM7U0FDdEUsQ0FBQztJQUNKLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNULENBQUM7QUFuQkQsc0NBbUJDO0FBRUQsU0FBZ0IsZUFBZSxDQUM3QixLQUFZLEVBQ1osTUFBdUMsRUFDdkMsUUFNTTtJQUVOLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDakUsT0FBTztZQUNMLEdBQUcsS0FBSztZQUNSLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxJQUE0QixFQUFFLEVBQUU7Z0JBQzNELE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztnQkFDMUQsT0FBTztvQkFDTCxHQUFHLFVBQVU7b0JBQ2IsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQW9CLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDO2lCQUN0RSxDQUFDO1lBQ0osQ0FBQyxFQUFFLEVBQUUsQ0FBQztTQUNQLENBQUM7SUFDSixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDVCxDQUFDO0FBdkJELDBDQXVCQztBQUVELGtEQUFrRDtBQUNsRCxTQUFnQixpQkFBaUIsQ0FDL0IsS0FBWSxFQUNaLE1BQXFELEVBQ3JELFFBT00sRUFDTixNQUFlO0lBRWYsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQ3hDLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsVUFBVTtRQUNiLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUMxRCxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDekQsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sSUFBSSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1lBQ2xFLE9BQU87Z0JBQ0wsR0FBRyxVQUFVO2dCQUNiLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFvQixFQUFFLEVBQUUsQ0FDN0IsUUFBUSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDO2FBQ3RELENBQUM7UUFDSixDQUFDLEVBQUUsRUFBaUQsQ0FBQztLQUN0RCxDQUFDLEVBQ0YsRUFBaUQsQ0FDbEQsQ0FBQztBQUNKLENBQUM7QUE1QkQsOENBNEJDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLEdBQTRDO0lBQ3hFLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUN4RCxNQUFNLENBQUMsUUFBUSxFQUFFLEdBQUcsYUFBYSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwRCxNQUFNLGVBQWUsR0FBRyxtQ0FBeUIsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckUsTUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUN6RCxNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUV6RSxPQUFPO1lBQ0wsR0FBRyxLQUFLO1lBQ1IsQ0FBQyxXQUFXLENBQUMsRUFBRTtnQkFDYixHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDN0IsQ0FBQyxZQUFZLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU07YUFDMUM7U0FDRixDQUFDO0lBQ0osQ0FBQyxFQUFFLEVBQTRDLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBZkQsc0NBZUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RlZEdyYXBoIH0gZnJvbSBcImdyYXBob2xvZ3lcIjtcbmltcG9ydCB7IHByb3ZpZGVycyBhcyB0ZWxlbWV0cnlBbGxvd2VkUHJvdmlkZXJzIH0gZnJvbSBcIi4vdGVsZW1ldHJ5QWxsb3dMaXN0Lmpzb25cIjtcbmltcG9ydCB7IFNjb3BlIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuLy8gbG9jYWxzLCB2YXJpYWJsZXMsIGFuZCBvdXRwdXRzIGFyZSBnbG9iYWwga2V5IHZhbHVlIG1hcHNcbmV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoR2xvYmFsPFQsIFI+KFxuICBzY29wZTogU2NvcGUsXG4gIHByZWZpeDogc3RyaW5nLFxuICByZWNvcmQ6IFJlY29yZDxzdHJpbmcsIFQ+IHwgdW5kZWZpbmVkLFxuICBpdGVyYXRvcjogKFxuICAgIHNjb3BlOiBTY29wZSxcbiAgICBrZXk6IHN0cmluZyxcbiAgICBpZDogc3RyaW5nLFxuICAgIHZhbHVlOiBULFxuICAgIGdyYXBoOiBEaXJlY3RlZEdyYXBoXG4gICkgPT4gUlxuKTogUmVjb3JkPHN0cmluZywgKGdyYXBoOiBEaXJlY3RlZEdyYXBoKSA9PiBSPiB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhyZWNvcmQgfHwge30pLnJlZHVjZSgoY2FycnksIFtrZXksIGl0ZW1dKSA9PiB7XG4gICAgY29uc3QgaWQgPSBgJHtwcmVmaXh9LiR7a2V5fWA7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmNhcnJ5LFxuICAgICAgW2lkXTogKGdyYXBoOiBEaXJlY3RlZEdyYXBoKSA9PiBpdGVyYXRvcihzY29wZSwga2V5LCBpZCwgaXRlbSwgZ3JhcGgpLFxuICAgIH07XG4gIH0sIHt9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvckVhY2hQcm92aWRlcjxULCBSPihcbiAgc2NvcGU6IFNjb3BlLFxuICByZWNvcmQ6IFJlY29yZDxzdHJpbmcsIFRbXT4gfCB1bmRlZmluZWQsXG4gIGl0ZXJhdG9yOiAoXG4gICAgc2NvcGU6IFNjb3BlLFxuICAgIGtleTogc3RyaW5nLFxuICAgIGlkOiBzdHJpbmcsXG4gICAgdmFsdWU6IFQsXG4gICAgZ3JhcGg6IERpcmVjdGVkR3JhcGhcbiAgKSA9PiBSXG4pOiBSZWNvcmQ8c3RyaW5nLCAoZ3JhcGg6IERpcmVjdGVkR3JhcGgpID0+IFI+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHJlY29yZCB8fCB7fSkucmVkdWNlKChjYXJyeSwgW2tleSwgaXRlbXNdKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmNhcnJ5LFxuICAgICAgLi4uaXRlbXMucmVkdWNlKChpbm5lckNhcnJ5LCBpdGVtOiBUICYgeyBhbGlhcz86IHN0cmluZyB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gaXRlbS5hbGlhcyA/IGAke2tleX0uJHtpdGVtLmFsaWFzfWAgOiBgJHtrZXl9YDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5pbm5lckNhcnJ5LFxuICAgICAgICAgIFtpZF06IChncmFwaDogRGlyZWN0ZWRHcmFwaCkgPT4gaXRlcmF0b3Ioc2NvcGUsIGtleSwgaWQsIGl0ZW0sIGdyYXBoKSxcbiAgICAgICAgfTtcbiAgICAgIH0sIHt9KSxcbiAgICB9O1xuICB9LCB7fSk7XG59XG5cbi8vIGRhdGEgYW5kIHJlc291cmNlIGFyZSBuYW1lc3BhY2VkIGtleSB2YWx1ZSBtYXBzXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaE5hbWVzcGFjZWQ8VCwgUj4oXG4gIHNjb3BlOiBTY29wZSxcbiAgcmVjb3JkOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBUPj4gfCB1bmRlZmluZWQsXG4gIGl0ZXJhdG9yOiAoXG4gICAgc2NvcGU6IFNjb3BlLFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyxcbiAgICBpZDogc3RyaW5nLFxuICAgIHZhbHVlOiBULFxuICAgIGdyYXBoOiBEaXJlY3RlZEdyYXBoXG4gICkgPT4gUixcbiAgcHJlZml4Pzogc3RyaW5nXG4pOiBSZWNvcmQ8c3RyaW5nLCAoZ3JhcGg6IERpcmVjdGVkR3JhcGgpID0+IFI+IHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHJlY29yZCB8fCB7fSkucmVkdWNlKFxuICAgIChvdXRlckNhcnJ5LCBbdHlwZSwgaXRlbXNdKSA9PiAoe1xuICAgICAgLi4ub3V0ZXJDYXJyeSxcbiAgICAgIC4uLk9iamVjdC5lbnRyaWVzKGl0ZW1zKS5yZWR1Y2UoKGlubmVyQ2FycnksIFtrZXksIGl0ZW1dKSA9PiB7XG4gICAgICAgIGNvbnN0IHByZWZpeGVkVHlwZSA9IHByZWZpeCA/IGAke3ByZWZpeH0uJHt0eXBlfWAgOiB0eXBlO1xuICAgICAgICBjb25zdCBpZCA9IHByZWZpeCA/IGAke3ByZWZpeH0uJHt0eXBlfS4ke2tleX1gIDogYCR7dHlwZX0uJHtrZXl9YDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5pbm5lckNhcnJ5LFxuICAgICAgICAgIFtpZF06IChncmFwaDogRGlyZWN0ZWRHcmFwaCkgPT5cbiAgICAgICAgICAgIGl0ZXJhdG9yKHNjb3BlLCBwcmVmaXhlZFR5cGUsIGtleSwgaWQsIGl0ZW0sIGdyYXBoKSxcbiAgICAgICAgfTtcbiAgICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIChncmFwaDogRGlyZWN0ZWRHcmFwaCkgPT4gUj4pLFxuICAgIH0pLFxuICAgIHt9IGFzIFJlY29yZDxzdHJpbmcsIChncmFwaDogRGlyZWN0ZWRHcmFwaCkgPT4gUj5cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc291cmNlU3RhdHMob2JqOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4pIHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKG9iaikucmVkdWNlKChjYXJyeSwgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgY29uc3QgW3Byb3ZpZGVyLCAuLi5yZXNvdXJjZVBhcnRzXSA9IGtleS5zcGxpdChcIl9cIik7XG4gICAgY29uc3Qgc2hvdWxkQmVUcmFja2VkID0gdGVsZW1ldHJ5QWxsb3dlZFByb3ZpZGVycy5pbmNsdWRlcyhwcm92aWRlcik7XG4gICAgY29uc3QgcHJvdmlkZXJLZXkgPSBzaG91bGRCZVRyYWNrZWQgPyBwcm92aWRlciA6IFwib3RoZXJcIjtcbiAgICBjb25zdCByZXNvdXJjZU5hbWUgPSBzaG91bGRCZVRyYWNrZWQgPyByZXNvdXJjZVBhcnRzLmpvaW4oXCJfXCIpIDogXCJvdGhlclwiO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmNhcnJ5LFxuICAgICAgW3Byb3ZpZGVyS2V5XToge1xuICAgICAgICAuLi4oY2FycnlbcHJvdmlkZXJLZXldIHx8IHt9KSxcbiAgICAgICAgW3Jlc291cmNlTmFtZV06IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGgsXG4gICAgICB9LFxuICAgIH07XG4gIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIFJlY29yZDxzdHJpbmcsIG51bWJlcj4+KTtcbn1cbiJdfQ==