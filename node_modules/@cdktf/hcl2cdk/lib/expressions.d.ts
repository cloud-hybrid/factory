import * as t from "@babel/types";
import { TerraformResourceBlock, Scope } from "./types";
export declare type Reference = {
    start: number;
    end: number;
    referencee: {
        id: string;
        full: string;
    };
    useFqn?: boolean;
    isVariable?: boolean;
};
export declare function extractReferencesFromExpression(input: string, nodeIds: readonly string[], scopedIds?: readonly string[]): Reference[];
export declare function referenceToVariableName(scope: Scope, ref: Reference): string;
export declare function variableName(scope: Scope, resource: string, name: string): string;
export declare function constructAst(type: string, isModuleImport: boolean): t.Identifier | t.MemberExpression;
export declare function referenceToAst(scope: Scope, ref: Reference): t.Expression;
export declare function referencesToAst(scope: Scope, input: string, refs: Reference[], scopedIds?: readonly string[]): t.Expression;
export declare type DynamicBlock = {
    path: string;
    for_each: string;
    content: TerraformResourceBlock;
    scopedVar: string;
};
export declare const extractDynamicBlocks: (config: TerraformResourceBlock, path?: string) => DynamicBlock[];
export declare function findUsedReferences(nodeIds: string[], item: TerraformResourceBlock): Reference[];
