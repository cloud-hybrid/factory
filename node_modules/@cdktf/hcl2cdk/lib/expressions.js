"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findUsedReferences = exports.extractDynamicBlocks = exports.referencesToAst = exports.referenceToAst = exports.constructAst = exports.variableName = exports.referenceToVariableName = exports.extractReferencesFromExpression = void 0;
const t = __importStar(require("@babel/types"));
const reserved_words_1 = __importDefault(require("reserved-words"));
const utils_1 = require("./utils");
const provider_generator_1 = require("@cdktf/provider-generator");
const PROPERTY_ACCESS_REGEX = /\[.*\]/;
const DOLLAR_REGEX = /\$/g;
function extractReferencesFromExpression(input, nodeIds, scopedIds = [] // dynamics introduce new scoped variables that are not the globally accessible ids
) {
    const isDoubleParanthesis = input.startsWith("${{");
    if (!input.startsWith("${")) {
        return [];
    }
    const start = isDoubleParanthesis ? 3 : 2;
    const end = isDoubleParanthesis ? input.length - 2 : input.length - 1;
    let expressionString = input.substring(start, end);
    if (expressionString.includes("for") &&
        expressionString.includes("in") &&
        expressionString.includes(":")) {
        // for name, user in var.users : user.role => name...
        // We just want the var.users part (that could be an expression)
        expressionString = expressionString.substring(expressionString.indexOf("in") + 2, expressionString.indexOf(":"));
    }
    const lines = expressionString
        .split("\n")
        .map((line) => {
        const commentStart = line.indexOf("#");
        const lineWithoutComment = commentStart !== -1 ? line.substring(0, commentStart - 1) : line;
        return lineWithoutComment.trim();
    })
        .filter((line) => line !== "");
    const delimiters = [
        "(",
        ",",
        ")",
        ".*",
        PROPERTY_ACCESS_REGEX,
        " ",
        "!",
        "*",
        "/",
        "%",
        ">",
        "<",
        "=",
        "&&",
        "||",
        "?",
        // There can be nested terraform expression strings
        "${",
        "}",
    ];
    let possibleVariableSpots = lines;
    delimiters.forEach((delimiter) => {
        possibleVariableSpots = possibleVariableSpots.reduce((carry, str) => [...carry, ...str.split(delimiter)], []);
    });
    return possibleVariableSpots.reduce((carry, spot) => {
        // no reference
        if (!spot.includes(".") || // just a literal
            spot.startsWith(".") || // dangling property access
            spot.endsWith("...") || // spread (likely in for loop)
            spot.startsWith("count.") || // count variable
            spot.startsWith("each.") || // each variable
            // https://www.terraform.io/docs/language/expressions/references.html#filesystem-and-workspace-info
            spot.startsWith("path.module") ||
            spot.startsWith("path.root") ||
            spot.startsWith("path.cwd") ||
            spot.startsWith("terraform.workspace")) {
            return carry;
        }
        const referenceParts = spot.split(".");
        const corespondingNodeId = [...nodeIds, ...scopedIds].find((id) => {
            const parts = id.split(".");
            const matchesFirst = parts[0] === referenceParts[0];
            const matchesFirstTwo = matchesFirst && (parts[1] === referenceParts[1] || parts.length === 1);
            return (matchesFirstTwo &&
                (parts[0] === "data" ? parts[2] === referenceParts[2] : true));
        });
        if (!corespondingNodeId) {
            // This is most likely a false positive, so we just ignore it
            // We include the log below to help debugging
            console.error(`Found a reference that is unknown: ${input} has reference "${spot}". The id was not found in ${JSON.stringify(nodeIds)} with temporary values ${JSON.stringify(scopedIds)}.
        Please leave a comment at https://cdk.tf/bugs/convert-expressions if you run into this issue.`);
            return carry;
        }
        if (scopedIds.includes(corespondingNodeId)) {
            return carry;
        }
        const spotParts = spot.split(".");
        let isThereANumericAccessor = false;
        const referenceSpotParts = spotParts.filter((part) => {
            if (!Number.isNaN(parseInt(part, 10))) {
                isThereANumericAccessor = true;
                return false;
            }
            return !isThereANumericAccessor;
        });
        const fullReference = isThereANumericAccessor
            ? referenceSpotParts.slice(0, 2).join(".")
            : spot;
        // we know we are at closer to the end than the last reference we found
        // this helps us find duplicate referencees
        const position = carry.length ? carry[carry.length - 1].end : 0;
        const start = input.indexOf(fullReference, position);
        const end = start + fullReference.length;
        const isVariable = spot.startsWith("var.");
        const useFqn = 
        // Can not use FQN on vars
        !isVariable &&
            // Can not use FQN on locals
            !spot.startsWith("local.") &&
            // If the following character is
            (input.substr(end + 1, 1) === "*" || // a * (splat) we need to use the FQN
                input.substr(end, 1) === "[" || // a property access
                isThereANumericAccessor || // a numeric access
                fullReference.split(".").length < 3);
        const ref = {
            start,
            end,
            referencee: {
                id: corespondingNodeId,
                full: fullReference,
            },
            useFqn,
            isVariable,
        };
        return [...carry, ref];
    }, []);
}
exports.extractReferencesFromExpression = extractReferencesFromExpression;
function referenceToVariableName(scope, ref) {
    const parts = ref.referencee.full.split(".");
    const resource = parts[0] === "data" ? `${parts[0]}.${parts[1]}` : parts[0];
    const name = parts[0] === "data" ? parts[2] : parts[1];
    return variableName(scope, resource, name);
}
exports.referenceToVariableName = referenceToVariableName;
function validVarName(name) {
    if (reserved_words_1.default.check(name)) {
        return `${name}Var`;
    }
    if (!Number.isNaN(parseInt(name[0], 10))) {
        return `d${name}`;
    }
    return name;
}
function variableName(scope, resource, name) {
    // name collision, we need to prefix the name
    if (scope.variables[name]) {
        if (resource === scope.variables[name].resource) {
            return scope.variables[name].variableName;
        }
        // we only cache one per name
        return validVarName(utils_1.camelCase([resource, name].join("_")));
    }
    const variableName = validVarName(utils_1.camelCase(["var", "local", "module"].includes(resource)
        ? name
        : [resource, name].join("_")));
    scope.variables[name] = { variableName, resource };
    return variableName;
}
exports.variableName = variableName;
function constructAst(type, isModuleImport) {
    if (isModuleImport) {
        return t.memberExpression(t.identifier(type), t.identifier(type));
    }
    // resources or data sources
    if (!type.includes("./") && type.includes(".")) {
        const parts = type.split(".");
        if (parts[0] === "data") {
            const [, provider, resource] = parts;
            const namespace = provider_generator_1.getResourceNamespace(provider, resource);
            if (namespace) {
                return t.memberExpression(t.memberExpression(t.identifier(provider), // e.g. aws
                t.identifier(namespace.name) // e.g. EC2
                ), t.identifier(utils_1.pascalCase(`data_${provider}_${resource}`)) // e.g. DataAwsInstance
                );
            }
            return t.memberExpression(t.identifier(provider), // e.g. aws
            t.identifier(utils_1.pascalCase(`data_${provider}_${resource}`)) // e.g. DataAwsNatGateway
            );
        }
        const [provider, resource] = parts;
        const namespace = provider_generator_1.getResourceNamespace(provider, resource);
        if (namespace) {
            return t.memberExpression(t.memberExpression(t.identifier(provider), // e.g. aws
            t.identifier(namespace.name) // e.g. EC2
            ), t.identifier(utils_1.pascalCase(resource)) // e.g. Instance
            );
        }
        return t.memberExpression(t.identifier(provider), // e.g. google
        t.identifier(utils_1.pascalCase(resource)) // e.g. BigQueryTable
        );
    }
    return t.identifier(utils_1.pascalCase(type));
}
exports.constructAst = constructAst;
function referenceToAst(scope, ref) {
    const [resource, , ...selector] = ref.referencee.full.split(".");
    const variableReference = t.identifier(utils_1.camelCase(referenceToVariableName(scope, ref)));
    if (resource === "data") {
        selector.shift(); // remove the data part so that the name is not used in the selector
    }
    const accessor = selector.reduce((carry, member, index) => t.memberExpression(carry, t.identifier(index === 0 && resource === "module"
        ? utils_1.camelCase(member + "Output")
        : utils_1.camelCase(member))), variableReference);
    if (ref.useFqn) {
        return t.memberExpression(accessor, t.identifier("fqn"));
    }
    if (ref.isVariable) {
        return t.memberExpression(accessor, t.identifier("value"));
    }
    return accessor;
}
exports.referenceToAst = referenceToAst;
function referencesToAst(scope, input, refs, scopedIds = [] // dynamics introduce new scoped variables that are not the globally accessible ids
) {
    if (refs.length === 0) {
        return t.stringLiteral(input);
    }
    const refAsts = refs
        .sort((a, b) => a.start - b.start)
        .filter((ref) => !scopedIds.includes(ref.referencee.id))
        .map((ref) => ({ ref, ast: referenceToAst(scope, ref) }));
    if (refAsts.length === 1 &&
        refAsts[0].ref.start === "${".length &&
        refAsts[0].ref.end === input.length - "}".length &&
        !refAsts[0].ref.useFqn) {
        return refAsts[0].ast;
    }
    // string parts in the template string
    const quasis = [];
    // dynamic values in the template string
    const expressions = [];
    let lastEnd = 0;
    refAsts.forEach(({ ref, ast }) => {
        // leading quasi
        if (ref.start !== lastEnd) {
            quasis.push(t.templateElement({
                raw: input.substring(lastEnd, ref.start).replace(DOLLAR_REGEX, "\\$"),
            }));
        }
        expressions.push(ast);
        lastEnd = ref.end;
    });
    // trailing quasi
    quasis.push(t.templateElement({
        raw: input
            .substring(lastEnd, input.length)
            .replace(DOLLAR_REGEX, "\\$"),
    }, true));
    return t.templateLiteral(quasis, expressions);
}
exports.referencesToAst = referencesToAst;
exports.extractDynamicBlocks = (config, path = "") => {
    if (typeof config !== "object") {
        return [];
    }
    if (!config) {
        return [];
    }
    if (Array.isArray(config)) {
        return config.reduce((carry, item, index) => [
            ...carry,
            ...exports.extractDynamicBlocks(item, `${path}.${index}`),
        ], []);
    }
    if ("dynamic" in config) {
        const dynamic = config.dynamic;
        const scopedVar = Object.keys(dynamic)[0];
        const { for_each, content } = dynamic[scopedVar][0];
        return [
            {
                path: `${path}.${scopedVar}`,
                for_each,
                content,
                scopedVar,
            },
        ];
    }
    return Object.entries(config).reduce((carry, [key, value]) => {
        return [...carry, ...exports.extractDynamicBlocks(value, `${path}.${key}`)];
    }, []);
};
function findUsedReferences(nodeIds, item) {
    if (typeof item === "string") {
        return extractReferencesFromExpression(item, nodeIds, []);
    }
    if (typeof item !== "object" || item === null || item === undefined) {
        return [];
    }
    if (Array.isArray(item)) {
        return item.reduce((carry, i) => [...carry, ...findUsedReferences(nodeIds, i)], []);
    }
    if (item && "dynamic" in item) {
        const dyn = item["dynamic"];
        const { for_each, ...others } = dyn;
        const dynamicRef = Object.keys(others)[0];
        return findUsedReferences([...nodeIds, dynamicRef], dyn);
    }
    return Object.values(item).reduce((carry, i) => [...carry, ...findUsedReferences(nodeIds, i)], []);
}
exports.findUsedReferences = findUsedReferences;
//# sourceMappingURL=data:application/json;base64,