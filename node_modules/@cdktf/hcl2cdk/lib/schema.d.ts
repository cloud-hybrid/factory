import * as z from "zod";
declare const outputConfig: z.ZodArray<z.ZodObject<{
    value: z.ZodUnion<[z.ZodAny, z.ZodUndefined]>;
    description: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodUndefined]>;
    sensitive: z.ZodUnion<[z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>, z.ZodUndefined]>;
    depends_on: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodUndefined]>;
}, {
    strict: true;
}, {
    value?: any;
    description?: string | undefined;
    sensitive?: boolean | undefined;
    depends_on?: string | undefined;
}>>;
export declare type Output = z.infer<typeof outputConfig>;
declare const variableConfig: z.ZodArray<z.ZodObject<{
    type: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
    default: z.ZodUnion<[z.ZodAny, z.ZodUndefined]>;
    description: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
    sensitive: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
}, {
    strict: true;
}, {
    type?: string | undefined;
    default?: any;
    description?: string | undefined;
    sensitive?: boolean | undefined;
}>>;
export declare type Variable = z.infer<typeof variableConfig>;
declare const providerConfig: z.ZodArray<z.ZodRecord<z.ZodAny>>;
export declare type Provider = z.infer<typeof providerConfig>;
declare const moduleConfig: z.ZodArray<z.ZodObject<{
    source: z.ZodString;
}, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
    strict: false;
}>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
    source: string;
} & {
    [k: string]: any;
}>>>;
export declare type Module = z.infer<typeof moduleConfig>;
declare const resourceConfig: z.ZodArray<z.ZodRecord<z.ZodAny>>;
export declare type Resource = z.infer<typeof resourceConfig>;
export declare type Data = Resource;
declare const terraformConfig: z.ZodObject<{
    required_version: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
    required_providers: z.ZodUnion<[z.ZodArray<z.ZodRecord<z.ZodUnion<[z.ZodObject<{
        source: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
        version: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
    }, {
        strict: true;
    }, {
        source?: string | undefined;
        version?: string | undefined;
    }>, z.ZodString]>>>, z.ZodUndefined]>;
    backend: z.ZodUnion<[z.ZodRecord<z.ZodArray<z.ZodRecord<z.ZodAny>>>, z.ZodUndefined]>;
}, {
    strict: true;
}, {
    required_version?: string | undefined;
    required_providers?: Record<string, string | {
        source?: string | undefined;
        version?: string | undefined;
    }>[] | undefined;
    backend?: Record<string, Record<string, any>[]> | undefined;
}>;
export declare type TerraformConfig = z.infer<typeof terraformConfig>;
export declare const schema: z.ZodObject<{
    terraform: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        required_version: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
        required_providers: z.ZodUnion<[z.ZodArray<z.ZodRecord<z.ZodUnion<[z.ZodObject<{
            source: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
            version: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
        }, {
            strict: true;
        }, {
            source?: string | undefined;
            version?: string | undefined;
        }>, z.ZodString]>>>, z.ZodUndefined]>;
        backend: z.ZodUnion<[z.ZodRecord<z.ZodArray<z.ZodRecord<z.ZodAny>>>, z.ZodUndefined]>;
    }, {
        strict: true;
    }, {
        required_version?: string | undefined;
        required_providers?: Record<string, string | {
            source?: string | undefined;
            version?: string | undefined;
        }>[] | undefined;
        backend?: Record<string, Record<string, any>[]> | undefined;
    }>>, z.ZodUndefined]>;
    locals: z.ZodUnion<[z.ZodArray<z.ZodRecord<z.ZodAny>>, z.ZodUndefined]>;
    variable: z.ZodUnion<[z.ZodRecord<z.ZodArray<z.ZodObject<{
        type: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
        default: z.ZodUnion<[z.ZodAny, z.ZodUndefined]>;
        description: z.ZodUnion<[z.ZodString, z.ZodUndefined]>;
        sensitive: z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>;
    }, {
        strict: true;
    }, {
        type?: string | undefined;
        default?: any;
        description?: string | undefined;
        sensitive?: boolean | undefined;
    }>>>, z.ZodUndefined]>;
    output: z.ZodUnion<[z.ZodRecord<z.ZodArray<z.ZodObject<{
        value: z.ZodUnion<[z.ZodAny, z.ZodUndefined]>;
        description: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodUndefined]>;
        sensitive: z.ZodUnion<[z.ZodUnion<[z.ZodBoolean, z.ZodUndefined]>, z.ZodUndefined]>;
        depends_on: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodUndefined]>, z.ZodUndefined]>;
    }, {
        strict: true;
    }, {
        value?: any;
        description?: string | undefined;
        sensitive?: boolean | undefined;
        depends_on?: string | undefined;
    }>>>, z.ZodUndefined]>;
    provider: z.ZodUnion<[z.ZodRecord<z.ZodArray<z.ZodRecord<z.ZodAny>>>, z.ZodUndefined]>;
    module: z.ZodUnion<[z.ZodRecord<z.ZodArray<z.ZodObject<{
        source: z.ZodString;
    }, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{} & {
        strict: false;
    }>, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
        source: string;
    } & {
        [k: string]: any;
    }>>>>, z.ZodUndefined]>;
    resource: z.ZodUnion<[z.ZodRecord<z.ZodRecord<z.ZodArray<z.ZodRecord<z.ZodAny>>>>, z.ZodUndefined]>;
    data: z.ZodUnion<[z.ZodRecord<z.ZodRecord<z.ZodArray<z.ZodRecord<z.ZodAny>>>>, z.ZodUndefined]>;
}, {
    strict: true;
}, {
    module?: Record<string, import("zod/lib/src/helpers/objectUtil").objectUtil.Flatten<{
        source: string;
    } & {
        [k: string]: any;
    }>[]> | undefined;
    data?: Record<string, Record<string, Record<string, any>[]>> | undefined;
    terraform?: {
        required_version?: string | undefined;
        required_providers?: Record<string, string | {
            source?: string | undefined;
            version?: string | undefined;
        }>[] | undefined;
        backend?: Record<string, Record<string, any>[]> | undefined;
    }[] | undefined;
    provider?: Record<string, Record<string, any>[]> | undefined;
    resource?: Record<string, Record<string, Record<string, any>[]>> | undefined;
    locals?: Record<string, any>[] | undefined;
    variable?: Record<string, {
        type?: string | undefined;
        default?: any;
        description?: string | undefined;
        sensitive?: boolean | undefined;
    }[]> | undefined;
    output?: Record<string, {
        value?: any;
        description?: string | undefined;
        sensitive?: boolean | undefined;
        depends_on?: string | undefined;
    }[]> | undefined;
}>;
export {};
