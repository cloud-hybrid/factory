interface Event {
    id: number;
    this: Go;
    args: unknown[];
    result?: unknown;
}
export declare class Go {
    _inst: WebAssembly.Instance;
    _values: unknown[];
    mem: DataView;
    exited: boolean;
    _ids: Map<any, any>;
    _idPool: unknown[];
    argv: string[];
    env: Record<string, string>;
    _resolveExitPromise: () => void;
    _exitPromise: Promise<unknown>;
    _pendingEvent: Event | null;
    _scheduledTimeouts: Map<any, any>;
    _nextCallbackTimeoutID: number;
    _goRefCounts: number[];
    exit: (code: number) => void;
    importObject: {
        go: {
            "runtime.wasmExit": (sp: number) => void;
            "runtime.wasmWrite": (sp: number) => void;
            "runtime.resetMemoryDataView": (_sp: number) => void;
            "runtime.nanotime1": (sp: number) => void;
            "runtime.walltime1": (sp: number) => void;
            "runtime.scheduleTimeoutEvent": (sp: number) => void;
            "runtime.clearTimeoutEvent": (sp: number) => void;
            "runtime.getRandomData": (sp: number) => void;
            "syscall/js.finalizeRef": (sp: number) => void;
            "syscall/js.stringVal": (sp: number) => void;
            "syscall/js.valueGet": (sp: number) => void;
            "syscall/js.valueSet": (sp: number) => void;
            "syscall/js.valueDelete": (sp: number) => void;
            "syscall/js.valueIndex": (sp: number) => void;
            "syscall/js.valueSetIndex": (sp: number) => void;
            "syscall/js.valueCall": (sp: number) => void;
            "syscall/js.valueInvoke": (sp: number) => void;
            "syscall/js.valueNew": (sp: number) => void;
            "syscall/js.valueLength": (sp: number) => void;
            "syscall/js.valuePrepareString": (sp: number) => void;
            "syscall/js.valueLoadString": (sp: number) => void;
            "syscall/js.valueInstanceOf": (sp: number) => void;
            "syscall/js.copyBytesToGo": (sp: number) => void;
            "syscall/js.copyBytesToJS": (sp: number) => void;
            debug: (value?: any) => void;
        };
    };
    run(instance: WebAssembly.Instance, thing?: object): Promise<void>;
    _resume: () => void;
    _makeFuncWrapper(id: number): (...args: unknown[]) => unknown;
    _setInt64: (addr: number, v: number) => void;
    _getInt64: (addr: number) => number;
    _loadValue: (addr: number) => unknown;
    _storeValue: (addr: number, v: unknown) => void;
    _loadSlice: (addr: number) => Uint8Array;
    _loadSliceOfValues: (addr: number) => any[];
    _loadString: (addr: number) => string;
}
export {};
