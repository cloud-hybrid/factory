"use strict";
// eslint-disable-next-line @typescript-eslint/triple-slash-reference
/// <reference lib="dom" />
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertFiles = exports.parse = void 0;
// Inspired by
// https://github.com/ts-terraform/ts-terraform
// https://github.com/aaronpowell/webpack-golang-wasm-async-loader
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const wasm_exec_1 = require("./wasm_exec");
const deepmerge_1 = require("./deepmerge");
const zlib_1 = require("zlib");
// eslint-disable-next-line @typescript-eslint/ban-types
const jsRoot = {};
function sleep() {
    return new Promise((resolve) => {
        setTimeout(resolve, 0);
    });
}
function goBridge(getBytes) {
    let ready = false;
    async function init() {
        const go = new wasm_exec_1.Go();
        const bytes = await getBytes;
        const result = await WebAssembly.instantiate(bytes, go.importObject);
        void go.run(result.instance, { __parse_terraform_config_wasm__: jsRoot });
        ready = true;
    }
    init().catch((error) => {
        throw error;
    });
    const proxy = new Proxy({}, {
        get: (_, key) => {
            return async (...args) => {
                while (!ready) {
                    await sleep();
                }
                if (!(key in jsRoot)) {
                    throw new Error(`There is nothing defined with the name "${key.toString()}"`);
                }
                if (typeof jsRoot[key] !== "function") {
                    return jsRoot[key];
                }
                return new Promise((resolve, reject) => {
                    const cb = (err, ...msg) => 
                    // @ts-ignore
                    err ? reject(new Error(err)) : resolve(...msg);
                    const run = () => {
                        jsRoot[key].apply(undefined, [...args, cb]);
                    };
                    run();
                });
            };
        },
    });
    return proxy;
}
const loadWasm = async () => {
    return zlib_1.gunzipSync(await fs_extra_1.default.readFile(path_1.default.join(__dirname, "..", "main.wasm.gz")));
};
const wasm = goBridge(loadWasm());
async function parse(filename, contents) {
    const res = await wasm.parse(filename, contents);
    return JSON.parse(res);
}
exports.parse = parse;
async function convertFiles(workingDirectory) {
    let tfFileContents = "";
    const tfJSONFileContents = [];
    for (const file of fs_extra_1.default.readdirSync(workingDirectory)) {
        const filePath = path_1.default.resolve(workingDirectory, file);
        if (!fs_extra_1.default.lstatSync(filePath).isDirectory()) {
            if (file.match(/\.tf$/)) {
                tfFileContents += fs_extra_1.default.readFileSync(filePath, "utf-8");
                tfFileContents += "\n";
            }
            else if (file.match(/\.tf\.json$/)) {
                tfJSONFileContents.push(JSON.parse(fs_extra_1.default.readFileSync(filePath, "utf-8")));
            }
        }
    }
    if (tfFileContents === "" && tfJSONFileContents === []) {
        console.error(`No '.tf' or '.tf.json' files found in ${workingDirectory}`);
        return;
    }
    return deepmerge_1.deepMerge(await parse("hcl2json.tf", tfFileContents), ...tfJSONFileContents);
}
exports.convertFiles = convertFiles;
//# sourceMappingURL=data:application/json;base64,