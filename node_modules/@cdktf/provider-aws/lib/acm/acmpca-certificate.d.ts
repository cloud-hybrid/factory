import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * Amazon Certificate Manager.
 *
 * @stability stable
 */
export interface AcmpcaCertificateConfig extends cdktf.TerraformMetaArguments {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acmpca_certificate.html#certificate_authority_arn AcmpcaCertificate#certificate_authority_arn}.
     *
     * @stability stable
     */
    readonly certificateAuthorityArn: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acmpca_certificate.html#certificate_signing_request AcmpcaCertificate#certificate_signing_request}.
     *
     * @stability stable
     */
    readonly certificateSigningRequest: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acmpca_certificate.html#signing_algorithm AcmpcaCertificate#signing_algorithm}.
     *
     * @stability stable
     */
    readonly signingAlgorithm: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acmpca_certificate.html#template_arn AcmpcaCertificate#template_arn}.
     *
     * @stability stable
     */
    readonly templateArn?: string;
    /**
     * validity block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acmpca_certificate.html#validity AcmpcaCertificate#validity}
     *
     * @stability stable
     */
    readonly validity: AcmpcaCertificateValidity;
}
/**
 * @stability stable
 */
export interface AcmpcaCertificateValidity {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acmpca_certificate.html#type AcmpcaCertificate#type}.
     *
     * @stability stable
     */
    readonly type: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acmpca_certificate.html#value AcmpcaCertificate#value}.
     *
     * @stability stable
     */
    readonly value: string;
}
export declare function acmpcaCertificateValidityToTerraform(struct?: AcmpcaCertificateValidityOutputReference | AcmpcaCertificateValidity): any;
/**
 * @stability stable
 */
export declare class AcmpcaCertificateValidityOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
     * @param terraformResource The parent resource.
     * @param terraformAttribute The attribute on the parent resource this class is referencing.
     * @param isSingleItem True if this is a block, false if it's a list.
     * @stability stable
     */
    constructor(terraformResource: cdktf.ITerraformResource, terraformAttribute: string, isSingleItem: boolean);
    /**
     * @stability stable
     */
    get internalValue(): AcmpcaCertificateValidity | undefined;
    /**
     * @stability stable
     */
    set internalValue(value: AcmpcaCertificateValidity | undefined);
    private _type?;
    /**
     * @stability stable
     */
    get type(): string;
    /**
     * @stability stable
     */
    set type(value: string);
    /**
     * @stability stable
     */
    get typeInput(): string | undefined;
    private _value?;
    /**
     * @stability stable
     */
    get value(): string;
    /**
     * @stability stable
     */
    set value(value: string);
    /**
     * @stability stable
     */
    get valueInput(): string | undefined;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/acmpca_certificate.html aws_acmpca_certificate}.
 *
 * @stability stable
 */
export declare class AcmpcaCertificate extends cdktf.TerraformResource {
    /**
     * @stability stable
     */
    static readonly tfResourceType: string;
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/acmpca_certificate.html aws_acmpca_certificate} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config: AcmpcaCertificateConfig);
    /**
     * @stability stable
     */
    get arn(): string;
    /**
     * @stability stable
     */
    get certificate(): string;
    private _certificateAuthorityArn?;
    /**
     * @stability stable
     */
    get certificateAuthorityArn(): string;
    /**
     * @stability stable
     */
    set certificateAuthorityArn(value: string);
    /**
     * @stability stable
     */
    get certificateAuthorityArnInput(): string | undefined;
    /**
     * @stability stable
     */
    get certificateChain(): string;
    private _certificateSigningRequest?;
    /**
     * @stability stable
     */
    get certificateSigningRequest(): string;
    /**
     * @stability stable
     */
    set certificateSigningRequest(value: string);
    /**
     * @stability stable
     */
    get certificateSigningRequestInput(): string | undefined;
    /**
     * @stability stable
     */
    get id(): string;
    private _signingAlgorithm?;
    /**
     * @stability stable
     */
    get signingAlgorithm(): string;
    /**
     * @stability stable
     */
    set signingAlgorithm(value: string);
    /**
     * @stability stable
     */
    get signingAlgorithmInput(): string | undefined;
    private _templateArn?;
    /**
     * @stability stable
     */
    get templateArn(): string;
    /**
     * @stability stable
     */
    set templateArn(value: string);
    /**
     * @stability stable
     */
    resetTemplateArn(): void;
    /**
     * @stability stable
     */
    get templateArnInput(): string | undefined;
    private _validity;
    /**
     * @stability stable
     */
    get validity(): AcmpcaCertificateValidityOutputReference;
    /**
     * @stability stable
     */
    putValidity(value: AcmpcaCertificateValidity): void;
    /**
     * @stability stable
     */
    get validityInput(): AcmpcaCertificateValidity | undefined;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
