import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * Amazon Certificate Manager.
 *
 * @stability stable
 */
export interface AcmCertificateConfig extends cdktf.TerraformMetaArguments {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acm_certificate.html#certificate_authority_arn AcmCertificate#certificate_authority_arn}.
     *
     * @stability stable
     */
    readonly certificateAuthorityArn?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acm_certificate.html#certificate_body AcmCertificate#certificate_body}.
     *
     * @stability stable
     */
    readonly certificateBody?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acm_certificate.html#certificate_chain AcmCertificate#certificate_chain}.
     *
     * @stability stable
     */
    readonly certificateChain?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acm_certificate.html#domain_name AcmCertificate#domain_name}.
     *
     * @stability stable
     */
    readonly domainName?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acm_certificate.html#private_key AcmCertificate#private_key}.
     *
     * @stability stable
     */
    readonly privateKey?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acm_certificate.html#subject_alternative_names AcmCertificate#subject_alternative_names}.
     *
     * @stability stable
     */
    readonly subjectAlternativeNames?: string[];
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acm_certificate.html#tags AcmCertificate#tags}.
     *
     * @stability stable
     */
    readonly tags?: {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acm_certificate.html#tags_all AcmCertificate#tags_all}.
     *
     * @stability stable
     */
    readonly tagsAll?: {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acm_certificate.html#validation_method AcmCertificate#validation_method}.
     *
     * @stability stable
     */
    readonly validationMethod?: string;
    /**
     * options block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acm_certificate.html#options AcmCertificate#options}
     *
     * @stability stable
     */
    readonly options?: AcmCertificateOptions;
}
/**
 * @stability stable
 */
export declare class AcmCertificateDomainValidationOptions extends cdktf.ComplexComputedList {
    /**
     * @stability stable
     */
    get domainName(): string;
    /**
     * @stability stable
     */
    get resourceRecordName(): string;
    /**
     * @stability stable
     */
    get resourceRecordType(): string;
    /**
     * @stability stable
     */
    get resourceRecordValue(): string;
}
/**
 * @stability stable
 */
export interface AcmCertificateOptions {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/acm_certificate.html#certificate_transparency_logging_preference AcmCertificate#certificate_transparency_logging_preference}.
     *
     * @stability stable
     */
    readonly certificateTransparencyLoggingPreference?: string;
}
export declare function acmCertificateOptionsToTerraform(struct?: AcmCertificateOptionsOutputReference | AcmCertificateOptions): any;
/**
 * @stability stable
 */
export declare class AcmCertificateOptionsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
     * @param terraformResource The parent resource.
     * @param terraformAttribute The attribute on the parent resource this class is referencing.
     * @param isSingleItem True if this is a block, false if it's a list.
     * @stability stable
     */
    constructor(terraformResource: cdktf.ITerraformResource, terraformAttribute: string, isSingleItem: boolean);
    /**
     * @stability stable
     */
    get internalValue(): AcmCertificateOptions | undefined;
    /**
     * @stability stable
     */
    set internalValue(value: AcmCertificateOptions | undefined);
    private _certificateTransparencyLoggingPreference?;
    /**
     * @stability stable
     */
    get certificateTransparencyLoggingPreference(): string;
    /**
     * @stability stable
     */
    set certificateTransparencyLoggingPreference(value: string);
    /**
     * @stability stable
     */
    resetCertificateTransparencyLoggingPreference(): void;
    /**
     * @stability stable
     */
    get certificateTransparencyLoggingPreferenceInput(): string | undefined;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/acm_certificate.html aws_acm_certificate}.
 *
 * @stability stable
 */
export declare class AcmCertificate extends cdktf.TerraformResource {
    /**
     * @stability stable
     */
    static readonly tfResourceType: string;
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/acm_certificate.html aws_acm_certificate} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config?: AcmCertificateConfig);
    /**
     * @stability stable
     */
    get arn(): string;
    private _certificateAuthorityArn?;
    /**
     * @stability stable
     */
    get certificateAuthorityArn(): string;
    /**
     * @stability stable
     */
    set certificateAuthorityArn(value: string);
    /**
     * @stability stable
     */
    resetCertificateAuthorityArn(): void;
    /**
     * @stability stable
     */
    get certificateAuthorityArnInput(): string | undefined;
    private _certificateBody?;
    /**
     * @stability stable
     */
    get certificateBody(): string;
    /**
     * @stability stable
     */
    set certificateBody(value: string);
    /**
     * @stability stable
     */
    resetCertificateBody(): void;
    /**
     * @stability stable
     */
    get certificateBodyInput(): string | undefined;
    private _certificateChain?;
    /**
     * @stability stable
     */
    get certificateChain(): string;
    /**
     * @stability stable
     */
    set certificateChain(value: string);
    /**
     * @stability stable
     */
    resetCertificateChain(): void;
    /**
     * @stability stable
     */
    get certificateChainInput(): string | undefined;
    private _domainName?;
    /**
     * @stability stable
     */
    get domainName(): string;
    /**
     * @stability stable
     */
    set domainName(value: string);
    /**
     * @stability stable
     */
    resetDomainName(): void;
    /**
     * @stability stable
     */
    get domainNameInput(): string | undefined;
    /**
     * @stability stable
     */
    domainValidationOptions(index: string): AcmCertificateDomainValidationOptions;
    /**
     * @stability stable
     */
    get id(): string;
    private _privateKey?;
    /**
     * @stability stable
     */
    get privateKey(): string;
    /**
     * @stability stable
     */
    set privateKey(value: string);
    /**
     * @stability stable
     */
    resetPrivateKey(): void;
    /**
     * @stability stable
     */
    get privateKeyInput(): string | undefined;
    /**
     * @stability stable
     */
    get status(): string;
    private _subjectAlternativeNames?;
    /**
     * @stability stable
     */
    get subjectAlternativeNames(): string[];
    /**
     * @stability stable
     */
    set subjectAlternativeNames(value: string[]);
    /**
     * @stability stable
     */
    resetSubjectAlternativeNames(): void;
    /**
     * @stability stable
     */
    get subjectAlternativeNamesInput(): string[] | undefined;
    private _tags?;
    /**
     * @stability stable
     */
    get tags(): {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set tags(value: {
        [key: string]: string;
    } | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetTags(): void;
    /**
     * @stability stable
     */
    get tagsInput(): cdktf.IResolvable | {
        [key: string]: string;
    } | undefined;
    private _tagsAll?;
    /**
     * @stability stable
     */
    get tagsAll(): {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set tagsAll(value: {
        [key: string]: string;
    } | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetTagsAll(): void;
    /**
     * @stability stable
     */
    get tagsAllInput(): cdktf.IResolvable | {
        [key: string]: string;
    } | undefined;
    /**
     * @stability stable
     */
    get validationEmails(): string[];
    private _validationMethod?;
    /**
     * @stability stable
     */
    get validationMethod(): string;
    /**
     * @stability stable
     */
    set validationMethod(value: string);
    /**
     * @stability stable
     */
    resetValidationMethod(): void;
    /**
     * @stability stable
     */
    get validationMethodInput(): string | undefined;
    private _options;
    /**
     * @stability stable
     */
    get options(): AcmCertificateOptionsOutputReference;
    /**
     * @stability stable
     */
    putOptions(value: AcmCertificateOptions): void;
    /**
     * @stability stable
     */
    resetOptions(): void;
    /**
     * @stability stable
     */
    get optionsInput(): AcmCertificateOptions | undefined;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
