"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsGlueScript = exports.dataAwsGlueScriptDagNodeToTerraform = exports.dataAwsGlueScriptDagNodeArgsToTerraform = exports.dataAwsGlueScriptDagEdgeToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataAwsGlueScriptDagEdgeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        source: cdktf.stringToTerraform(struct.source),
        target: cdktf.stringToTerraform(struct.target),
        target_parameter: cdktf.stringToTerraform(struct.targetParameter),
    };
}
exports.dataAwsGlueScriptDagEdgeToTerraform = dataAwsGlueScriptDagEdgeToTerraform;
function dataAwsGlueScriptDagNodeArgsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        name: cdktf.stringToTerraform(struct.name),
        param: cdktf.booleanToTerraform(struct.param),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.dataAwsGlueScriptDagNodeArgsToTerraform = dataAwsGlueScriptDagNodeArgsToTerraform;
function dataAwsGlueScriptDagNodeToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        id: cdktf.stringToTerraform(struct.id),
        line_number: cdktf.numberToTerraform(struct.lineNumber),
        node_type: cdktf.stringToTerraform(struct.nodeType),
        args: cdktf.listMapper(dataAwsGlueScriptDagNodeArgsToTerraform)(struct.args),
    };
}
exports.dataAwsGlueScriptDagNodeToTerraform = dataAwsGlueScriptDagNodeToTerraform;
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/d/glue_script.html aws_glue_script}.
 *
 * @stability stable
 */
class DataAwsGlueScript extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/d/glue_script.html aws_glue_script} Data Source.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_glue_script',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._language = config.language;
        this._dagEdge = config.dagEdge;
        this._dagNode = config.dagNode;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: true, required: false
    /**
     * @stability stable
     */
    get id() {
        return this.getStringAttribute('id');
    }
    /**
     * @stability stable
     */
    get language() {
        return this.getStringAttribute('language');
    }
    /**
     * @stability stable
     */
    set language(value) {
        this._language = value;
    }
    /**
     * @stability stable
     */
    resetLanguage() {
        this._language = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get languageInput() {
        return this._language;
    }
    // python_script - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get pythonScript() {
        return this.getStringAttribute('python_script');
    }
    // scala_code - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get scalaCode() {
        return this.getStringAttribute('scala_code');
    }
    /**
     * @stability stable
     */
    get dagEdge() {
        // Getting the computed value is not yet implemented
        return this.interpolationForAttribute('dag_edge');
    }
    /**
     * @stability stable
     */
    set dagEdge(value) {
        this._dagEdge = value;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get dagEdgeInput() {
        return this._dagEdge;
    }
    /**
     * @stability stable
     */
    get dagNode() {
        // Getting the computed value is not yet implemented
        return this.interpolationForAttribute('dag_node');
    }
    /**
     * @stability stable
     */
    set dagNode(value) {
        this._dagNode = value;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get dagNodeInput() {
        return this._dagNode;
    }
    // =========
    // SYNTHESIS
    // =========
    /**
     * @stability stable
     */
    synthesizeAttributes() {
        return {
            language: cdktf.stringToTerraform(this._language),
            dag_edge: cdktf.listMapper(dataAwsGlueScriptDagEdgeToTerraform)(this._dagEdge),
            dag_node: cdktf.listMapper(dataAwsGlueScriptDagNodeToTerraform)(this._dagNode),
        };
    }
}
exports.DataAwsGlueScript = DataAwsGlueScript;
_a = JSII_RTTI_SYMBOL_1;
DataAwsGlueScript[_a] = { fqn: "@cdktf/provider-aws.glue.DataAwsGlueScript", version: "3.0.1" };
// =================
// STATIC PROPERTIES
// =================
/**
 * @stability stable
 */
DataAwsGlueScript.tfResourceType = "aws_glue_script";
//# sourceMappingURL=data:application/json;base64,