import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * AWS DataSync.
 *
 * @stability stable
 */
export interface DatasyncLocationNfsConfig extends cdktf.TerraformMetaArguments {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/datasync_location_nfs.html#server_hostname DatasyncLocationNfs#server_hostname}.
     *
     * @stability stable
     */
    readonly serverHostname: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/datasync_location_nfs.html#subdirectory DatasyncLocationNfs#subdirectory}.
     *
     * @stability stable
     */
    readonly subdirectory: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/datasync_location_nfs.html#tags DatasyncLocationNfs#tags}.
     *
     * @stability stable
     */
    readonly tags?: {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/datasync_location_nfs.html#tags_all DatasyncLocationNfs#tags_all}.
     *
     * @stability stable
     */
    readonly tagsAll?: {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * mount_options block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/datasync_location_nfs.html#mount_options DatasyncLocationNfs#mount_options}
     *
     * @stability stable
     */
    readonly mountOptions?: DatasyncLocationNfsMountOptions;
    /**
     * on_prem_config block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/datasync_location_nfs.html#on_prem_config DatasyncLocationNfs#on_prem_config}
     *
     * @stability stable
     */
    readonly onPremConfig: DatasyncLocationNfsOnPremConfig;
}
/**
 * @stability stable
 */
export interface DatasyncLocationNfsMountOptions {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/datasync_location_nfs.html#version DatasyncLocationNfs#version}.
     *
     * @stability stable
     */
    readonly version?: string;
}
export declare function datasyncLocationNfsMountOptionsToTerraform(struct?: DatasyncLocationNfsMountOptionsOutputReference | DatasyncLocationNfsMountOptions): any;
/**
 * @stability stable
 */
export declare class DatasyncLocationNfsMountOptionsOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
     * @param terraformResource The parent resource.
     * @param terraformAttribute The attribute on the parent resource this class is referencing.
     * @param isSingleItem True if this is a block, false if it's a list.
     * @stability stable
     */
    constructor(terraformResource: cdktf.ITerraformResource, terraformAttribute: string, isSingleItem: boolean);
    /**
     * @stability stable
     */
    get internalValue(): DatasyncLocationNfsMountOptions | undefined;
    /**
     * @stability stable
     */
    set internalValue(value: DatasyncLocationNfsMountOptions | undefined);
    private _version?;
    /**
     * @stability stable
     */
    get version(): string;
    /**
     * @stability stable
     */
    set version(value: string);
    /**
     * @stability stable
     */
    resetVersion(): void;
    /**
     * @stability stable
     */
    get versionInput(): string | undefined;
}
/**
 * @stability stable
 */
export interface DatasyncLocationNfsOnPremConfig {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/datasync_location_nfs.html#agent_arns DatasyncLocationNfs#agent_arns}.
     *
     * @stability stable
     */
    readonly agentArns: string[];
}
export declare function datasyncLocationNfsOnPremConfigToTerraform(struct?: DatasyncLocationNfsOnPremConfigOutputReference | DatasyncLocationNfsOnPremConfig): any;
/**
 * @stability stable
 */
export declare class DatasyncLocationNfsOnPremConfigOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
     * @param terraformResource The parent resource.
     * @param terraformAttribute The attribute on the parent resource this class is referencing.
     * @param isSingleItem True if this is a block, false if it's a list.
     * @stability stable
     */
    constructor(terraformResource: cdktf.ITerraformResource, terraformAttribute: string, isSingleItem: boolean);
    /**
     * @stability stable
     */
    get internalValue(): DatasyncLocationNfsOnPremConfig | undefined;
    /**
     * @stability stable
     */
    set internalValue(value: DatasyncLocationNfsOnPremConfig | undefined);
    private _agentArns?;
    /**
     * @stability stable
     */
    get agentArns(): string[];
    /**
     * @stability stable
     */
    set agentArns(value: string[]);
    /**
     * @stability stable
     */
    get agentArnsInput(): string[] | undefined;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/datasync_location_nfs.html aws_datasync_location_nfs}.
 *
 * @stability stable
 */
export declare class DatasyncLocationNfs extends cdktf.TerraformResource {
    /**
     * @stability stable
     */
    static readonly tfResourceType: string;
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/datasync_location_nfs.html aws_datasync_location_nfs} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config: DatasyncLocationNfsConfig);
    /**
     * @stability stable
     */
    get arn(): string;
    /**
     * @stability stable
     */
    get id(): string;
    private _serverHostname?;
    /**
     * @stability stable
     */
    get serverHostname(): string;
    /**
     * @stability stable
     */
    set serverHostname(value: string);
    /**
     * @stability stable
     */
    get serverHostnameInput(): string | undefined;
    private _subdirectory?;
    /**
     * @stability stable
     */
    get subdirectory(): string;
    /**
     * @stability stable
     */
    set subdirectory(value: string);
    /**
     * @stability stable
     */
    get subdirectoryInput(): string | undefined;
    private _tags?;
    /**
     * @stability stable
     */
    get tags(): {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set tags(value: {
        [key: string]: string;
    } | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetTags(): void;
    /**
     * @stability stable
     */
    get tagsInput(): cdktf.IResolvable | {
        [key: string]: string;
    } | undefined;
    private _tagsAll?;
    /**
     * @stability stable
     */
    get tagsAll(): {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set tagsAll(value: {
        [key: string]: string;
    } | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetTagsAll(): void;
    /**
     * @stability stable
     */
    get tagsAllInput(): cdktf.IResolvable | {
        [key: string]: string;
    } | undefined;
    /**
     * @stability stable
     */
    get uri(): string;
    private _mountOptions;
    /**
     * @stability stable
     */
    get mountOptions(): DatasyncLocationNfsMountOptionsOutputReference;
    /**
     * @stability stable
     */
    putMountOptions(value: DatasyncLocationNfsMountOptions): void;
    /**
     * @stability stable
     */
    resetMountOptions(): void;
    /**
     * @stability stable
     */
    get mountOptionsInput(): DatasyncLocationNfsMountOptions | undefined;
    private _onPremConfig;
    /**
     * @stability stable
     */
    get onPremConfig(): DatasyncLocationNfsOnPremConfigOutputReference;
    /**
     * @stability stable
     */
    putOnPremConfig(value: DatasyncLocationNfsOnPremConfig): void;
    /**
     * @stability stable
     */
    get onPremConfigInput(): DatasyncLocationNfsOnPremConfig | undefined;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
