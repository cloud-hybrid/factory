import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * AWS ElastiCache.
 *
 * @stability stable
 */
export interface DataAwsElasticacheUserConfig extends cdktf.TerraformMetaArguments {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/elasticache_user.html#access_string DataAwsElasticacheUser#access_string}.
     *
     * @stability stable
     */
    readonly accessString?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/elasticache_user.html#engine DataAwsElasticacheUser#engine}.
     *
     * @stability stable
     */
    readonly engine?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/elasticache_user.html#no_password_required DataAwsElasticacheUser#no_password_required}.
     *
     * @stability stable
     */
    readonly noPasswordRequired?: boolean | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/elasticache_user.html#passwords DataAwsElasticacheUser#passwords}.
     *
     * @stability stable
     */
    readonly passwords?: string[];
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/elasticache_user.html#user_id DataAwsElasticacheUser#user_id}.
     *
     * @stability stable
     */
    readonly userId: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/d/elasticache_user.html#user_name DataAwsElasticacheUser#user_name}.
     *
     * @stability stable
     */
    readonly userName?: string;
}
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/d/elasticache_user.html aws_elasticache_user}.
 *
 * @stability stable
 */
export declare class DataAwsElasticacheUser extends cdktf.TerraformDataSource {
    /**
     * @stability stable
     */
    static readonly tfResourceType: string;
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/d/elasticache_user.html aws_elasticache_user} Data Source.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config: DataAwsElasticacheUserConfig);
    private _accessString?;
    /**
     * @stability stable
     */
    get accessString(): string;
    /**
     * @stability stable
     */
    set accessString(value: string);
    /**
     * @stability stable
     */
    resetAccessString(): void;
    /**
     * @stability stable
     */
    get accessStringInput(): string | undefined;
    private _engine?;
    /**
     * @stability stable
     */
    get engine(): string;
    /**
     * @stability stable
     */
    set engine(value: string);
    /**
     * @stability stable
     */
    resetEngine(): void;
    /**
     * @stability stable
     */
    get engineInput(): string | undefined;
    /**
     * @stability stable
     */
    get id(): string;
    private _noPasswordRequired?;
    /**
     * @stability stable
     */
    get noPasswordRequired(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set noPasswordRequired(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetNoPasswordRequired(): void;
    /**
     * @stability stable
     */
    get noPasswordRequiredInput(): boolean | cdktf.IResolvable | undefined;
    private _passwords?;
    /**
     * @stability stable
     */
    get passwords(): string[];
    /**
     * @stability stable
     */
    set passwords(value: string[]);
    /**
     * @stability stable
     */
    resetPasswords(): void;
    /**
     * @stability stable
     */
    get passwordsInput(): string[] | undefined;
    private _userId?;
    /**
     * @stability stable
     */
    get userId(): string;
    /**
     * @stability stable
     */
    set userId(value: string);
    /**
     * @stability stable
     */
    get userIdInput(): string | undefined;
    private _userName?;
    /**
     * @stability stable
     */
    get userName(): string;
    /**
     * @stability stable
     */
    set userName(value: string);
    /**
     * @stability stable
     */
    resetUserName(): void;
    /**
     * @stability stable
     */
    get userNameInput(): string | undefined;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
