"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataAwsIamPolicyDocument = exports.dataAwsIamPolicyDocumentStatementToTerraform = exports.dataAwsIamPolicyDocumentStatementPrincipalsToTerraform = exports.dataAwsIamPolicyDocumentStatementNotPrincipalsToTerraform = exports.dataAwsIamPolicyDocumentStatementConditionToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function dataAwsIamPolicyDocumentStatementConditionToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        test: cdktf.stringToTerraform(struct.test),
        values: cdktf.listMapper(cdktf.stringToTerraform)(struct.values),
        variable: cdktf.stringToTerraform(struct.variable),
    };
}
exports.dataAwsIamPolicyDocumentStatementConditionToTerraform = dataAwsIamPolicyDocumentStatementConditionToTerraform;
function dataAwsIamPolicyDocumentStatementNotPrincipalsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        identifiers: cdktf.listMapper(cdktf.stringToTerraform)(struct.identifiers),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsIamPolicyDocumentStatementNotPrincipalsToTerraform = dataAwsIamPolicyDocumentStatementNotPrincipalsToTerraform;
function dataAwsIamPolicyDocumentStatementPrincipalsToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        identifiers: cdktf.listMapper(cdktf.stringToTerraform)(struct.identifiers),
        type: cdktf.stringToTerraform(struct.type),
    };
}
exports.dataAwsIamPolicyDocumentStatementPrincipalsToTerraform = dataAwsIamPolicyDocumentStatementPrincipalsToTerraform;
function dataAwsIamPolicyDocumentStatementToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        actions: cdktf.listMapper(cdktf.stringToTerraform)(struct.actions),
        effect: cdktf.stringToTerraform(struct.effect),
        not_actions: cdktf.listMapper(cdktf.stringToTerraform)(struct.notActions),
        not_resources: cdktf.listMapper(cdktf.stringToTerraform)(struct.notResources),
        resources: cdktf.listMapper(cdktf.stringToTerraform)(struct.resources),
        sid: cdktf.stringToTerraform(struct.sid),
        condition: cdktf.listMapper(dataAwsIamPolicyDocumentStatementConditionToTerraform)(struct.condition),
        not_principals: cdktf.listMapper(dataAwsIamPolicyDocumentStatementNotPrincipalsToTerraform)(struct.notPrincipals),
        principals: cdktf.listMapper(dataAwsIamPolicyDocumentStatementPrincipalsToTerraform)(struct.principals),
    };
}
exports.dataAwsIamPolicyDocumentStatementToTerraform = dataAwsIamPolicyDocumentStatementToTerraform;
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html aws_iam_policy_document}.
 *
 * @stability stable
 */
class DataAwsIamPolicyDocument extends cdktf.TerraformDataSource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html aws_iam_policy_document} Data Source.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope, id, config = {}) {
        super(scope, id, {
            terraformResourceType: 'aws_iam_policy_document',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._overrideJson = config.overrideJson;
        this._overridePolicyDocuments = config.overridePolicyDocuments;
        this._policyId = config.policyId;
        this._sourceJson = config.sourceJson;
        this._sourcePolicyDocuments = config.sourcePolicyDocuments;
        this._version = config.version;
        this._statement = config.statement;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: true, required: false
    /**
     * @stability stable
     */
    get id() {
        return this.getStringAttribute('id');
    }
    // json - computed: true, optional: false, required: false
    /**
     * @stability stable
     */
    get json() {
        return this.getStringAttribute('json');
    }
    /**
     * @stability stable
     */
    get overrideJson() {
        return this.getStringAttribute('override_json');
    }
    /**
     * @stability stable
     */
    set overrideJson(value) {
        this._overrideJson = value;
    }
    /**
     * @stability stable
     */
    resetOverrideJson() {
        this._overrideJson = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get overrideJsonInput() {
        return this._overrideJson;
    }
    /**
     * @stability stable
     */
    get overridePolicyDocuments() {
        return this.getListAttribute('override_policy_documents');
    }
    /**
     * @stability stable
     */
    set overridePolicyDocuments(value) {
        this._overridePolicyDocuments = value;
    }
    /**
     * @stability stable
     */
    resetOverridePolicyDocuments() {
        this._overridePolicyDocuments = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get overridePolicyDocumentsInput() {
        return this._overridePolicyDocuments;
    }
    /**
     * @stability stable
     */
    get policyId() {
        return this.getStringAttribute('policy_id');
    }
    /**
     * @stability stable
     */
    set policyId(value) {
        this._policyId = value;
    }
    /**
     * @stability stable
     */
    resetPolicyId() {
        this._policyId = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get policyIdInput() {
        return this._policyId;
    }
    /**
     * @stability stable
     */
    get sourceJson() {
        return this.getStringAttribute('source_json');
    }
    /**
     * @stability stable
     */
    set sourceJson(value) {
        this._sourceJson = value;
    }
    /**
     * @stability stable
     */
    resetSourceJson() {
        this._sourceJson = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get sourceJsonInput() {
        return this._sourceJson;
    }
    /**
     * @stability stable
     */
    get sourcePolicyDocuments() {
        return this.getListAttribute('source_policy_documents');
    }
    /**
     * @stability stable
     */
    set sourcePolicyDocuments(value) {
        this._sourcePolicyDocuments = value;
    }
    /**
     * @stability stable
     */
    resetSourcePolicyDocuments() {
        this._sourcePolicyDocuments = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get sourcePolicyDocumentsInput() {
        return this._sourcePolicyDocuments;
    }
    /**
     * @stability stable
     */
    get version() {
        return this.getStringAttribute('version');
    }
    /**
     * @stability stable
     */
    set version(value) {
        this._version = value;
    }
    /**
     * @stability stable
     */
    resetVersion() {
        this._version = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get versionInput() {
        return this._version;
    }
    /**
     * @stability stable
     */
    get statement() {
        // Getting the computed value is not yet implemented
        return this.interpolationForAttribute('statement');
    }
    /**
     * @stability stable
     */
    set statement(value) {
        this._statement = value;
    }
    /**
     * @stability stable
     */
    resetStatement() {
        this._statement = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get statementInput() {
        return this._statement;
    }
    // =========
    // SYNTHESIS
    // =========
    /**
     * @stability stable
     */
    synthesizeAttributes() {
        return {
            override_json: cdktf.stringToTerraform(this._overrideJson),
            override_policy_documents: cdktf.listMapper(cdktf.stringToTerraform)(this._overridePolicyDocuments),
            policy_id: cdktf.stringToTerraform(this._policyId),
            source_json: cdktf.stringToTerraform(this._sourceJson),
            source_policy_documents: cdktf.listMapper(cdktf.stringToTerraform)(this._sourcePolicyDocuments),
            version: cdktf.stringToTerraform(this._version),
            statement: cdktf.listMapper(dataAwsIamPolicyDocumentStatementToTerraform)(this._statement),
        };
    }
}
exports.DataAwsIamPolicyDocument = DataAwsIamPolicyDocument;
_a = JSII_RTTI_SYMBOL_1;
DataAwsIamPolicyDocument[_a] = { fqn: "@cdktf/provider-aws.iam.DataAwsIamPolicyDocument", version: "3.0.1" };
// =================
// STATIC PROPERTIES
// =================
/**
 * @stability stable
 */
DataAwsIamPolicyDocument.tfResourceType = "aws_iam_policy_document";
//# sourceMappingURL=data:application/json;base64,