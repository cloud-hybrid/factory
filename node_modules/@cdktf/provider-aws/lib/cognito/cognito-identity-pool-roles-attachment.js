"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CognitoIdentityPoolRolesAttachment = exports.cognitoIdentityPoolRolesAttachmentRoleMappingToTerraform = exports.cognitoIdentityPoolRolesAttachmentRoleMappingMappingRuleToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function cognitoIdentityPoolRolesAttachmentRoleMappingMappingRuleToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        claim: cdktf.stringToTerraform(struct.claim),
        match_type: cdktf.stringToTerraform(struct.matchType),
        role_arn: cdktf.stringToTerraform(struct.roleArn),
        value: cdktf.stringToTerraform(struct.value),
    };
}
exports.cognitoIdentityPoolRolesAttachmentRoleMappingMappingRuleToTerraform = cognitoIdentityPoolRolesAttachmentRoleMappingMappingRuleToTerraform;
function cognitoIdentityPoolRolesAttachmentRoleMappingToTerraform(struct) {
    if (!cdktf.canInspect(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        ambiguous_role_resolution: cdktf.stringToTerraform(struct.ambiguousRoleResolution),
        identity_provider: cdktf.stringToTerraform(struct.identityProvider),
        type: cdktf.stringToTerraform(struct.type),
        mapping_rule: cdktf.listMapper(cognitoIdentityPoolRolesAttachmentRoleMappingMappingRuleToTerraform)(struct.mappingRule),
    };
}
exports.cognitoIdentityPoolRolesAttachmentRoleMappingToTerraform = cognitoIdentityPoolRolesAttachmentRoleMappingToTerraform;
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/cognito_identity_pool_roles_attachment.html aws_cognito_identity_pool_roles_attachment}.
 *
 * @stability stable
 */
class CognitoIdentityPoolRolesAttachment extends cdktf.TerraformResource {
    // ===========
    // INITIALIZER
    // ===========
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/cognito_identity_pool_roles_attachment.html aws_cognito_identity_pool_roles_attachment} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_cognito_identity_pool_roles_attachment',
            terraformGeneratorMetadata: {
                providerName: 'aws'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._identityPoolId = config.identityPoolId;
        this._roles = config.roles;
        this._roleMapping = config.roleMapping;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // id - computed: true, optional: true, required: false
    /**
     * @stability stable
     */
    get id() {
        return this.getStringAttribute('id');
    }
    /**
     * @stability stable
     */
    get identityPoolId() {
        return this.getStringAttribute('identity_pool_id');
    }
    /**
     * @stability stable
     */
    set identityPoolId(value) {
        this._identityPoolId = value;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get identityPoolIdInput() {
        return this._identityPoolId;
    }
    /**
     * @stability stable
     */
    get roles() {
        // Getting the computed value is not yet implemented
        return this.interpolationForAttribute('roles');
    }
    /**
     * @stability stable
     */
    set roles(value) {
        this._roles = value;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get rolesInput() {
        return this._roles;
    }
    /**
     * @stability stable
     */
    get roleMapping() {
        // Getting the computed value is not yet implemented
        return this.interpolationForAttribute('role_mapping');
    }
    /**
     * @stability stable
     */
    set roleMapping(value) {
        this._roleMapping = value;
    }
    /**
     * @stability stable
     */
    resetRoleMapping() {
        this._roleMapping = undefined;
    }
    // Temporarily expose input value. Use with caution.
    /**
     * @stability stable
     */
    get roleMappingInput() {
        return this._roleMapping;
    }
    // =========
    // SYNTHESIS
    // =========
    /**
     * @stability stable
     */
    synthesizeAttributes() {
        return {
            identity_pool_id: cdktf.stringToTerraform(this._identityPoolId),
            roles: cdktf.hashMapper(cdktf.anyToTerraform)(this._roles),
            role_mapping: cdktf.listMapper(cognitoIdentityPoolRolesAttachmentRoleMappingToTerraform)(this._roleMapping),
        };
    }
}
exports.CognitoIdentityPoolRolesAttachment = CognitoIdentityPoolRolesAttachment;
_a = JSII_RTTI_SYMBOL_1;
CognitoIdentityPoolRolesAttachment[_a] = { fqn: "@cdktf/provider-aws.cognito.CognitoIdentityPoolRolesAttachment", version: "3.0.1" };
// =================
// STATIC PROPERTIES
// =================
/**
 * @stability stable
 */
CognitoIdentityPoolRolesAttachment.tfResourceType = "aws_cognito_identity_pool_roles_attachment";
//# sourceMappingURL=data:application/json;base64,