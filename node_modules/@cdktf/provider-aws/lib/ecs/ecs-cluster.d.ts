import { Construct } from 'constructs';
import * as cdktf from 'cdktf';
/**
 * AWS EC2 Container Service.
 *
 * @stability stable
 */
export interface EcsClusterConfig extends cdktf.TerraformMetaArguments {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#capacity_providers EcsCluster#capacity_providers}.
     *
     * @stability stable
     */
    readonly capacityProviders?: string[];
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#name EcsCluster#name}.
     *
     * @stability stable
     */
    readonly name: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#tags EcsCluster#tags}.
     *
     * @stability stable
     */
    readonly tags?: {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#tags_all EcsCluster#tags_all}.
     *
     * @stability stable
     */
    readonly tagsAll?: {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * configuration block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#configuration EcsCluster#configuration}
     *
     * @stability stable
     */
    readonly configuration?: EcsClusterConfiguration;
    /**
     * default_capacity_provider_strategy block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#default_capacity_provider_strategy EcsCluster#default_capacity_provider_strategy}
     *
     * @stability stable
     */
    readonly defaultCapacityProviderStrategy?: EcsClusterDefaultCapacityProviderStrategy[];
    /**
     * setting block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#setting EcsCluster#setting}
     *
     * @stability stable
     */
    readonly setting?: EcsClusterSetting[];
}
/**
 * @stability stable
 */
export interface EcsClusterConfigurationExecuteCommandConfigurationLogConfiguration {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#cloud_watch_encryption_enabled EcsCluster#cloud_watch_encryption_enabled}.
     *
     * @stability stable
     */
    readonly cloudWatchEncryptionEnabled?: boolean | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#cloud_watch_log_group_name EcsCluster#cloud_watch_log_group_name}.
     *
     * @stability stable
     */
    readonly cloudWatchLogGroupName?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#s3_bucket_encryption_enabled EcsCluster#s3_bucket_encryption_enabled}.
     *
     * @stability stable
     */
    readonly s3BucketEncryptionEnabled?: boolean | cdktf.IResolvable;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#s3_bucket_name EcsCluster#s3_bucket_name}.
     *
     * @stability stable
     */
    readonly s3BucketName?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#s3_key_prefix EcsCluster#s3_key_prefix}.
     *
     * @stability stable
     */
    readonly s3KeyPrefix?: string;
}
export declare function ecsClusterConfigurationExecuteCommandConfigurationLogConfigurationToTerraform(struct?: EcsClusterConfigurationExecuteCommandConfigurationLogConfigurationOutputReference | EcsClusterConfigurationExecuteCommandConfigurationLogConfiguration): any;
/**
 * @stability stable
 */
export declare class EcsClusterConfigurationExecuteCommandConfigurationLogConfigurationOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
     * @param terraformResource The parent resource.
     * @param terraformAttribute The attribute on the parent resource this class is referencing.
     * @param isSingleItem True if this is a block, false if it's a list.
     * @stability stable
     */
    constructor(terraformResource: cdktf.ITerraformResource, terraformAttribute: string, isSingleItem: boolean);
    /**
     * @stability stable
     */
    get internalValue(): EcsClusterConfigurationExecuteCommandConfigurationLogConfiguration | undefined;
    /**
     * @stability stable
     */
    set internalValue(value: EcsClusterConfigurationExecuteCommandConfigurationLogConfiguration | undefined);
    private _cloudWatchEncryptionEnabled?;
    /**
     * @stability stable
     */
    get cloudWatchEncryptionEnabled(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set cloudWatchEncryptionEnabled(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetCloudWatchEncryptionEnabled(): void;
    /**
     * @stability stable
     */
    get cloudWatchEncryptionEnabledInput(): boolean | cdktf.IResolvable | undefined;
    private _cloudWatchLogGroupName?;
    /**
     * @stability stable
     */
    get cloudWatchLogGroupName(): string;
    /**
     * @stability stable
     */
    set cloudWatchLogGroupName(value: string);
    /**
     * @stability stable
     */
    resetCloudWatchLogGroupName(): void;
    /**
     * @stability stable
     */
    get cloudWatchLogGroupNameInput(): string | undefined;
    private _s3BucketEncryptionEnabled?;
    /**
     * @stability stable
     */
    get s3BucketEncryptionEnabled(): boolean | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set s3BucketEncryptionEnabled(value: boolean | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetS3BucketEncryptionEnabled(): void;
    /**
     * @stability stable
     */
    get s3BucketEncryptionEnabledInput(): boolean | cdktf.IResolvable | undefined;
    private _s3BucketName?;
    /**
     * @stability stable
     */
    get s3BucketName(): string;
    /**
     * @stability stable
     */
    set s3BucketName(value: string);
    /**
     * @stability stable
     */
    resetS3BucketName(): void;
    /**
     * @stability stable
     */
    get s3BucketNameInput(): string | undefined;
    private _s3KeyPrefix?;
    /**
     * @stability stable
     */
    get s3KeyPrefix(): string;
    /**
     * @stability stable
     */
    set s3KeyPrefix(value: string);
    /**
     * @stability stable
     */
    resetS3KeyPrefix(): void;
    /**
     * @stability stable
     */
    get s3KeyPrefixInput(): string | undefined;
}
/**
 * @stability stable
 */
export interface EcsClusterConfigurationExecuteCommandConfiguration {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#kms_key_id EcsCluster#kms_key_id}.
     *
     * @stability stable
     */
    readonly kmsKeyId?: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#logging EcsCluster#logging}.
     *
     * @stability stable
     */
    readonly logging?: string;
    /**
     * log_configuration block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#log_configuration EcsCluster#log_configuration}
     *
     * @stability stable
     */
    readonly logConfiguration?: EcsClusterConfigurationExecuteCommandConfigurationLogConfiguration;
}
export declare function ecsClusterConfigurationExecuteCommandConfigurationToTerraform(struct?: EcsClusterConfigurationExecuteCommandConfigurationOutputReference | EcsClusterConfigurationExecuteCommandConfiguration): any;
/**
 * @stability stable
 */
export declare class EcsClusterConfigurationExecuteCommandConfigurationOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
     * @param terraformResource The parent resource.
     * @param terraformAttribute The attribute on the parent resource this class is referencing.
     * @param isSingleItem True if this is a block, false if it's a list.
     * @stability stable
     */
    constructor(terraformResource: cdktf.ITerraformResource, terraformAttribute: string, isSingleItem: boolean);
    /**
     * @stability stable
     */
    get internalValue(): EcsClusterConfigurationExecuteCommandConfiguration | undefined;
    /**
     * @stability stable
     */
    set internalValue(value: EcsClusterConfigurationExecuteCommandConfiguration | undefined);
    private _kmsKeyId?;
    /**
     * @stability stable
     */
    get kmsKeyId(): string;
    /**
     * @stability stable
     */
    set kmsKeyId(value: string);
    /**
     * @stability stable
     */
    resetKmsKeyId(): void;
    /**
     * @stability stable
     */
    get kmsKeyIdInput(): string | undefined;
    private _logging?;
    /**
     * @stability stable
     */
    get logging(): string;
    /**
     * @stability stable
     */
    set logging(value: string);
    /**
     * @stability stable
     */
    resetLogging(): void;
    /**
     * @stability stable
     */
    get loggingInput(): string | undefined;
    private _logConfiguration;
    /**
     * @stability stable
     */
    get logConfiguration(): EcsClusterConfigurationExecuteCommandConfigurationLogConfigurationOutputReference;
    /**
     * @stability stable
     */
    putLogConfiguration(value: EcsClusterConfigurationExecuteCommandConfigurationLogConfiguration): void;
    /**
     * @stability stable
     */
    resetLogConfiguration(): void;
    /**
     * @stability stable
     */
    get logConfigurationInput(): EcsClusterConfigurationExecuteCommandConfigurationLogConfiguration | undefined;
}
/**
 * @stability stable
 */
export interface EcsClusterConfiguration {
    /**
     * execute_command_configuration block.
     *
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#execute_command_configuration EcsCluster#execute_command_configuration}
     *
     * @stability stable
     */
    readonly executeCommandConfiguration?: EcsClusterConfigurationExecuteCommandConfiguration;
}
export declare function ecsClusterConfigurationToTerraform(struct?: EcsClusterConfigurationOutputReference | EcsClusterConfiguration): any;
/**
 * @stability stable
 */
export declare class EcsClusterConfigurationOutputReference extends cdktf.ComplexObject {
    private isEmptyObject;
    /**
     * @param terraformResource The parent resource.
     * @param terraformAttribute The attribute on the parent resource this class is referencing.
     * @param isSingleItem True if this is a block, false if it's a list.
     * @stability stable
     */
    constructor(terraformResource: cdktf.ITerraformResource, terraformAttribute: string, isSingleItem: boolean);
    /**
     * @stability stable
     */
    get internalValue(): EcsClusterConfiguration | undefined;
    /**
     * @stability stable
     */
    set internalValue(value: EcsClusterConfiguration | undefined);
    private _executeCommandConfiguration;
    /**
     * @stability stable
     */
    get executeCommandConfiguration(): EcsClusterConfigurationExecuteCommandConfigurationOutputReference;
    /**
     * @stability stable
     */
    putExecuteCommandConfiguration(value: EcsClusterConfigurationExecuteCommandConfiguration): void;
    /**
     * @stability stable
     */
    resetExecuteCommandConfiguration(): void;
    /**
     * @stability stable
     */
    get executeCommandConfigurationInput(): EcsClusterConfigurationExecuteCommandConfiguration | undefined;
}
/**
 * @stability stable
 */
export interface EcsClusterDefaultCapacityProviderStrategy {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#base EcsCluster#base}.
     *
     * @stability stable
     */
    readonly base?: number;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#capacity_provider EcsCluster#capacity_provider}.
     *
     * @stability stable
     */
    readonly capacityProvider: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#weight EcsCluster#weight}.
     *
     * @stability stable
     */
    readonly weight?: number;
}
export declare function ecsClusterDefaultCapacityProviderStrategyToTerraform(struct?: EcsClusterDefaultCapacityProviderStrategy): any;
/**
 * @stability stable
 */
export interface EcsClusterSetting {
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#name EcsCluster#name}.
     *
     * @stability stable
     */
    readonly name: string;
    /**
     * Docs at Terraform Registry: {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html#value EcsCluster#value}.
     *
     * @stability stable
     */
    readonly value: string;
}
export declare function ecsClusterSettingToTerraform(struct?: EcsClusterSetting): any;
/**
 * Represents a {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html aws_ecs_cluster}.
 *
 * @stability stable
 */
export declare class EcsCluster extends cdktf.TerraformResource {
    /**
     * @stability stable
     */
    static readonly tfResourceType: string;
    /**
     * Create a new {@link https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html aws_ecs_cluster} Resource.
     *
     * @param scope The scope in which to define this construct.
     * @param id The scoped construct ID.
     * @stability stable
     */
    constructor(scope: Construct, id: string, config: EcsClusterConfig);
    /**
     * @stability stable
     */
    get arn(): string;
    private _capacityProviders?;
    /**
     * @stability stable
     */
    get capacityProviders(): string[];
    /**
     * @stability stable
     */
    set capacityProviders(value: string[]);
    /**
     * @stability stable
     */
    resetCapacityProviders(): void;
    /**
     * @stability stable
     */
    get capacityProvidersInput(): string[] | undefined;
    /**
     * @stability stable
     */
    get id(): string;
    private _name?;
    /**
     * @stability stable
     */
    get name(): string;
    /**
     * @stability stable
     */
    set name(value: string);
    /**
     * @stability stable
     */
    get nameInput(): string | undefined;
    private _tags?;
    /**
     * @stability stable
     */
    get tags(): {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set tags(value: {
        [key: string]: string;
    } | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetTags(): void;
    /**
     * @stability stable
     */
    get tagsInput(): cdktf.IResolvable | {
        [key: string]: string;
    } | undefined;
    private _tagsAll?;
    /**
     * @stability stable
     */
    get tagsAll(): {
        [key: string]: string;
    } | cdktf.IResolvable;
    /**
     * @stability stable
     */
    set tagsAll(value: {
        [key: string]: string;
    } | cdktf.IResolvable);
    /**
     * @stability stable
     */
    resetTagsAll(): void;
    /**
     * @stability stable
     */
    get tagsAllInput(): cdktf.IResolvable | {
        [key: string]: string;
    } | undefined;
    private _configuration;
    /**
     * @stability stable
     */
    get configuration(): EcsClusterConfigurationOutputReference;
    /**
     * @stability stable
     */
    putConfiguration(value: EcsClusterConfiguration): void;
    /**
     * @stability stable
     */
    resetConfiguration(): void;
    /**
     * @stability stable
     */
    get configurationInput(): EcsClusterConfiguration | undefined;
    private _defaultCapacityProviderStrategy?;
    /**
     * @stability stable
     */
    get defaultCapacityProviderStrategy(): EcsClusterDefaultCapacityProviderStrategy[];
    /**
     * @stability stable
     */
    set defaultCapacityProviderStrategy(value: EcsClusterDefaultCapacityProviderStrategy[]);
    /**
     * @stability stable
     */
    resetDefaultCapacityProviderStrategy(): void;
    /**
     * @stability stable
     */
    get defaultCapacityProviderStrategyInput(): EcsClusterDefaultCapacityProviderStrategy[] | undefined;
    private _setting?;
    /**
     * @stability stable
     */
    get setting(): EcsClusterSetting[];
    /**
     * @stability stable
     */
    set setting(value: EcsClusterSetting[]);
    /**
     * @stability stable
     */
    resetSetting(): void;
    /**
     * @stability stable
     */
    get settingInput(): EcsClusterSetting[] | undefined;
    /**
     * @stability stable
     */
    protected synthesizeAttributes(): {
        [name: string]: any;
    };
}
