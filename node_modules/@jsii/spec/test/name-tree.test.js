"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const spec = require("../lib/assembly");
const name_tree_1 = require("../lib/name-tree");
const assemblyName = '@foo/bar';
test('correctly represents sample assembly', () => {
    // GIVEN
    const assm = {
        schema: spec.SchemaVersion.LATEST,
        name: assemblyName,
        description: 'bla',
        homepage: 'https://github.com/bla/bla',
        author: { name: 'Author', roles: ['author'] },
        repository: {
            type: 'scm',
            url: 'https://github.com/bla/bla',
        },
        version: '0.0.1',
        jsiiVersion: 'TEST',
        license: 'NONE',
        fingerprint: '<no-fingerprint>',
        targets: {},
        types: {
            'org.jsii.TypeA': makeType('org.jsii', 'TypeA'),
            'org.jsii.TypeA.NestedType': makeType('org.jsii.TypeA', 'NestedType'),
            'org.jsii.enums.TypeB': makeType('org.jsii.enums', 'TypeB'),
        },
    };
    // WHEN
    const nameTree = name_tree_1.NameTree.of(assm);
    // THEN
    expect(Object.keys(nameTree.children)).toEqual(['org']);
    expect(Object.keys(nameTree.children.org.children)).toEqual(['jsii']);
    expect(new Set(Object.keys(nameTree.children.org.children.jsii.children))).toEqual(new Set(['enums', 'TypeA']));
    expect(Object.keys(nameTree.children.org.children.jsii.children.enums.children)).toEqual(['TypeB']);
    expect(Object.keys(nameTree.children.org.children.jsii.children.TypeA.children)).toEqual(['NestedType']);
    expect(nameTree.fqn).toBe(undefined);
    expect(nameTree.children.org.fqn).toBe(undefined);
    expect(nameTree.children.org.children.jsii.fqn).toBe(undefined);
    expect(nameTree.children.org.children.jsii.children.enums.fqn).toBe(undefined);
    expect(nameTree.children.org.children.jsii.children.TypeA.fqn).toBe('org.jsii.TypeA');
    expect(nameTree.children.org.children.jsii.children.TypeA.children.NestedType.fqn).toBe('org.jsii.TypeA.NestedType');
    expect(nameTree.children.org.children.jsii.children.enums.children.TypeB.fqn).toBe('org.jsii.enums.TypeB');
});
function makeType(ns, name) {
    const fqn = `${ns}.${name}`;
    return { fqn, name, assembly: assemblyName, kind: spec.TypeKind.Class };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZS10cmVlLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuYW1lLXRyZWUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUF3QztBQUN4QyxnREFBNEM7QUFFNUMsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDO0FBRWhDLElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7SUFDaEQsUUFBUTtJQUNSLE1BQU0sSUFBSSxHQUFrQjtRQUMxQixNQUFNLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNO1FBQ2pDLElBQUksRUFBRSxZQUFZO1FBQ2xCLFdBQVcsRUFBRSxLQUFLO1FBQ2xCLFFBQVEsRUFBRSw0QkFBNEI7UUFDdEMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUM3QyxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsS0FBSztZQUNYLEdBQUcsRUFBRSw0QkFBNEI7U0FDbEM7UUFDRCxPQUFPLEVBQUUsT0FBTztRQUNoQixXQUFXLEVBQUUsTUFBTTtRQUNuQixPQUFPLEVBQUUsTUFBTTtRQUNmLFdBQVcsRUFBRSxrQkFBa0I7UUFDL0IsT0FBTyxFQUFFLEVBQUU7UUFDWCxLQUFLLEVBQUU7WUFDTCxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQztZQUMvQywyQkFBMkIsRUFBRSxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDO1lBQ3JFLHNCQUFzQixFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUM7U0FDNUQ7S0FDRixDQUFDO0lBRUYsT0FBTztJQUNQLE1BQU0sUUFBUSxHQUFHLG9CQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRW5DLE9BQU87SUFDUCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3hELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN0RSxNQUFNLENBQ0osSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQ25FLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QyxNQUFNLENBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQ3pFLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNyQixNQUFNLENBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQ3pFLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUUxQixNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoRSxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDakUsU0FBUyxDQUNWLENBQUM7SUFFRixNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDakUsZ0JBQWdCLENBQ2pCLENBQUM7SUFDRixNQUFNLENBQ0osUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUMzRSxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sQ0FDSixRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQ3RFLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLFFBQVEsQ0FBQyxFQUFVLEVBQUUsSUFBWTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxHQUFHLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUM1QixPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzcGVjIGZyb20gJy4uL2xpYi9hc3NlbWJseSc7XG5pbXBvcnQgeyBOYW1lVHJlZSB9IGZyb20gJy4uL2xpYi9uYW1lLXRyZWUnO1xuXG5jb25zdCBhc3NlbWJseU5hbWUgPSAnQGZvby9iYXInO1xuXG50ZXN0KCdjb3JyZWN0bHkgcmVwcmVzZW50cyBzYW1wbGUgYXNzZW1ibHknLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IGFzc206IHNwZWMuQXNzZW1ibHkgPSB7XG4gICAgc2NoZW1hOiBzcGVjLlNjaGVtYVZlcnNpb24uTEFURVNULFxuICAgIG5hbWU6IGFzc2VtYmx5TmFtZSxcbiAgICBkZXNjcmlwdGlvbjogJ2JsYScsXG4gICAgaG9tZXBhZ2U6ICdodHRwczovL2dpdGh1Yi5jb20vYmxhL2JsYScsXG4gICAgYXV0aG9yOiB7IG5hbWU6ICdBdXRob3InLCByb2xlczogWydhdXRob3InXSB9LFxuICAgIHJlcG9zaXRvcnk6IHtcbiAgICAgIHR5cGU6ICdzY20nLFxuICAgICAgdXJsOiAnaHR0cHM6Ly9naXRodWIuY29tL2JsYS9ibGEnLFxuICAgIH0sXG4gICAgdmVyc2lvbjogJzAuMC4xJyxcbiAgICBqc2lpVmVyc2lvbjogJ1RFU1QnLFxuICAgIGxpY2Vuc2U6ICdOT05FJyxcbiAgICBmaW5nZXJwcmludDogJzxuby1maW5nZXJwcmludD4nLFxuICAgIHRhcmdldHM6IHt9LFxuICAgIHR5cGVzOiB7XG4gICAgICAnb3JnLmpzaWkuVHlwZUEnOiBtYWtlVHlwZSgnb3JnLmpzaWknLCAnVHlwZUEnKSxcbiAgICAgICdvcmcuanNpaS5UeXBlQS5OZXN0ZWRUeXBlJzogbWFrZVR5cGUoJ29yZy5qc2lpLlR5cGVBJywgJ05lc3RlZFR5cGUnKSxcbiAgICAgICdvcmcuanNpaS5lbnVtcy5UeXBlQic6IG1ha2VUeXBlKCdvcmcuanNpaS5lbnVtcycsICdUeXBlQicpLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gV0hFTlxuICBjb25zdCBuYW1lVHJlZSA9IE5hbWVUcmVlLm9mKGFzc20pO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KE9iamVjdC5rZXlzKG5hbWVUcmVlLmNoaWxkcmVuKSkudG9FcXVhbChbJ29yZyddKTtcbiAgZXhwZWN0KE9iamVjdC5rZXlzKG5hbWVUcmVlLmNoaWxkcmVuLm9yZy5jaGlsZHJlbikpLnRvRXF1YWwoWydqc2lpJ10pO1xuICBleHBlY3QoXG4gICAgbmV3IFNldChPYmplY3Qua2V5cyhuYW1lVHJlZS5jaGlsZHJlbi5vcmcuY2hpbGRyZW4uanNpaS5jaGlsZHJlbikpLFxuICApLnRvRXF1YWwobmV3IFNldChbJ2VudW1zJywgJ1R5cGVBJ10pKTtcbiAgZXhwZWN0KFxuICAgIE9iamVjdC5rZXlzKG5hbWVUcmVlLmNoaWxkcmVuLm9yZy5jaGlsZHJlbi5qc2lpLmNoaWxkcmVuLmVudW1zLmNoaWxkcmVuKSxcbiAgKS50b0VxdWFsKFsnVHlwZUInXSk7XG4gIGV4cGVjdChcbiAgICBPYmplY3Qua2V5cyhuYW1lVHJlZS5jaGlsZHJlbi5vcmcuY2hpbGRyZW4uanNpaS5jaGlsZHJlbi5UeXBlQS5jaGlsZHJlbiksXG4gICkudG9FcXVhbChbJ05lc3RlZFR5cGUnXSk7XG5cbiAgZXhwZWN0KG5hbWVUcmVlLmZxbikudG9CZSh1bmRlZmluZWQpO1xuICBleHBlY3QobmFtZVRyZWUuY2hpbGRyZW4ub3JnLmZxbikudG9CZSh1bmRlZmluZWQpO1xuICBleHBlY3QobmFtZVRyZWUuY2hpbGRyZW4ub3JnLmNoaWxkcmVuLmpzaWkuZnFuKS50b0JlKHVuZGVmaW5lZCk7XG4gIGV4cGVjdChuYW1lVHJlZS5jaGlsZHJlbi5vcmcuY2hpbGRyZW4uanNpaS5jaGlsZHJlbi5lbnVtcy5mcW4pLnRvQmUoXG4gICAgdW5kZWZpbmVkLFxuICApO1xuXG4gIGV4cGVjdChuYW1lVHJlZS5jaGlsZHJlbi5vcmcuY2hpbGRyZW4uanNpaS5jaGlsZHJlbi5UeXBlQS5mcW4pLnRvQmUoXG4gICAgJ29yZy5qc2lpLlR5cGVBJyxcbiAgKTtcbiAgZXhwZWN0KFxuICAgIG5hbWVUcmVlLmNoaWxkcmVuLm9yZy5jaGlsZHJlbi5qc2lpLmNoaWxkcmVuLlR5cGVBLmNoaWxkcmVuLk5lc3RlZFR5cGUuZnFuLFxuICApLnRvQmUoJ29yZy5qc2lpLlR5cGVBLk5lc3RlZFR5cGUnKTtcbiAgZXhwZWN0KFxuICAgIG5hbWVUcmVlLmNoaWxkcmVuLm9yZy5jaGlsZHJlbi5qc2lpLmNoaWxkcmVuLmVudW1zLmNoaWxkcmVuLlR5cGVCLmZxbixcbiAgKS50b0JlKCdvcmcuanNpaS5lbnVtcy5UeXBlQicpO1xufSk7XG5cbmZ1bmN0aW9uIG1ha2VUeXBlKG5zOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IHNwZWMuVHlwZSB7XG4gIGNvbnN0IGZxbiA9IGAke25zfS4ke25hbWV9YDtcbiAgcmV0dXJuIHsgZnFuLCBuYW1lLCBhc3NlbWJseTogYXNzZW1ibHlOYW1lLCBraW5kOiBzcGVjLlR5cGVLaW5kLkNsYXNzIH07XG59XG4iXX0=