"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDeprecated = exports.describeTypeReference = exports.isClassOrInterfaceType = exports.isEnumType = exports.isInterfaceType = exports.isClassType = exports.TypeKind = exports.isMethod = exports.isUnionTypeReference = exports.isCollectionTypeReference = exports.isPrimitiveTypeReference = exports.isNamedTypeReference = exports.CANONICAL_ANY = exports.PrimitiveType = exports.CollectionKind = exports.Stability = exports.SchemaVersion = exports.SPEC_FILE_NAME = void 0;
exports.SPEC_FILE_NAME = '.jsii';
/**
 * Versions of the JSII Assembly Specification.
 */
var SchemaVersion;
(function (SchemaVersion) {
    SchemaVersion["LATEST"] = "jsii/0.10.0";
})(SchemaVersion = exports.SchemaVersion || (exports.SchemaVersion = {}));
/**
 * API Stability levels. These are modeled after the `node` stability index.
 *
 * @see https://nodejs.org/api/documentation.html#documentation_stability_index.
 */
var Stability;
(function (Stability) {
    /**
     * The API may emit warnings. Backward compatibility is not guaranteed.
     *
     * More information about the deprecation can usually be found in the
     * `deprecated` field.
     */
    Stability["Deprecated"] = "deprecated";
    /**
     * This API is still under active development and subject to non-backward
     * compatible changes or removal in any future version. Use of the API is
     * not recommended in production environments. Experimental APIs are not
     * subject to the Semantic Versioning model.
     */
    Stability["Experimental"] = "experimental";
    /**
     * This API is subject to the Semantic Versioning model and may not change
     * in breaking ways in a subsequent minor or patch version.
     */
    Stability["Stable"] = "stable";
    /**
     * This API is an representation of an API managed elsewhere and follows
     * the other API's versioning model.
     */
    Stability["External"] = "external";
})(Stability = exports.Stability || (exports.Stability = {}));
/**
 * Kinds of collections.
 */
var CollectionKind;
(function (CollectionKind) {
    /**
     * An array, or a list of some element type.
     */
    CollectionKind["Array"] = "array";
    /**
     * A map of a string to some element type.
     */
    CollectionKind["Map"] = "map";
})(CollectionKind = exports.CollectionKind || (exports.CollectionKind = {}));
/**
 * Kinds of primitive types.
 */
var PrimitiveType;
(function (PrimitiveType) {
    /**
     * A JSON date (represented as it's ISO-8601 string form).
     */
    PrimitiveType["Date"] = "date";
    /**
     * A plain string.
     */
    PrimitiveType["String"] = "string";
    /**
     * A number (integer or float).
     */
    PrimitiveType["Number"] = "number";
    /**
     * A boolean value.
     */
    PrimitiveType["Boolean"] = "boolean";
    /**
     * A JSON object
     */
    PrimitiveType["Json"] = "json";
    /**
     * Value with "any" or "unknown" type (aka Object). Values typed `any` may
     * be `null` or `undefined`.
     */
    PrimitiveType["Any"] = "any";
})(PrimitiveType = exports.PrimitiveType || (exports.PrimitiveType = {}));
/**
 * The standard representation of the `any` type (includes optionality marker).
 */
exports.CANONICAL_ANY = {
    primitive: PrimitiveType.Any,
};
function isNamedTypeReference(ref) {
    var _a;
    return !!((_a = ref) === null || _a === void 0 ? void 0 : _a.fqn);
}
exports.isNamedTypeReference = isNamedTypeReference;
function isPrimitiveTypeReference(ref) {
    var _a;
    return !!((_a = ref) === null || _a === void 0 ? void 0 : _a.primitive);
}
exports.isPrimitiveTypeReference = isPrimitiveTypeReference;
function isCollectionTypeReference(ref) {
    var _a;
    return !!((_a = ref) === null || _a === void 0 ? void 0 : _a.collection);
}
exports.isCollectionTypeReference = isCollectionTypeReference;
function isUnionTypeReference(ref) {
    var _a;
    return !!((_a = ref) === null || _a === void 0 ? void 0 : _a.union);
}
exports.isUnionTypeReference = isUnionTypeReference;
/**
 * Determines whether a Callable is a Method or not.
 *
 * @param callable the callable to be checked.
 */
function isMethod(callable) {
    return !!callable.name;
}
exports.isMethod = isMethod;
/**
 * Kinds of types.
 */
var TypeKind;
(function (TypeKind) {
    TypeKind["Class"] = "class";
    TypeKind["Enum"] = "enum";
    TypeKind["Interface"] = "interface";
})(TypeKind = exports.TypeKind || (exports.TypeKind = {}));
function isClassType(type) {
    return (type === null || type === void 0 ? void 0 : type.kind) === TypeKind.Class;
}
exports.isClassType = isClassType;
function isInterfaceType(type) {
    return (type === null || type === void 0 ? void 0 : type.kind) === TypeKind.Interface;
}
exports.isInterfaceType = isInterfaceType;
function isEnumType(type) {
    return (type === null || type === void 0 ? void 0 : type.kind) === TypeKind.Enum;
}
exports.isEnumType = isEnumType;
/**
 * Return whether this type is a class or interface type
 */
function isClassOrInterfaceType(type) {
    return isClassType(type) || isInterfaceType(type);
}
exports.isClassOrInterfaceType = isClassOrInterfaceType;
/**
 * Return a string representation of the given type reference.
 */
function describeTypeReference(type) {
    if (type === undefined) {
        return 'void';
    }
    if (isNamedTypeReference(type)) {
        return type.fqn;
    }
    if (isPrimitiveTypeReference(type)) {
        return type.primitive;
    }
    if (isCollectionTypeReference(type)) {
        return `${type.collection.kind}<${describeTypeReference(type.collection.elementtype)}>`;
    }
    if (isUnionTypeReference(type)) {
        const unionType = type.union.types.map(describeTypeReference).join(' | ');
        return unionType;
    }
    throw new Error('Unrecognized type reference');
}
exports.describeTypeReference = describeTypeReference;
/**
 * Determines whether an entity is deprecated.
 *
 * @param entity the entity to be checked.
 *
 * @returns true if the entity is marked as deprecated.
 */
function isDeprecated(entity) {
    var _a;
    return ((_a = entity === null || entity === void 0 ? void 0 : entity.docs) === null || _a === void 0 ? void 0 : _a.stability) === Stability.Deprecated;
}
exports.isDeprecated = isDeprecated;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhc3NlbWJseS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBYSxRQUFBLGNBQWMsR0FBRyxPQUFPLENBQUM7QUFtTnRDOztHQUVHO0FBQ0gsSUFBWSxhQUVYO0FBRkQsV0FBWSxhQUFhO0lBQ3ZCLHVDQUFzQixDQUFBO0FBQ3hCLENBQUMsRUFGVyxhQUFhLEdBQWIscUJBQWEsS0FBYixxQkFBYSxRQUV4QjtBQXNLRDs7OztHQUlHO0FBQ0gsSUFBWSxTQTRCWDtBQTVCRCxXQUFZLFNBQVM7SUFDbkI7Ozs7O09BS0c7SUFDSCxzQ0FBeUIsQ0FBQTtJQUV6Qjs7Ozs7T0FLRztJQUNILDBDQUE2QixDQUFBO0lBRTdCOzs7T0FHRztJQUNILDhCQUFpQixDQUFBO0lBRWpCOzs7T0FHRztJQUNILGtDQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUE1QlcsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUE0QnBCO0FBa0REOztHQUVHO0FBQ0gsSUFBWSxjQVNYO0FBVEQsV0FBWSxjQUFjO0lBQ3hCOztPQUVHO0lBQ0gsaUNBQWUsQ0FBQTtJQUNmOztPQUVHO0lBQ0gsNkJBQVcsQ0FBQTtBQUNiLENBQUMsRUFUVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQVN6QjtBQUVEOztHQUVHO0FBQ0gsSUFBWSxhQStCWDtBQS9CRCxXQUFZLGFBQWE7SUFDdkI7O09BRUc7SUFDSCw4QkFBYSxDQUFBO0lBRWI7O09BRUc7SUFDSCxrQ0FBaUIsQ0FBQTtJQUVqQjs7T0FFRztJQUNILGtDQUFpQixDQUFBO0lBRWpCOztPQUVHO0lBQ0gsb0NBQW1CLENBQUE7SUFFbkI7O09BRUc7SUFDSCw4QkFBYSxDQUFBO0lBRWI7OztPQUdHO0lBQ0gsNEJBQVcsQ0FBQTtBQUNiLENBQUMsRUEvQlcsYUFBYSxHQUFiLHFCQUFhLEtBQWIscUJBQWEsUUErQnhCO0FBNEJEOztHQUVHO0FBQ1UsUUFBQSxhQUFhLEdB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QUNqRCxDQUFDO0FBekJELHNEQXlCQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQWdCLFlBQVksQ0FBQyxNQUFvQjs7SUFDL0MsT0FBTyxPQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxJQUFJLDBDQUFFLFNBQVMsTUFBSyxTQUFTLENBQUMsVUFBVSxDQUFDO0FBQzFELENBQUM7QUFGRCxvQ0FFQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBTUEVDX0ZJTEVfTkFNRSA9ICcuanNpaSc7XG5cbi8qKlxuICogQSBKU0lJIGFzc2VtYmx5IHNwZWNpZmljYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXNzZW1ibHlcbiAgZXh0ZW5kcyBBc3NlbWJseUNvbmZpZ3VyYXRpb24sXG4gICAgRG9jdW1lbnRhYmxlLFxuICAgIFJlYWRNZUNvbnRhaW5lciB7XG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBvZiB0aGUgc3BlYyBzY2hlbWFcbiAgICovXG4gIHNjaGVtYTogU2NoZW1hVmVyc2lvbi5MQVRFU1Q7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBhc3NlbWJseVxuICAgKlxuICAgKiBAbWluTGVuZ3RoIDFcbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogRGVzY3JpcHRpb24gb2YgdGhlIGFzc2VtYmx5LCBtYXBzIHRvIFwiZGVzY3JpcHRpb25cIiBmcm9tIHBhY2thZ2UuanNvblxuICAgKiBUaGlzIGlzIHJlcXVpcmVkIHNpbmNlIHNvbWUgcGFja2FnZSBtYW5hZ2VycyAobGlrZSBNYXZlbikgcmVxdWlyZSBpdC5cbiAgICovXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB1cmwgdG8gdGhlIHByb2plY3QgaG9tZXBhZ2UuIE1hcHMgdG8gXCJob21lcGFnZVwiIGZyb20gcGFja2FnZS5qc29uLlxuICAgKi9cbiAgaG9tZXBhZ2U6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG1vZHVsZSByZXBvc2l0b3J5LCBtYXBzIHRvIFwicmVwb3NpdG9yeVwiIGZyb20gcGFja2FnZS5qc29uXG4gICAqIFRoaXMgaXMgcmVxdWlyZWQgc2luY2Ugc29tZSBwYWNrYWdlIG1hbmFnZXJzIChsaWtlIE1hdmVuKSByZXF1aXJlIGl0LlxuICAgKi9cbiAgcmVwb3NpdG9yeToge1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSByZXBvc2l0b3J5IChgYGdpdGBgLCBgYHN2bmBgLCAuLi4pXG4gICAgICovXG4gICAgdHlwZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFVSTCBvZiB0aGUgcmVwb3NpdG9yeS5cbiAgICAgKi9cbiAgICB1cmw6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIElmIHRoZSBwYWNrYWdlIGlzIG5vdCBpbiB0aGUgcm9vdCBkaXJlY3RvcnkgKGZvciBleGFtcGxlLCB3aGVuIHBhcnRcbiAgICAgKiBvZiBhIG1vbm9yZXBvKSwgeW91IHNob3VsZCBzcGVjaWZ5IHRoZSBkaXJlY3RvcnkgaW4gd2hpY2ggaXQgbGl2ZXMuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCB0aGUgcm9vdCBvZiB0aGUgcmVwb3NpdG9yeVxuICAgICAqL1xuICAgIGRpcmVjdG9yeT86IHN0cmluZztcbiAgfTtcblxuICAvKipcbiAgICogVGhlIG1haW4gYXV0aG9yIG9mIHRoaXMgcGFja2FnZS5cbiAgICovXG4gIGF1dGhvcjogUGVyc29uO1xuXG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGNvbnRyaWJ1dG9ycyB0byB0aGlzIHBhY2thZ2UuXG4gICAqXG4gICAqIEBkZWZhdWx0IG5vbmVcbiAgICovXG4gIGNvbnRyaWJ1dG9ycz86IFBlcnNvbltdO1xuXG4gIC8qKlxuICAgKiBBIGZpbmdlcnByaW50IHRoYXQgY2FuIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIHRoZSBzcGVjaWZpY2F0aW9uIGhhc1xuICAgKiBjaGFuZ2VkLlxuICAgKlxuICAgKiBAbWluTGVuZ3RoIDFcbiAgICovXG4gIGZpbmdlcnByaW50OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBhc3NlbWJseVxuICAgKiBAbWluTGVuZ3RoIDFcbiAgICovXG4gIHZlcnNpb246IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHZlcnNpb24gb2YgdGhlIGpzaWkgY29tcGlsZXIgdGhhdCB3YXMgdXNlZCB0byBwcm9kdWNlIHRoaXMgQXNzZW1ibHkuXG4gICAqIEBtaW5MZW5ndGggMVxuICAgKi9cbiAganNpaVZlcnNpb246IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIFNQRFggbmFtZSBvZiB0aGUgbGljZW5zZSB0aGlzIGFzc2VtYmx5IGlzIGRpc3RyaWJ1dGVkIG9uLlxuICAgKi9cbiAgbGljZW5zZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBcmJpdHJhcnkga2V5LXZhbHVlIHBhaXJzIG9mIG1ldGFkYXRhLCB3aGljaCB0aGUgbWFpbnRhaW5lciBjaG9zZSB0b1xuICAgKiBkb2N1bWVudCB3aXRoIHRoZSBhc3NlbWJseS4gVGhlc2UgZW50cmllcyBkbyBub3QgY2Fycnkgbm9ybWF0aXZlXG4gICAqIHNlbWFudGljcyBhbmQgdGhlaXIgaW50ZXJwcmV0YXRpb24gaXMgdXAgdG8gdGhlIGFzc2VtYmx5IG1haW50YWluZXIuXG4gICAqXG4gICAqIEBkZWZhdWx0IG5vbmVcbiAgICovXG4gIG1ldGFkYXRhPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcblxuICAvKipcbiAgICogS2V5d29yZHMgdGhhdCBoZWxwIGRpc2NvdmVyIG9yIGlkZW50aWZ5IHRoaXMgcGFja2FnZXMgd2l0aCByZXNwZWN0cyB0byBpdCdzXG4gICAqIGludGVuZGVkIHVzYWdlLCBhdWRpZW5jZSwgZXRjLi4uIFdoZXJlIHBvc3NpYmxlLCB0aGlzIHdpbGwgYmUgcmVuZGVyZWQgaW5cbiAgICogdGhlIGNvcnJlc3BvbmRpbmcgbWV0YWRhdGEgc2VjdGlvbiBvZiBpZGlvbWF0aWMgcGFja2FnZSBtYW5pZmVzdHMsIGZvclxuICAgKiBleGFtcGxlIE51R2V0IHBhY2thZ2UgdGFncy5cbiAgICovXG4gIGtleXdvcmRzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIERpcmVjdCBkZXBlbmRlbmNpZXMgb24gb3RoZXIgYXNzZW1ibGllcyAod2l0aCBzZW12ZXIpLCB0aGUga2V5IGlzIHRoZSBKU0lJXG4gICAqIGFzc2VtYmx5IG5hbWUsIGFuZCB0aGUgdmFsdWUgaXMgYSBTZW1WZXIgZXhwcmVzc2lvbi5cbiAgICpcbiAgICogQGRlZmF1bHQgbm9uZVxuICAgKi9cbiAgZGVwZW5kZW5jaWVzPzogeyBbYXNzZW1ibHk6IHN0cmluZ106IHN0cmluZyB9O1xuXG4gIC8qKlxuICAgKiBUYXJnZXQgY29uZmlndXJhdGlvbiBmb3IgYWxsIHRoZSBhc3NlbWJsaWVzIHRoYXQgYXJlIGRpcmVjdCBvciB0cmFuc2l0aXZlXG4gICAqIGRlcGVuZGVuY2llcyBvZiB0aGlzIGFzc2VtYmx5LiBUaGlzIGlzIG5lZWRlZCB0byBnZW5lcmF0ZSBjb3JyZWN0IG5hdGl2ZVxuICAgKiB0eXBlIG5hbWVzIGZvciBhbnkgdHJhbnNpdGl2ZWx5IGluaGVyaXRlZCBtZW1iZXIsIGluIGNlcnRhaW4gbGFuZ3VhZ2VzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBub25lXG4gICAqL1xuICBkZXBlbmRlbmN5Q2xvc3VyZT86IHsgW2Fzc2VtYmx5OiBzdHJpbmddOiBEZXBlbmRlbmN5Q29uZmlndXJhdGlvbiB9O1xuXG4gIC8qKlxuICAgKiBMaXN0IGlmIGJ1bmRsZWQgZGVwZW5kZW5jaWVzICh0aGVzZSBhcmUgbm90IGV4cGVjdGVkIHRvIGJlIGpzaWlcbiAgICogYXNzZW1ibGllcykuXG4gICAqXG4gICAqIEBkZWZhdWx0IG5vbmVcbiAgICovXG4gIGJ1bmRsZWQ/OiB7IFttb2R1bGU6IHN0cmluZ106IHN0cmluZyB9O1xuXG4gIC8qKlxuICAgKiBBbGwgdHlwZXMgaW4gdGhlIGFzc2VtYmx5LCBrZXllZCBieSB0aGVpciBmdWxseS1xdWFsaWZpZWQtbmFtZVxuICAgKlxuICAgKiBAZGVmYXVsdCBub25lXG4gICAqL1xuICB0eXBlcz86IHsgW2Zxbjogc3RyaW5nXTogVHlwZSB9O1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIGJpbi1zY3JpcHRzXG4gICAqXG4gICAqIEBkZWZhdWx0IG5vbmVcbiAgICovXG4gIGJpbj86IHsgcmVhZG9ubHkgW3NjcmlwdDogc3RyaW5nXTogc3RyaW5nIH07XG59XG5cbi8qKlxuICogU2hhcmVhYmxlIGNvbmZpZ3VyYXRpb24gb2YgYSBqc2lpIEFzc2VtYmx5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFzc2VtYmx5Q29uZmlndXJhdGlvbiBleHRlbmRzIFRhcmdldGFibGUge1xuICAvKipcbiAgICogU3VibW9kdWxlcyBkZWNsYXJlZCBpbiB0aGlzIGFzc2VtYmx5LlxuICAgKlxuICAgKiBAZGVmYXVsdCBub25lXG4gICAqL1xuICBzdWJtb2R1bGVzPzogeyBbZnFuOiBzdHJpbmddOiBTdWJtb2R1bGUgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZXBlbmRlbmN5Q29uZmlndXJhdGlvbiBleHRlbmRzIFRhcmdldGFibGUge1xuICBzdWJtb2R1bGVzPzogeyBbZnFuOiBzdHJpbmddOiBUYXJnZXRhYmxlIH07XG59XG5cbi8qKlxuICogQSB0YXJnZXRhYmxlIG1vZHVsZS1saWtlIHRoaW5nXG4gKlxuICogSGFzIHRhcmdldHMgYW5kIGEgcmVhZG1lLiBVc2VkIGZvciBBc3NlbWJsaWVzIGFuZCBTdWJtb2R1bGVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRhcmdldGFibGUge1xuICAvKipcbiAgICogQSBtYXAgb2YgdGFyZ2V0IG5hbWUgdG8gY29uZmlndXJhdGlvbiwgd2hpY2ggaXMgdXNlZCB3aGVuIGdlbmVyYXRpbmdcbiAgICogcGFja2FnZXMgZm9yIHZhcmlvdXMgbGFuZ3VhZ2VzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBub25lXG4gICAqL1xuICB0YXJnZXRzPzogQXNzZW1ibHlUYXJnZXRzO1xufVxuXG4vKipcbiAqIEVsZW1lbnRzIHRoYXQgY2FuIGNvbnRhaW4gYSBgcmVhZG1lYCBwcm9wZXJ0eS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWFkTWVDb250YWluZXIge1xuICAvKipcbiAgICogVGhlIHJlYWRtZSBkb2N1bWVudCBmb3IgdGhpcyBtb2R1bGUgKGlmIGFueSkuXG4gICAqXG4gICAqIEBkZWZhdWx0IG5vbmVcbiAgICovXG4gIHJlYWRtZT86IFJlYWRNZTtcbn1cblxuLyoqXG4gKiBSRUFETUUgaW5mb3JtYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWFkTWUge1xuICBtYXJrZG93bjogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgc3VibW9kdWxlXG4gKlxuICogVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBhIHRvcC1sZXZlbCBtb2R1bGUgKHRoZSBhc3NlbWJseSkgYW5kIGEgc3VibW9kdWxlIGlzXG4gKiB0aGF0IHRoZSBzdWJtb2R1bGUgaXMgYW5ub3RhdGVkIHdpdGggaXRzIGxvY2F0aW9uIGluIHRoZSByZXBvc2l0b3J5LlxuICovXG5leHBvcnQgdHlwZSBTdWJtb2R1bGUgPSBSZWFkTWVDb250YWluZXIgJlxuICBTb3VyY2VMb2NhdGFibGUgJlxuICBUYXJnZXRhYmxlICZcbiAgVHlwZVNjcmlwdExvY2F0YWJsZTtcblxuLyoqXG4gKiBWZXJzaW9ucyBvZiB0aGUgSlNJSSBBc3NlbWJseSBTcGVjaWZpY2F0aW9uLlxuICovXG5leHBvcnQgZW51bSBTY2hlbWFWZXJzaW9uIHtcbiAgTEFURVNUID0gJ2pzaWkvMC4xMC4wJyxcbn1cblxuLyoqXG4gKiBGdWxseSBRdWFsaWZpZWQgTmFtZVxuICovXG5leHBvcnQgdHlwZSBGUU4gPSBzdHJpbmc7XG5cbi8qKlxuICogTWV0YWRhdGEgYWJvdXQgcGVvcGxlIG9yIG9yZ2FuaXphdGlvbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm9qZWN0IHRoYXRcbiAqIHJlc3VsdGVkIGluIHRoZSBBc3NlbWJseS4gU29tZSBvZiB0aGlzIG1ldGFkYXRhIGlzIHJlcXVpcmVkIGluIG9yZGVyIHRvXG4gKiBwdWJsaXNoIHRvIGNlcnRhaW4gcGFja2FnZSByZXBvc2l0b3JpZXMgKGZvciBleGFtcGxlLCBNYXZlbiBDZW50cmFsKSwgYnV0IGlzXG4gKiBub3Qgbm9ybWFsaXplZCwgYW5kIHRoZSBtZWFuaW5nIG9mIGZpZWxkcyAocm9sZSwgZm9yIGV4YW1wbGUpLCBpcyB1cCB0byBlYWNoXG4gKiBwcm9qZWN0IG1haW50YWluZXIuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGVyc29uIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBwZXJzb25cbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogQSBsaXN0IG9mIHJvbGVzIHRoaXMgcGVyc29uIGhhcyBpbiB0aGUgcHJvamVjdCwgZm9yIGV4YW1wbGUgYG1haW50YWluZXJgLFxuICAgKiBgY29udHJpYnV0b3JgLCBgb3duZXJgLCAuLi5cbiAgICovXG4gIHJvbGVzOiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogVGhlIGVtYWlsIG9mIHRoZSBwZXJzb25cbiAgICpcbiAgICogQGRlZmF1bHQgbm9uZVxuICAgKi9cbiAgZW1haWw/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBVUkwgZm9yIHRoZSBwZXJzb25cbiAgICpcbiAgICogQGRlZmF1bHQgbm9uZVxuICAgKi9cbiAgdXJsPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGlzIHBlcnNvbiBpcywgaW4gZmFjdCwgYW4gb3JnYW5pemF0aW9uXG4gICAqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBvcmdhbml6YXRpb24/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIENvbmZpZ3VyYWJsZSB0YXJnZXRzIGZvciBhbiBhc2VtYmx5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFzc2VtYmx5VGFyZ2V0cyB7XG4gIC8qKlxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCBhIHBhcnRpY3VsYXIgbGFuZ3VhZ2UncyB0YXJnZXRzXG4gICAqL1xuICBbbGFuZ3VhZ2U6IHN0cmluZ106IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogV2hlcmUgaW4gdGhlIG1vZHVsZSBzb3VyY2UgdGhlIGRlZmluaXRpb24gZm9yIHRoaXMgQVBJIGl0ZW0gd2FzIGZvdW5kXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU291cmNlTG9jYXRpb24ge1xuICAvKipcbiAgICogUmVsYXRpdmUgZmlsZW5hbWVcbiAgICovXG4gIGZpbGVuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIDEtYmFzZWQgbGluZSBudW1iZXIgaW4gdGhlIGluZGljYXRlZCBmaWxlXG4gICAqL1xuICBsaW5lOiBudW1iZXI7XG59XG5cbi8qKlxuICogS2V5IHZhbHVlIHBhaXJzIG9mIGRvY3VtZW50YXRpb24gbm9kZXMuXG4gKiBCYXNlZCBvbiBUU0RvYy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEb2NzIHtcbiAgLyoqXG4gICAqIFN1bW1hcnkgZG9jdW1lbnRhdGlvbiBmb3IgYW4gQVBJIGl0ZW0uXG4gICAqXG4gICAqIFRoZSBmaXJzdCBwYXJ0IG9mIHRoZSBkb2N1bWVudGF0aW9uIGJlZm9yZSBoaXR0aW5nIGEgYEByZW1hcmtzYCB0YWdzLCBvclxuICAgKiB0aGUgZmlyc3QgbGluZSBvZiB0aGUgZG9jIGNvbW1lbnQgYmxvY2sgaWYgdGhlcmUgaXMgbm8gYEByZW1hcmtzYCB0YWcuXG4gICAqXG4gICAqIEBkZWZhdWx0IG5vbmVcbiAgICovXG4gIHN1bW1hcnk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IGFuIEFQSSBpdGVtLlxuICAgKlxuICAgKiBFaXRoZXIgdGhlIGV4cGxpY2l0bHkgdGFnZ2VkIGBAcmVtYXJrc2Agc2VjdGlvbiwgb3RoZXJ3aXNlIGV2ZXJ5dGhpbmdcbiAgICogcGFzdCB0aGUgZmlyc3QgcGFyYWdyYXBoIGlmIHRoZXJlIGlzIG5vIGBAcmVtYXJrc2AgdGFnLlxuICAgKlxuICAgKiBAZGVmYXVsdCBub25lXG4gICAqL1xuICByZW1hcmtzPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJZiBwcmVzZW50LCB0aGlzIGJsb2NrIGluZGljYXRlcyB0aGF0IGFuIEFQSSBpdGVtIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWRcbiAgICogYW5kIG1heSBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuICBUaGUgYEBkZXByZWNhdGVkYCB0YWcgbXVzdCBiZVxuICAgKiBmb2xsb3dlZCBieSBhIHNlbnRlbmNlIGRlc2NyaWJpbmcgdGhlIHJlY29tbWVuZGVkIGFsdGVybmF0aXZlLlxuICAgKiBEZXByZWNhdGlvbiByZWN1cnNpdmVseSBhcHBsaWVzIHRvIG1lbWJlcnMgb2YgYSBjb250YWluZXIuIEZvciBleGFtcGxlLFxuICAgKiBpZiBhIGNsYXNzIGlzIGRlcHJlY2F0ZWQsIHRoZW4gc28gYXJlIGFsbCBvZiBpdHMgbWVtYmVycy5cbiAgICpcbiAgICogQGRlZmF1bHQgbm9uZVxuICAgKi9cbiAgZGVwcmVjYXRlZD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGBAcmV0dXJuc2AgYmxvY2sgZm9yIHRoaXMgZG9jIGNvbW1lbnQsIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBpcyBub3RcbiAgICogb25lLlxuICAgKlxuICAgKiBAZGVmYXVsdCBub25lXG4gICAqL1xuICByZXR1cm5zPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBBUEkgaXRlbSBpcyBiZXRhL2V4cGVyaW1lbnRhbCBxdWFsaXR5XG4gICAqL1xuICBzdGFiaWxpdHk/OiBTdGFiaWxpdHk7XG5cbiAgLyoqXG4gICAqIEV4YW1wbGUgc2hvd2luZyB0aGUgdXNhZ2Ugb2YgdGhpcyBBUEkgaXRlbVxuICAgKlxuICAgKiBTdGFydHMgb2ZmIGluIHJ1bm5pbmcgdGV4dCBtb2RlLCBtYXkgc3dpdGNoIHRvIGNvZGUgdXNpbmcgZmVuY2VkIGNvZGVcbiAgICogYmxvY2tzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBub25lXG4gICAqL1xuICBleGFtcGxlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIGBAc2VlYCBsaW5rIHdpdGggbW9yZSBpbmZvcm1hdGlvblxuICAgKlxuICAgKiBAZGVmYXVsdCBub25lXG4gICAqL1xuICBzZWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBjbGFzcyBvciBpbnRlcmZhY2Ugd2FzIGludGVuZGVkIHRvIGJlIHN1YmNsYXNzZWQvaW1wbGVtZW50ZWRcbiAgICogYnkgbGlicmFyeSB1c2Vycy5cbiAgICpcbiAgICogQ2xhc3NlcyBpbnRlbmRlZCBmb3Igc3ViY2xhc3NpbmcsIGFuZCBpbnRlcmZhY2VzIGludGVuZGVkIHRvIGJlXG4gICAqIGltcGxlbWVudGVkIGJ5IGNvbnN1bWVycywgYXJlIGhlbGQgdG8gc3RyaWN0ZXIgc3RhbmRhcmRzIG9mIEFQSVxuICAgKiBjb21wYXRpYmlsaXR5LlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc3ViY2xhc3NhYmxlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogRGVzY3JpcHRpb24gb2YgdGhlIGRlZmF1bHRcbiAgICpcbiAgICogQGRlZmF1bHQgbm9uZVxuICAgKi9cbiAgZGVmYXVsdD86IHN0cmluZztcblxuICAvKipcbiAgICogQ3VzdG9tIHRhZ3MgdGhhdCBhcmUgbm90IGFueSBvZiB0aGUgZGVmYXVsdCBvbmVzXG4gICAqXG4gICAqIEBkZWZhdWx0IG5vbmVcbiAgICovXG4gIGN1c3RvbT86IHsgW3RhZzogc3RyaW5nXTogc3RyaW5nIH07XG59XG5cbi8qKlxuICogQVBJIFN0YWJpbGl0eSBsZXZlbHMuIFRoZXNlIGFyZSBtb2RlbGVkIGFmdGVyIHRoZSBgbm9kZWAgc3RhYmlsaXR5IGluZGV4LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9kb2N1bWVudGF0aW9uLmh0bWwjZG9jdW1lbnRhdGlvbl9zdGFiaWxpdHlfaW5kZXguXG4gKi9cbmV4cG9ydCBlbnVtIFN0YWJpbGl0eSB7XG4gIC8qKlxuICAgKiBUaGUgQVBJIG1heSBlbWl0IHdhcm5pbmdzLiBCYWNrd2FyZCBjb21wYXRpYmlsaXR5IGlzIG5vdCBndWFyYW50ZWVkLlxuICAgKlxuICAgKiBNb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkZXByZWNhdGlvbiBjYW4gdXN1YWxseSBiZSBmb3VuZCBpbiB0aGVcbiAgICogYGRlcHJlY2F0ZWRgIGZpZWxkLlxuICAgKi9cbiAgRGVwcmVjYXRlZCA9ICdkZXByZWNhdGVkJyxcblxuICAvKipcbiAgICogVGhpcyBBUEkgaXMgc3RpbGwgdW5kZXIgYWN0aXZlIGRldmVsb3BtZW50IGFuZCBzdWJqZWN0IHRvIG5vbi1iYWNrd2FyZFxuICAgKiBjb21wYXRpYmxlIGNoYW5nZXMgb3IgcmVtb3ZhbCBpbiBhbnkgZnV0dXJlIHZlcnNpb24uIFVzZSBvZiB0aGUgQVBJIGlzXG4gICAqIG5vdCByZWNvbW1lbmRlZCBpbiBwcm9kdWN0aW9uIGVudmlyb25tZW50cy4gRXhwZXJpbWVudGFsIEFQSXMgYXJlIG5vdFxuICAgKiBzdWJqZWN0IHRvIHRoZSBTZW1hbnRpYyBWZXJzaW9uaW5nIG1vZGVsLlxuICAgKi9cbiAgRXhwZXJpbWVudGFsID0gJ2V4cGVyaW1lbnRhbCcsXG5cbiAgLyoqXG4gICAqIFRoaXMgQVBJIGlzIHN1YmplY3QgdG8gdGhlIFNlbWFudGljIFZlcnNpb25pbmcgbW9kZWwgYW5kIG1heSBub3QgY2hhbmdlXG4gICAqIGluIGJyZWFraW5nIHdheXMgaW4gYSBzdWJzZXF1ZW50IG1pbm9yIG9yIHBhdGNoIHZlcnNpb24uXG4gICAqL1xuICBTdGFibGUgPSAnc3RhYmxlJyxcblxuICAvKipcbiAgICogVGhpcyBBUEkgaXMgYW4gcmVwcmVzZW50YXRpb24gb2YgYW4gQVBJIG1hbmFnZWQgZWxzZXdoZXJlIGFuZCBmb2xsb3dzXG4gICAqIHRoZSBvdGhlciBBUEkncyB2ZXJzaW9uaW5nIG1vZGVsLlxuICAgKi9cbiAgRXh0ZXJuYWwgPSAnZXh0ZXJuYWwnLFxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIGVudGl0eSBpcyBkb2N1bWVudGFibGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRhYmxlIHtcbiAgLyoqXG4gICAqIERvY3VtZW50YXRpb24gZm9yIHRoaXMgZW50aXR5LlxuICAgKlxuICAgKiBAZGVmYXVsdCBub25lXG4gICAqL1xuICBkb2NzPzogRG9jcztcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCBhbiBlbnRpdHkgaGFzIGEgc291cmNlIGxvY2F0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU291cmNlTG9jYXRhYmxlIHtcbiAgLyoqXG4gICAqIFdoZXJlIGluIHRoZSBtb2R1bGUgdGhpcyBkZWZpbml0aW9uIHdhcyBmb3VuZFxuICAgKlxuICAgKiBXaHkgaXMgdGhpcyBub3QgYGxvY2F0aW9uSW5Bc3NlbWJseWA/IEJlY2F1c2UgdGhlIGFzc2VtYmx5IGlzIHRoZSBKU0lJXG4gICAqIGZpbGUgY29tYmluaW5nIGNvbXBpbGVkIGNvZGUgYW5kIGl0cyBtYW5pZmVzdCwgd2hlcmVhcyB0aGlzIGlzIHJlZmVycmluZ1xuICAgKiB0byB0aGUgbG9jYXRpb24gb2YgdGhlIHNvdXJjZSBpbiB0aGUgbW9kdWxlIHRoZSBhc3NlbWJseSB3YXMgYnVpbHQgZnJvbS5cbiAgICpcbiAgICogQGRlZmF1bHQgbm9uZVxuICAgKi9cbiAgbG9jYXRpb25Jbk1vZHVsZT86IFNvdXJjZUxvY2F0aW9uO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGEganNpaSBlbnRpdHkncyBvcmlnaW4gY2FuIGJlIHRyYWNlZCB0byBUeXBlU2NyaXB0IGNvZGVcbiAqXG4gKiBUaGlzIGlzIGludGVyZmFjZSBpcyBub3QgdGhlIHNhbWUgYXMgYFNvdXJjZUxvY2F0YWJsZWAuIFNvdXJjZUxvY2F0YWJsZVxuICogaWRlbnRpZmllcyBsaW5lcyBpbiBzb3VyY2UgZmlsZXMgaW4gYSBzb3VyY2UgcmVwb3NpdG9yeSAoaW4gYSBgLnRzYCBmaWxlLFxuICogd2l0aCByZXNwZWN0IHRvIGEgZ2l0IHJvb3QpLlxuICpcbiAqIE9uIHRoZSBvdGhlciBoYW5kLCBgVHlwZVNjcmlwdExvY2F0YWJsZWAgaWRlbnRpZmllcyBhIHN5bWJvbCBuYW1lIGluc2lkZSBhXG4gKiBwb3RlbnRpYWxseSBkaXN0cmlidXRlZCBUeXBlU2NyaXB0IGZpbGUgKGluIGVpdGhlciBhIGAuZC50c2Agb3IgYC50c2BcbiAqIGZpbGUsIHdpdGggcmVzcGVjdCB0byB0aGUgcGFja2FnZSByb290KS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUeXBlU2NyaXB0TG9jYXRhYmxlIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGNvcnJlc3BvbmRpbmcgVHlwZXNjcmlwdCBzeW1ib2xcbiAgICpcbiAgICogVXNlZCB0byBtYXAgZnJvbSBUeXBlU2NyaXB0IGNvZGUgYmFjayBpbnRvIHRoZSBhc3NlbWJseS5cbiAgICovXG4gIHN5bWJvbElkPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEtpbmRzIG9mIGNvbGxlY3Rpb25zLlxuICovXG5leHBvcnQgZW51bSBDb2xsZWN0aW9uS2luZCB7XG4gIC8qKlxuICAgKiBBbiBhcnJheSwgb3IgYSBsaXN0IG9mIHNvbWUgZWxlbWVudCB0eXBlLlxuICAgKi9cbiAgQXJyYXkgPSAnYXJyYXknLFxuICAvKipcbiAgICogQSBtYXAgb2YgYSBzdHJpbmcgdG8gc29tZSBlbGVtZW50IHR5cGUuXG4gICAqL1xuICBNYXAgPSAnbWFwJyxcbn1cblxuLyoqXG4gKiBLaW5kcyBvZiBwcmltaXRpdmUgdHlwZXMuXG4gKi9cbmV4cG9ydCBlbnVtIFByaW1pdGl2ZVR5cGUge1xuICAvKipcbiAgICogQSBKU09OIGRhdGUgKHJlcHJlc2VudGVkIGFzIGl0J3MgSVNPLTg2MDEgc3RyaW5nIGZvcm0pLlxuICAgKi9cbiAgRGF0ZSA9ICdkYXRlJyxcblxuICAvKipcbiAgICogQSBwbGFpbiBzdHJpbmcuXG4gICAqL1xuICBTdHJpbmcgPSAnc3RyaW5nJyxcblxuICAvKipcbiAgICogQSBudW1iZXIgKGludGVnZXIgb3IgZmxvYXQpLlxuICAgKi9cbiAgTnVtYmVyID0gJ251bWJlcicsXG5cbiAgLyoqXG4gICAqIEEgYm9vbGVhbiB2YWx1ZS5cbiAgICovXG4gIEJvb2xlYW4gPSAnYm9vbGVhbicsXG5cbiAgLyoqXG4gICAqIEEgSlNPTiBvYmplY3RcbiAgICovXG4gIEpzb24gPSAnanNvbicsXG5cbiAgLyoqXG4gICAqIFZhbHVlIHdpdGggXCJhbnlcIiBvciBcInVua25vd25cIiB0eXBlIChha2EgT2JqZWN0KS4gVmFsdWVzIHR5cGVkIGBhbnlgIG1heVxuICAgKiBiZSBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBBbnkgPSAnYW55Jyxcbn1cblxuLyoqXG4gKiBBIHZhbHVlIHRoYXQgY2FuIHBvc3NpYmx5IGJlIG9wdGlvbmFsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE9wdGlvbmFsVmFsdWUge1xuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSB2YWx1ZSBpcywgaW5kZWVkLCBvcHRpb25hbC5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG9wdGlvbmFsPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIGRlY2xhcmVkIHR5cGUgb2YgdGhlIHZhbHVlLCB3aGVuIGl0J3MgcHJlc2VudC5cbiAgICovXG4gIHR5cGU6IFR5cGVSZWZlcmVuY2U7XG59XG5cbi8qKlxuICogQSByZWZlcmVuY2UgdG8gYSB0eXBlIChwcmltaXRpdmUsIGNvbGxlY3Rpb24gb3IgZnFuKS5cbiAqL1xuZXhwb3J0IHR5cGUgVHlwZVJlZmVyZW5jZSA9XG4gIHwgTmFtZWRUeXBlUmVmZXJlbmNlXG4gIHwgUHJpbWl0aXZlVHlwZVJlZmVyZW5jZVxuICB8IENvbGxlY3Rpb25UeXBlUmVmZXJlbmNlXG4gIHwgVW5pb25UeXBlUmVmZXJlbmNlO1xuXG4vKipcbiAqIFRoZSBzdGFuZGFyZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgYGFueWAgdHlwZSAoaW5jbHVkZXMgb3B0aW9uYWxpdHkgbWFya2VyKS5cbiAqL1xuZXhwb3J0IGNvbnN0IENBTk9OSUNBTF9BTlk6IFJlYWRvbmx5PFByaW1pdGl2ZVR5cGVSZWZlcmVuY2U+ID0ge1xuICBwcmltaXRpdmU6IFByaW1pdGl2ZVR5cGUuQW55LFxufTtcblxuLyoqXG4gKiBSZWZlcmVuY2UgdG8gYSBuYW1lZCB0eXBlLCBkZWZpbmVkIGJ5IHRoaXMgYXNzZW1ibHkgb3Igb25lIG9mIGl0c1xuICogZGVwZW5kZW5jaWVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5hbWVkVHlwZVJlZmVyZW5jZSB7XG4gIC8qKlxuICAgKiBUaGUgZnVsbHktcXVhbGlmaWVkLW5hbWUgb2YgdGhlIHR5cGUgKGNhbiBiZSBsb2NhdGVkIGluIHRoZVxuICAgKiBgYHNwZWMudHlwZXNbZnFuXWBgYCBvZiB0aGUgYXNzZW1ibHkgdGhhdCBkZWZpbmVzIHRoZSB0eXBlKS5cbiAgICovXG4gIGZxbjogRlFOO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTmFtZWRUeXBlUmVmZXJlbmNlKFxuICByZWY6IFR5cGVSZWZlcmVuY2UgfCB1bmRlZmluZWQsXG4pOiByZWYgaXMgTmFtZWRUeXBlUmVmZXJlbmNlIHtcbiAgcmV0dXJuICEhKHJlZiBhcyBOYW1lZFR5cGVSZWZlcmVuY2UpPy5mcW47XG59XG5cbi8qKlxuICogUmVmZXJlbmNlIHRvIGEgcHJpbWl0aXZlIHR5cGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJpbWl0aXZlVHlwZVJlZmVyZW5jZSB7XG4gIC8qKlxuICAgKiBJZiB0aGlzIGlzIGEgcmVmZXJlbmNlIHRvIGEgcHJpbWl0aXZlIHR5cGUsIHRoaXMgd2lsbCBpbmNsdWRlIHRoZVxuICAgKiBwcmltaXRpdmUgdHlwZSBraW5kLlxuICAgKi9cbiAgcHJpbWl0aXZlOiBQcmltaXRpdmVUeXBlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWl0aXZlVHlwZVJlZmVyZW5jZShcbiAgcmVmOiBUeXBlUmVmZXJlbmNlIHwgdW5kZWZpbmVkLFxuKTogcmVmIGlzIFByaW1pdGl2ZVR5cGVSZWZlcmVuY2Uge1xuICByZXR1cm4gISEocmVmIGFzIFByaW1pdGl2ZVR5cGVSZWZlcmVuY2UpPy5wcmltaXRpdmU7XG59XG5cbi8qKlxuICogUmVmZXJlbmNlIHRvIGEgY29sbGVjdGlvbiB0eXBlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbGxlY3Rpb25UeXBlUmVmZXJlbmNlIHtcbiAgY29sbGVjdGlvbjoge1xuICAgIC8qKlxuICAgICAqIFRoZSBraW5kIG9mIGNvbGxlY3Rpb24uXG4gICAgICovXG4gICAga2luZDogQ29sbGVjdGlvbktpbmQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBhbiBlbGVtZW50IChtYXAga2V5cyBhcmUgYWx3YXlzIHN0cmluZ3MpLlxuICAgICAqL1xuICAgIGVsZW1lbnR0eXBlOiBUeXBlUmVmZXJlbmNlO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29sbGVjdGlvblR5cGVSZWZlcmVuY2UoXG4gIHJlZjogVHlwZVJlZmVyZW5jZSB8IHVuZGVmaW5lZCxcbik6IHJlZiBpcyBDb2xsZWN0aW9uVHlwZVJlZmVyZW5jZSB7XG4gIHJldHVybiAhIShyZWYgYXMgQ29sbGVjdGlvblR5cGVSZWZlcmVuY2UpPy5jb2xsZWN0aW9uO1xufVxuXG4vKipcbiAqIFJlZmVyZW5jZSB0byBhIHVuaW9uIHR5cGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVW5pb25UeXBlUmVmZXJlbmNlIHtcbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGF0IHRoaXMgaXMgYSB1bmlvbiB0eXBlLCB3aGljaCBtZWFucyBpdCBjYW4gYmUgb25lIG9mIGEgc2V0XG4gICAqIG9mIHR5cGVzLlxuICAgKi9cbiAgdW5pb246IHtcbiAgICAvKipcbiAgICAgKiBBbGwgdGhlIHBvc3NpYmxlIHR5cGVzIChpbmNsdWRpbmcgdGhlIHByaW1hcnkgdHlwZSkuXG4gICAgICpcbiAgICAgKiBAbWluSXRlbXMgMlxuICAgICAqL1xuICAgIHR5cGVzOiBUeXBlUmVmZXJlbmNlW107XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gaXNVbmlvblR5cGVSZWZlcmVuY2UoXG4gIHJlZjogVHlwZVJlZmVyZW5jZSB8IHVuZGVmaW5lZCxcbik6IHJlZiBpcyBVbmlvblR5cGVSZWZlcmVuY2Uge1xuICByZXR1cm4gISEocmVmIGFzIFVuaW9uVHlwZVJlZmVyZW5jZSk/LnVuaW9uO1xufVxuXG4vKipcbiAqIE1ldGhvZHMgYW5kIHByb3BlcnRpZXMgY2FuIGJlIG92ZXJyaWRkZW4gZnJvbSBwYXJlbnQgY2xhc3NlcyBvciBpbXBsZW1lbnRlZFxuICogZnJvbSBpbnRlcmZhY2VzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJyaWRhYmxlIHtcbiAgLyoqXG4gICAqIFRoZSBGUU4gb2YgdGhlIHBhcmVudCB0eXBlIChjbGFzcyBvciBpbnRlcmZhY2UpIHRoYXQgdGhpcyBlbnRpdHlcbiAgICogb3ZlcnJpZGVzIG9yIGltcGxlbWVudHMuIElmIHVuZGVmaW5lZCwgdGhlbiB0aGlzIGVudGl0eSBpcyB0aGUgZmlyc3QgaW5cbiAgICogaXQncyBoaWVyYXJjaHkgdG8gZGVjbGFyZSB0aGlzIGVudGl0eS5cbiAgICpcbiAgICogQGRlZmF1bHQgdGhpcyBtZW1iZXIgaXMgbm90IG92ZXJyaWRpbmcgYW55dGhpbmdcbiAgICovXG4gIG92ZXJyaWRlcz86IEZRTjtcbn1cblxuLyoqXG4gKiBBIGNsYXNzIHByb3BlcnR5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb3BlcnR5XG4gIGV4dGVuZHMgRG9jdW1lbnRhYmxlLFxuICAgIE9wdGlvbmFsVmFsdWUsXG4gICAgT3ZlcnJpZGFibGUsXG4gICAgU291cmNlTG9jYXRhYmxlIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQG1pbkxlbmd0aCAxXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB0aGlzIHByb3BlcnR5IG9ubHkgaGFzIGEgZ2V0dGVyIChpbW11dGFibGUpLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW1tdXRhYmxlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoaXMgcHJvcGVydHkgaXMgcHJvdGVjdGVkIChvdGhlcndpc2UgaXQgaXMgcHVibGljKVxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcHJvdGVjdGVkPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoaXMgcHJvcGVydHkgaXMgYWJzdHJhY3RcbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFic3RyYWN0PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoaXMgaXMgYSBzdGF0aWMgcHJvcGVydHkuXG4gICAqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzdGF0aWM/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBIGhpbnQgdGhhdCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHN0YXRpYywgaW1tdXRhYmxlIHByb3BlcnR5IGlzIGluaXRpYWxpemVkXG4gICAqIGR1cmluZyBzdGFydHVwLiBUaGlzIGFsbG93cyBlbWl0dGluZyBcImNvbnN0XCIgaWRpb21zIGluIGRpZmZlcmVudCB0YXJnZXRcbiAgICogbGFuZ3VhZ2VzLiBJbXBsaWVzIGBzdGF0aWNgIGFuZCBgaW1tdXRhYmxlYC5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGNvbnN0PzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgbWV0aG9kIHBhcmFtZXRlci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXJhbWV0ZXIgZXh0ZW5kcyBEb2N1bWVudGFibGUsIE9wdGlvbmFsVmFsdWUge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlci5cbiAgICpcbiAgICogQG1pbkxlbmd0aCAxXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBpcyB0aGUgbGFzdCBwYXJhbWV0ZXIgb2YgYSB2YXJpYWRpYyBtZXRob2QuIEluIHN1Y2ggY2FzZXMsXG4gICAqIHRoZSBgI3R5cGVgIGF0dHJpYnV0ZSBpcyB0aGUgdHlwZSBvZiBlYWNoIGluZGl2aWR1YWwgaXRlbSBvZiB0aGUgdmFyaWFkaWNcbiAgICogYXJndW1lbnRzIGxpc3QgKGFzIG9wcG9zZWQgdG8gc29tZSBhcnJheSB0eXBlLCBhcyBmb3IgZXhhbXBsZSBUeXBlU2NyaXB0XG4gICAqIHdvdWxkIG1vZGVsIGl0KS5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHZhcmlhZGljPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBBbiBJbml0aWFsaXplciBvciBhIE1ldGhvZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDYWxsYWJsZSBleHRlbmRzIERvY3VtZW50YWJsZSwgT3ZlcnJpZGFibGUsIFNvdXJjZUxvY2F0YWJsZSB7XG4gIC8qKlxuICAgKiBUaGUgcGFyYW1ldGVycyBvZiB0aGUgSW5pdGlhbGl6ZXIgb3IgTWV0aG9kLlxuICAgKlxuICAgKiBAZGVmYXVsdCBub25lXG4gICAqL1xuICBwYXJhbWV0ZXJzPzogUGFyYW1ldGVyW107XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB0aGlzIEluaXRpYWxpemVyIG9yIE1ldGhvZCBpcyBwcm90ZWN0ZWQgKG90aGVyd2lzZSBpdCBpc1xuICAgKiBwdWJsaWMsIHNpbmNlIHByaXZhdGUgbWVtYmVycyBhcmUgbm90IG1vZGVsZWQpLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcHJvdGVjdGVkPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBJbml0aWFsaXplciBvciBNZXRob2QgaXMgdmFyaWFkaWMgb3Igbm90LiBXaGVuXG4gICAqIGBgdHJ1ZWBgLCB0aGUgbGFzdCBlbGVtZW50IG9mIGBgI3BhcmFtZXRlcnNgYCB3aWxsIGFsc28gYmUgZmxhZ2dlZFxuICAgKiBgYCN2YXJpYWRpY2BgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdmFyaWFkaWM/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEFuIGluaXRpYWxpemVyLlxuICovXG5leHBvcnQgdHlwZSBJbml0aWFsaXplciA9IENhbGxhYmxlO1xuXG4vKipcbiAqIEEgbWV0aG9kIHdpdGggYSBuYW1lIChpLmU6IG5vdCBhbiBpbml0aWFsaXplcikuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWV0aG9kIGV4dGVuZHMgQ2FsbGFibGUge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIG1ldGhvZC4gVW5kZWZpbmVkIGlmIHRoaXMgbWV0aG9kIGlzIGEgaW5pdGlhbGl6ZXIuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSByZXR1cm4gdHlwZSBvZiB0aGUgbWV0aG9kIChgdW5kZWZpbmVkYCBpZiBgdm9pZGApXG4gICAqXG4gICAqIEBkZWZhdWx0IHZvaWRcbiAgICovXG4gIHJldHVybnM/OiBPcHRpb25hbFZhbHVlO1xuXG4gIC8qKlxuICAgKiBJcyB0aGlzIG1ldGhvZCBhbiBhYnN0cmFjdCBtZXRob2QgKHRoaXMgbWVhbnMgdGhlIGNsYXNzIHdpbGwgYWxzbyBiZSBhbiBhYnN0cmFjdCBjbGFzcylcbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFic3RyYWN0PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoaXMgaXMgYW4gYXN5bmNocm9ub3VzIG1ldGhvZCAoaXQgd2lsbCByZXR1cm4gYSBwcm9taXNlKS5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFzeW5jPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoaXMgaXMgYSBzdGF0aWMgbWV0aG9kLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgc3RhdGljPzogYm9vbGVhbjtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgQ2FsbGFibGUgaXMgYSBNZXRob2Qgb3Igbm90LlxuICpcbiAqIEBwYXJhbSBjYWxsYWJsZSB0aGUgY2FsbGFibGUgdG8gYmUgY2hlY2tlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTWV0aG9kKGNhbGxhYmxlOiBDYWxsYWJsZSk6IGNhbGxhYmxlIGlzIE1ldGhvZCB7XG4gIHJldHVybiAhIShjYWxsYWJsZSBhcyBNZXRob2QpLm5hbWU7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHR5cGUgZGVmaW5pdGlvbiAobm90IGEgdHlwZSByZWZlcmVuY2UpLlxuICovXG5leHBvcnQgdHlwZSBUeXBlID0gVHlwZUJhc2UgJiAoQ2xhc3NUeXBlIHwgRW51bVR5cGUgfCBJbnRlcmZhY2VUeXBlKTtcblxuLyoqXG4gKiBDb21tb24gYXR0cmlidXRlcyBvZiBhIHR5cGUgZGVmaW5pdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUeXBlQmFzZVxuICBleHRlbmRzIERvY3VtZW50YWJsZSxcbiAgICBTb3VyY2VMb2NhdGFibGUsXG4gICAgVHlwZVNjcmlwdExvY2F0YWJsZSB7XG4gIC8qKlxuICAgKiBUaGUgZnVsbHkgcXVhbGlmaWVkIG5hbWUgb2YgdGhlIHR5cGUgKGBgPGFzc2VtYmx5Pi48bmFtZXNwYWNlPi48bmFtZT5gYClcbiAgICpcbiAgICogQG1pbkxlbmd0aCAzXG4gICAqL1xuICBmcW46IEZRTjtcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGFzc2VtYmx5IHRoZSB0eXBlIGJlbG9uZ3MgdG8uXG4gICAqXG4gICAqIEBtaW5MZW5ndGggMVxuICAgKi9cbiAgYXNzZW1ibHk6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG5hbWVzcGFjZSBvZiB0aGUgdHlwZSAoYGZvby5iYXIuYmF6YCkuXG4gICAqXG4gICAqIFdoZW4gdW5kZWZpbmVkLCB0aGUgdHlwZSBpcyBsb2NhdGVkIGF0IHRoZSByb290IG9mIHRoZSBhc3NlbWJseSAoaXRzXG4gICAqIGBmcW5gIHdvdWxkIGJlIGxpa2UgYDxhc3NlbWJseT4uPG5hbWU+YCkuXG4gICAqXG4gICAqIEZvciB0eXBlcyBpbnNpZGUgb3RoZXIgdHlwZXMgb3IgaW5zaWRlIHN1Ym1vZHVsZXMsIHRoZSBgPG5hbWVzcGFjZT5gIGNvcnJlc3BvbmRzIHRvXG4gICAqIHRoZSBuYW1lc3BhY2UtcXVhbGlmaWVkIG5hbWUgb2YgdGhlIGNvbnRhaW5lciAoY2FuIGNvbnRhaW4gbXVsdGlwbGUgc2VnbWVudHMgbGlrZTpcbiAgICogYDxuczE+LjxuczI+LjxuczM+YCkuXG4gICAqXG4gICAqIEluIGFsbCBjYXNlczpcbiAgICpcbiAgICogIDxmcW4+ID0gPGFzc2VtYmx5PlsuPG5hbWVzcGFjZT5dLjxuYW1lPlxuICAgKlxuICAgKiBAZGVmYXVsdCBub25lXG4gICAqL1xuICBuYW1lc3BhY2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBzaW1wbGUgbmFtZSBvZiB0aGUgdHlwZSAoTXlDbGFzcykuXG4gICAqXG4gICAqIEBtaW5MZW5ndGggMVxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUga2luZCBvZiB0aGUgdHlwZS5cbiAgICovXG4gIGtpbmQ6IFR5cGVLaW5kO1xufVxuXG4vKipcbiAqIEtpbmRzIG9mIHR5cGVzLlxuICovXG5leHBvcnQgZW51bSBUeXBlS2luZCB7XG4gIENsYXNzID0gJ2NsYXNzJyxcbiAgRW51bSA9ICdlbnVtJyxcbiAgSW50ZXJmYWNlID0gJ2ludGVyZmFjZScsXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBjbGFzc2VzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzVHlwZSBleHRlbmRzIFR5cGVCYXNlIHtcbiAga2luZDogVHlwZUtpbmQuQ2xhc3M7XG5cbiAgLyoqXG4gICAqIFRoZSBGUU4gb2YgdGhlIGJhc2UgY2xhc3Mgb2YgdGhpcyBjbGFzcywgaWYgaXQgaGFzIG9uZS5cbiAgICpcbiAgICogQGRlZmF1bHQgbm8gYmFzZSBjbGFzc1xuICAgKi9cbiAgYmFzZT86IEZRTjtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXIgKGNvbnN0cnVjdG9yKSBtZXRob2QuXG4gICAqXG4gICAqIEBkZWZhdWx0IG5vIGluaXRpYWxpemVyXG4gICAqL1xuICBpbml0aWFsaXplcj86IEluaXRpYWxpemVyO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIEBkZWZhdWx0IG5vbmVcbiAgICovXG4gIHByb3BlcnRpZXM/OiBQcm9wZXJ0eVtdO1xuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1ldGhvZHMuXG4gICAqXG4gICAqIEBkZWZhdWx0IG5vbmVcbiAgICovXG4gIG1ldGhvZHM/OiBNZXRob2RbXTtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoaXMgY2xhc3MgaXMgYW4gYWJzdHJhY3QgY2xhc3MuXG4gICAqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhYnN0cmFjdD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBGUU5zIG9mIHRoZSBpbnRlcmZhY2VzIHRoaXMgY2xhc3MgaW1wbGVtZW50cywgaWYgYW55LlxuICAgKlxuICAgKiBAZGVmYXVsdCBub25lXG4gICAqIEB1bmlxdWVJdGVtcyB0cnVlXG4gICAqL1xuICBpbnRlcmZhY2VzPzogRlFOW107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NsYXNzVHlwZSh0eXBlOiBUeXBlIHwgdW5kZWZpbmVkKTogdHlwZSBpcyBDbGFzc1R5cGUge1xuICByZXR1cm4gdHlwZT8ua2luZCA9PT0gVHlwZUtpbmQuQ2xhc3M7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW50ZXJmYWNlVHlwZSBleHRlbmRzIFR5cGVCYXNlIHtcbiAga2luZDogVHlwZUtpbmQuSW50ZXJmYWNlO1xuXG4gIC8qKlxuICAgKiBUaGUgRlFOcyBvZiB0aGUgaW50ZXJmYWNlcyB0aGlzIGludGVyZmFjZSBleHRlbmRzLCBpZiBhbnkuXG4gICAqXG4gICAqIEBkZWZhdWx0IG5vbmVcbiAgICogQHVuaXF1ZUl0ZW1zIHRydWVcbiAgICovXG4gIGludGVyZmFjZXM/OiBGUU5bXTtcblxuICAvKipcbiAgICogTGlzdCBvZiBtZXRob2RzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBub25lXG4gICAqL1xuICBtZXRob2RzPzogTWV0aG9kW107XG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgcHJvcGVydGllcy5cbiAgICpcbiAgICogQGRlZmF1bHQgbm9uZVxuICAgKi9cbiAgcHJvcGVydGllcz86IFByb3BlcnR5W107XG5cbiAgLyoqXG4gICAqIFRydWUgaWYgdGhpcyBpbnRlcmZhY2Ugb25seSBjb250YWlucyBwcm9wZXJ0aWVzLiBEaWZmZXJlbnQgYmFja2VuZHMgbWlnaHRcbiAgICogaGF2ZSBpZGlvbWF0aWMgd2F5cyB0byBhbGxvdyBkZWZpbmluZyBjb25jcmV0ZSBpbnN0YW5jZXMgc3VjaCBpbnRlcmZhY2VzLlxuICAgKiBGb3IgZXhhbXBsZSwgaW4gSmF2YSwgdGhlIGdlbmVyYXRvciB3aWxsIHByb2R1Y2UgYSBQb0pvIGFuZCBhIGJ1aWxkZXJcbiAgICogd2hpY2ggd2lsbCBhbGxvdyB1c2VycyB0byBjcmVhdGUgYSBjb25jcmV0ZSBvYmplY3Qgd2l0aCBkYXRhIHdoaWNoXG4gICAqIGFkaGVyZXMgdG8gdGhpcyBpbnRlcmZhY2UuXG4gICAqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkYXRhdHlwZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyZmFjZVR5cGUodHlwZTogVHlwZSB8IHVuZGVmaW5lZCk6IHR5cGUgaXMgSW50ZXJmYWNlVHlwZSB7XG4gIHJldHVybiB0eXBlPy5raW5kID09PSBUeXBlS2luZC5JbnRlcmZhY2U7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIG1lbWJlciBvZiBhbiBlbnVtLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVudW1NZW1iZXIgZXh0ZW5kcyBEb2N1bWVudGFibGUge1xuICAvKipcbiAgICogVGhlIG5hbWUvc3ltYm9sIG9mIHRoZSBtZW1iZXIuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBlbnVtIHR5cGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRW51bVR5cGUgZXh0ZW5kcyBUeXBlQmFzZSB7XG4gIGtpbmQ6IFR5cGVLaW5kLkVudW07XG5cbiAgLyoqXG4gICAqIE1lbWJlcnMgb2YgdGhlIGVudW0uXG4gICAqL1xuICBtZW1iZXJzOiBFbnVtTWVtYmVyW107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VudW1UeXBlKHR5cGU6IFR5cGUgfCB1bmRlZmluZWQpOiB0eXBlIGlzIEVudW1UeXBlIHtcbiAgcmV0dXJuIHR5cGU/LmtpbmQgPT09IFR5cGVLaW5kLkVudW07XG59XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgdGhpcyB0eXBlIGlzIGEgY2xhc3Mgb3IgaW50ZXJmYWNlIHR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ2xhc3NPckludGVyZmFjZVR5cGUoXG4gIHR5cGU6IFR5cGUgfCB1bmRlZmluZWQsXG4pOiB0eXBlIGlzIEludGVyZmFjZVR5cGUgfCBDbGFzc1R5cGUge1xuICByZXR1cm4gaXNDbGFzc1R5cGUodHlwZSkgfHwgaXNJbnRlcmZhY2VUeXBlKHR5cGUpO1xufVxuXG4vKipcbiAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gdHlwZSByZWZlcmVuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXNjcmliZVR5cGVSZWZlcmVuY2UodHlwZT86IFR5cGVSZWZlcmVuY2UpOiBzdHJpbmcge1xuICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuICd2b2lkJztcbiAgfVxuXG4gIGlmIChpc05hbWVkVHlwZVJlZmVyZW5jZSh0eXBlKSkge1xuICAgIHJldHVybiB0eXBlLmZxbjtcbiAgfVxuXG4gIGlmIChpc1ByaW1pdGl2ZVR5cGVSZWZlcmVuY2UodHlwZSkpIHtcbiAgICByZXR1cm4gdHlwZS5wcmltaXRpdmU7XG4gIH1cblxuICBpZiAoaXNDb2xsZWN0aW9uVHlwZVJlZmVyZW5jZSh0eXBlKSkge1xuICAgIHJldHVybiBgJHt0eXBlLmNvbGxlY3Rpb24ua2luZH08JHtkZXNjcmliZVR5cGVSZWZlcmVuY2UoXG4gICAgICB0eXBlLmNvbGxlY3Rpb24uZWxlbWVudHR5cGUsXG4gICAgKX0+YDtcbiAgfVxuXG4gIGlmIChpc1VuaW9uVHlwZVJlZmVyZW5jZSh0eXBlKSkge1xuICAgIGNvbnN0IHVuaW9uVHlwZSA9IHR5cGUudW5pb24udHlwZXMubWFwKGRlc2NyaWJlVHlwZVJlZmVyZW5jZSkuam9pbignIHwgJyk7XG4gICAgcmV0dXJuIHVuaW9uVHlwZTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignVW5yZWNvZ25pemVkIHR5cGUgcmVmZXJlbmNlJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGFuIGVudGl0eSBpcyBkZXByZWNhdGVkLlxuICpcbiAqIEBwYXJhbSBlbnRpdHkgdGhlIGVudGl0eSB0byBiZSBjaGVja2VkLlxuICpcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGVudGl0eSBpcyBtYXJrZWQgYXMgZGVwcmVjYXRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGVwcmVjYXRlZChlbnRpdHk6IERvY3VtZW50YWJsZSk6IGJvb2xlYW4ge1xuICByZXR1cm4gZW50aXR5Py5kb2NzPy5zdGFiaWxpdHkgPT09IFN0YWJpbGl0eS5EZXByZWNhdGVkO1xufVxuIl19