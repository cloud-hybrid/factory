"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const esbuild = require("esbuild");
const fs = __importStar(require("fs-extra"));
// Taken from https://github.com/evanw/esbuild/issues/1051#issuecomment-806325487 to deal with `fsevents`
const nativeNodeModulesPlugin = {
    name: "native-node-modules",
    setup(build) {
        // If a ".node" file is imported within a module in the "file" namespace, resolve
        // it to an absolute path and put it into the "node-file" virtual namespace.
        build.onResolve({ filter: /\.node$/, namespace: "file" }, (args) => ({
            path: require.resolve(args.path, { paths: [args.resolveDir] }),
            namespace: "node-file",
        }));
        // Files in the "node-file" virtual namespace call "require()" on the
        // path from esbuild of the ".node" file in the output directory.
        build.onLoad({ filter: /.*/, namespace: "node-file" }, (args) => ({
            contents: `
        import path from ${JSON.stringify(args.path)}
        try { module.exports = require(path) }
        catch {}
      `,
        }));
        // If a ".node" file is imported within a module in the "node-file" namespace, put
        // it in the "file" namespace where esbuild's default loading behavior will handle
        // it. It is already an absolute path since we resolved it to one above.
        build.onResolve({ filter: /\.node$/, namespace: "node-file" }, (args) => ({
            path: args.path,
            namespace: "file",
        }));
        // Tell esbuild's default loading behavior to use the "file" loader for
        // these ".node" files.
        const opts = build.initialOptions;
        opts.loader = opts.loader || {};
        opts.loader[".node"] = "file";
    },
};
(async () => {
    await esbuild.build({
        entryPoints: ["./bin/cdktf.ts", "./lib/server/server.ts"],
        bundle: true,
        outdir: "./bundle",
        format: "cjs",
        target: "node12",
        minify: true,
        sourcemap: true,
        platform: "node",
        external: [
            "jsii",
            "jsii-pacmak",
            "@cdktf/hcl2json",
            "yargs",
            "cdktf",
            "@cdktf/hcl2cdk",
            "constructs",
        ],
        plugins: [nativeNodeModulesPlugin],
        tsconfig: "tsconfig.json",
    });
    fs.copySync("./bin/cdktf", "./bundle/bin/cdktf");
    fs.copySync("./lib/server/schema.graphql", "./bundle/lib/server/schema.graphql");
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJidWlsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbkMsNkNBQStCO0FBRS9CLHlHQUF5RztBQUN6RyxNQUFNLHVCQUF1QixHQUFHO0lBQzlCLElBQUksRUFBRSxxQkFBcUI7SUFFM0IsS0FBSyxDQUFDLEtBQVU7UUFDZCxpRkFBaUY7UUFDakYsNEVBQTRFO1FBQzVFLEtBQUssQ0FBQyxTQUFTLENBQ2IsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsRUFDeEMsQ0FBQyxJQUEwQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLElBQUksRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztZQUM5RCxTQUFTLEVBQUUsV0FBVztTQUN2QixDQUFDLENBQ0gsQ0FBQztRQUVGLHFFQUFxRTtRQUNyRSxpRUFBaUU7UUFDakUsS0FBSyxDQUFDLE1BQU0sQ0FDVixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxFQUN4QyxDQUFDLElBQW1CLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDeEIsUUFBUSxFQUFFOzJCQUNTLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7O09BRzdDO1NBQ0EsQ0FBQyxDQUNILENBQUM7UUFFRixrRkFBa0Y7UUFDbEYsa0ZBQWtGO1FBQ2xGLHdFQUF3RTtRQUN4RSxLQUFLLENBQUMsU0FBUyxDQUNiLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEVBQzdDLENBQUMsSUFBbUIsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixTQUFTLEVBQUUsTUFBTTtTQUNsQixDQUFDLENBQ0gsQ0FBQztRQUVGLHVFQUF1RTtRQUN2RSx1QkFBdUI7UUFDdkIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQztRQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBQ2hDLENBQUM7Q0FDRixDQUFDO0FBRUYsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNWLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQztRQUNsQixXQUFXLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSx3QkFBd0IsQ0FBQztRQUN6RCxNQUFNLEVBQUUsSUFBSTtRQUNaLE1BQU0sRUFBRSxVQUFVO1FBQ2xCLE1BQU0sRUFBRSxLQUFLO1FBQ2IsTUFBTSxFQUFFLFFBQVE7UUFDaEIsTUFBTSxFQUFFLElBQUk7UUFDWixTQUFTLEVBQUUsSUFBSTtRQUNmLFFBQVEsRUFBRSxNQUFNO1FBQ2hCLFFBQVEsRUFBRTtZQUNSLE1BQU07WUFDTixhQUFhO1lBQ2IsaUJBQWlCO1lBQ2pCLE9BQU87WUFDUCxPQUFPO1lBQ1AsZ0JBQWdCO1lBQ2hCLFlBQVk7U0FDYjtRQUNELE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDO1FBQ2xDLFFBQVEsRUFBRSxlQUFlO0tBQzFCLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDakQsRUFBRSxDQUFDLFFBQVEsQ0FDVCw2QkFBNkIsRUFDN0Isb0NBQW9DLENBQ3JDLENBQUM7QUFDSixDQUFDLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXNidWlsZCA9IHJlcXVpcmUoXCJlc2J1aWxkXCIpO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzLWV4dHJhXCI7XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2V2YW53L2VzYnVpbGQvaXNzdWVzLzEwNTEjaXNzdWVjb21tZW50LTgwNjMyNTQ4NyB0byBkZWFsIHdpdGggYGZzZXZlbnRzYFxuY29uc3QgbmF0aXZlTm9kZU1vZHVsZXNQbHVnaW4gPSB7XG4gIG5hbWU6IFwibmF0aXZlLW5vZGUtbW9kdWxlc1wiLFxuXG4gIHNldHVwKGJ1aWxkOiBhbnkpIHtcbiAgICAvLyBJZiBhIFwiLm5vZGVcIiBmaWxlIGlzIGltcG9ydGVkIHdpdGhpbiBhIG1vZHVsZSBpbiB0aGUgXCJmaWxlXCIgbmFtZXNwYWNlLCByZXNvbHZlXG4gICAgLy8gaXQgdG8gYW4gYWJzb2x1dGUgcGF0aCBhbmQgcHV0IGl0IGludG8gdGhlIFwibm9kZS1maWxlXCIgdmlydHVhbCBuYW1lc3BhY2UuXG4gICAgYnVpbGQub25SZXNvbHZlKFxuICAgICAgeyBmaWx0ZXI6IC9cXC5ub2RlJC8sIG5hbWVzcGFjZTogXCJmaWxlXCIgfSxcbiAgICAgIChhcmdzOiB7IHBhdGg6IHN0cmluZzsgcmVzb2x2ZURpcjogc3RyaW5nIH0pID0+ICh7XG4gICAgICAgIHBhdGg6IHJlcXVpcmUucmVzb2x2ZShhcmdzLnBhdGgsIHsgcGF0aHM6IFthcmdzLnJlc29sdmVEaXJdIH0pLFxuICAgICAgICBuYW1lc3BhY2U6IFwibm9kZS1maWxlXCIsXG4gICAgICB9KVxuICAgICk7XG5cbiAgICAvLyBGaWxlcyBpbiB0aGUgXCJub2RlLWZpbGVcIiB2aXJ0dWFsIG5hbWVzcGFjZSBjYWxsIFwicmVxdWlyZSgpXCIgb24gdGhlXG4gICAgLy8gcGF0aCBmcm9tIGVzYnVpbGQgb2YgdGhlIFwiLm5vZGVcIiBmaWxlIGluIHRoZSBvdXRwdXQgZGlyZWN0b3J5LlxuICAgIGJ1aWxkLm9uTG9hZChcbiAgICAgIHsgZmlsdGVyOiAvLiovLCBuYW1lc3BhY2U6IFwibm9kZS1maWxlXCIgfSxcbiAgICAgIChhcmdzOiB7IHBhdGg6IGFueSB9KSA9PiAoe1xuICAgICAgICBjb250ZW50czogYFxuICAgICAgICBpbXBvcnQgcGF0aCBmcm9tICR7SlNPTi5zdHJpbmdpZnkoYXJncy5wYXRoKX1cbiAgICAgICAgdHJ5IHsgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKHBhdGgpIH1cbiAgICAgICAgY2F0Y2gge31cbiAgICAgIGAsXG4gICAgICB9KVxuICAgICk7XG5cbiAgICAvLyBJZiBhIFwiLm5vZGVcIiBmaWxlIGlzIGltcG9ydGVkIHdpdGhpbiBhIG1vZHVsZSBpbiB0aGUgXCJub2RlLWZpbGVcIiBuYW1lc3BhY2UsIHB1dFxuICAgIC8vIGl0IGluIHRoZSBcImZpbGVcIiBuYW1lc3BhY2Ugd2hlcmUgZXNidWlsZCdzIGRlZmF1bHQgbG9hZGluZyBiZWhhdmlvciB3aWxsIGhhbmRsZVxuICAgIC8vIGl0LiBJdCBpcyBhbHJlYWR5IGFuIGFic29sdXRlIHBhdGggc2luY2Ugd2UgcmVzb2x2ZWQgaXQgdG8gb25lIGFib3ZlLlxuICAgIGJ1aWxkLm9uUmVzb2x2ZShcbiAgICAgIHsgZmlsdGVyOiAvXFwubm9kZSQvLCBuYW1lc3BhY2U6IFwibm9kZS1maWxlXCIgfSxcbiAgICAgIChhcmdzOiB7IHBhdGg6IGFueSB9KSA9PiAoe1xuICAgICAgICBwYXRoOiBhcmdzLnBhdGgsXG4gICAgICAgIG5hbWVzcGFjZTogXCJmaWxlXCIsXG4gICAgICB9KVxuICAgICk7XG5cbiAgICAvLyBUZWxsIGVzYnVpbGQncyBkZWZhdWx0IGxvYWRpbmcgYmVoYXZpb3IgdG8gdXNlIHRoZSBcImZpbGVcIiBsb2FkZXIgZm9yXG4gICAgLy8gdGhlc2UgXCIubm9kZVwiIGZpbGVzLlxuICAgIGNvbnN0IG9wdHMgPSBidWlsZC5pbml0aWFsT3B0aW9ucztcbiAgICBvcHRzLmxvYWRlciA9IG9wdHMubG9hZGVyIHx8IHt9O1xuICAgIG9wdHMubG9hZGVyW1wiLm5vZGVcIl0gPSBcImZpbGVcIjtcbiAgfSxcbn07XG5cbihhc3luYyAoKSA9PiB7XG4gIGF3YWl0IGVzYnVpbGQuYnVpbGQoe1xuICAgIGVudHJ5UG9pbnRzOiBbXCIuL2Jpbi9jZGt0Zi50c1wiLCBcIi4vbGliL3NlcnZlci9zZXJ2ZXIudHNcIl0sXG4gICAgYnVuZGxlOiB0cnVlLFxuICAgIG91dGRpcjogXCIuL2J1bmRsZVwiLFxuICAgIGZvcm1hdDogXCJjanNcIixcbiAgICB0YXJnZXQ6IFwibm9kZTEyXCIsXG4gICAgbWluaWZ5OiB0cnVlLFxuICAgIHNvdXJjZW1hcDogdHJ1ZSxcbiAgICBwbGF0Zm9ybTogXCJub2RlXCIsXG4gICAgZXh0ZXJuYWw6IFtcbiAgICAgIFwianNpaVwiLFxuICAgICAgXCJqc2lpLXBhY21ha1wiLFxuICAgICAgXCJAY2RrdGYvaGNsMmpzb25cIixcbiAgICAgIFwieWFyZ3NcIixcbiAgICAgIFwiY2RrdGZcIixcbiAgICAgIFwiQGNka3RmL2hjbDJjZGtcIixcbiAgICAgIFwiY29uc3RydWN0c1wiLFxuICAgIF0sXG4gICAgcGx1Z2luczogW25hdGl2ZU5vZGVNb2R1bGVzUGx1Z2luXSxcbiAgICB0c2NvbmZpZzogXCJ0c2NvbmZpZy5qc29uXCIsXG4gIH0pO1xuXG4gIGZzLmNvcHlTeW5jKFwiLi9iaW4vY2RrdGZcIiwgXCIuL2J1bmRsZS9iaW4vY2RrdGZcIik7XG4gIGZzLmNvcHlTeW5jKFxuICAgIFwiLi9saWIvc2VydmVyL3NjaGVtYS5ncmFwaHFsXCIsXG4gICAgXCIuL2J1bmRsZS9saWIvc2VydmVyL3NjaGVtYS5ncmFwaHFsXCJcbiAgKTtcbn0pKCk7XG4iXX0=