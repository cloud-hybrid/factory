"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logFileName = exports.processLoggerError = exports.processLoggerDebug = exports.getLogger = exports.logger = void 0;
const log4js_1 = require("log4js");
Object.defineProperty(exports, "getLogger", { enumerable: true, get: function () { return log4js_1.getLogger; } });
const logger = log4js_1.getLogger();
exports.logger = logger;
logger.level = process.env.CDKTF_LOG_LEVEL || "INFO";
const logFileName = "cdktf.log";
exports.logFileName = logFileName;
if (process.env.CDKTF_DISABLE_LOGGING === "false") {
    log4js_1.configure({
        appenders: { cdktf: { type: "file", filename: "./" + logFileName } },
        categories: { default: { appenders: ["cdktf"], level: "debug" } },
    });
}
const processLoggerDebug = (chunk) => {
    logger.debug(chunk.toString());
};
exports.processLoggerDebug = processLoggerDebug;
const processLoggerError = (chunk) => {
    logger.error(chunk.toString());
};
exports.processLoggerError = processLoggerError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvZ2dpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQThDO0FBdUI1QywwRkF2QmtCLGtCQUFTLE9BdUJsQjtBQXJCWCxNQUFNLE1BQU0sR0FBRyxrQkFBUyxFQUFFLENBQUM7QUFvQnpCLHdCQUFNO0FBbEJSLE1BQU0sQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLElBQUksTUFBTSxDQUFDO0FBRXJELE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQztBQW9COUIsa0NBQVc7QUFuQmIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixLQUFLLE9BQU8sRUFBRTtJQUNqRCxrQkFBUyxDQUFDO1FBQ1IsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxHQUFHLFdBQVcsRUFBRSxFQUFFO1FBQ3BFLFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRTtLQUNsRSxDQUFDLENBQUM7Q0FDSjtBQUVELE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxLQUFtQyxFQUFFLEVBQUU7SUFDakUsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNqQyxDQUFDLENBQUM7QUFRQSxnREFBa0I7QUFQcEIsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEtBQW1DLEVBQUUsRUFBRTtJQUNqRSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQztBQU1BLGdEQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmZpZ3VyZSwgZ2V0TG9nZ2VyIH0gZnJvbSBcImxvZzRqc1wiO1xuXG5jb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoKTtcblxubG9nZ2VyLmxldmVsID0gcHJvY2Vzcy5lbnYuQ0RLVEZfTE9HX0xFVkVMIHx8IFwiSU5GT1wiO1xuXG5jb25zdCBsb2dGaWxlTmFtZSA9IFwiY2RrdGYubG9nXCI7XG5pZiAocHJvY2Vzcy5lbnYuQ0RLVEZfRElTQUJMRV9MT0dHSU5HID09PSBcImZhbHNlXCIpIHtcbiAgY29uZmlndXJlKHtcbiAgICBhcHBlbmRlcnM6IHsgY2RrdGY6IHsgdHlwZTogXCJmaWxlXCIsIGZpbGVuYW1lOiBcIi4vXCIgKyBsb2dGaWxlTmFtZSB9IH0sXG4gICAgY2F0ZWdvcmllczogeyBkZWZhdWx0OiB7IGFwcGVuZGVyczogW1wiY2RrdGZcIl0sIGxldmVsOiBcImRlYnVnXCIgfSB9LFxuICB9KTtcbn1cblxuY29uc3QgcHJvY2Vzc0xvZ2dlckRlYnVnID0gKGNodW5rOiBCdWZmZXIgfCBzdHJpbmcgfCBVaW50OEFycmF5KSA9PiB7XG4gIGxvZ2dlci5kZWJ1ZyhjaHVuay50b1N0cmluZygpKTtcbn07XG5jb25zdCBwcm9jZXNzTG9nZ2VyRXJyb3IgPSAoY2h1bms6IEJ1ZmZlciB8IHN0cmluZyB8IFVpbnQ4QXJyYXkpID0+IHtcbiAgbG9nZ2VyLmVycm9yKGNodW5rLnRvU3RyaW5nKCkpO1xufTtcblxuZXhwb3J0IHtcbiAgbG9nZ2VyLFxuICBnZXRMb2dnZXIsXG4gIHByb2Nlc3NMb2dnZXJEZWJ1ZyxcbiAgcHJvY2Vzc0xvZ2dlckVycm9yLFxuICBsb2dGaWxlTmFtZSxcbn07XG4iXX0=