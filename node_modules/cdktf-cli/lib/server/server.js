"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const http_1 = require("http");
const apollo_server_express_1 = require("apollo-server-express");
const graphql_1 = require("graphql");
const apollo_server_core_1 = require("apollo-server-core");
const subscriptions_transport_ws_1 = require("subscriptions-transport-ws");
const load_1 = require("@graphql-tools/load");
const graphql_file_loader_1 = require("@graphql-tools/graphql-file-loader");
const graphql_subscriptions_1 = require("graphql-subscriptions");
const WatchClient_1 = require("./WatchClient");
const util_1 = require("./util");
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const utilities_1 = require("../../bin/cmds/helper/utilities");
const loadFile = (file) => {
    // if file exists relative ot this file return its file path
    // otherwise return the file path relative to the project root
    const filePath = path.resolve(path.join(__dirname, file));
    if (fs.existsSync(filePath)) {
        return filePath;
    }
    return path.resolve(path.join(utilities_1.projectRootPath(), "bundle", "lib", "server", file));
};
const graphqlSchemaPath = loadFile("schema.graphql");
const pubsub = new graphql_subscriptions_1.PubSub();
const WATCH_EVENT = "WATCH";
const PORT = process.argv[2];
let watchClient;
async function startApolloServer() {
    // Provide resolver functions for your schema fields
    const resolvers = {
        Query: {
            hello: () => "Hello world!!!",
        },
        Subscription: {
            watch: {
                subscribe: async (_parent, args) => {
                    // create this here so that events with errors published
                    // while startup reach the client
                    const iterator = pubsub.asyncIterator([WATCH_EVENT]);
                    if (watchClient && watchClient.isRunning()) {
                        console.warn("There is already a watch running, you will receive the updates from that run but no new one is started.");
                    }
                    else {
                        try {
                            watchClient = new WatchClient_1.WatchClient(args.inputs);
                            // subscribe returns an unsubscribe function but that connect reliably
                            // be used with PubSub â€“ that lib is recommended by Apollo docs but seems to
                            // be unmaintained, maybe ditch it? see https://github.com/apollographql/graphql-subscriptions/issues/240#issuecomment-767568596
                            watchClient.subscribe((state) => pubsub.publish(WATCH_EVENT, {
                                watch: util_1.mapWatchState(state),
                            }));
                            await watchClient.start();
                        }
                        catch (e) {
                            const state = {
                                resources: [],
                                stacks: [],
                                status: "IDLE",
                                error: {
                                    origin: "SERVER",
                                    message: e.message,
                                    timestamp: Date.now(),
                                    recoverable: false,
                                },
                            };
                            // we should get rid if this hack somehow.
                            // this has to be done because the client won't receive this
                            // error if it is published before the iterator has been returned
                            setTimeout(() => pubsub.publish(WATCH_EVENT, { watch: state }), 1000);
                        }
                    }
                    return iterator;
                },
            },
        },
    };
    const schema = await load_1.loadSchema(graphqlSchemaPath, {
        // load from a single schema file
        loaders: [new graphql_file_loader_1.GraphQLFileLoader()],
        resolvers,
    });
    // setup express and base http server
    const app = express_1.default();
    app.get("/up", (_, res) => res.send("OK"));
    const httpServer = http_1.createServer(app);
    // setup apollo server
    const server = new apollo_server_express_1.ApolloServer({
        schema,
        introspection: true,
        plugins: [apollo_server_core_1.ApolloServerPluginLandingPageGraphQLPlayground()],
        debug: true,
    });
    await server.start();
    server.applyMiddleware({ app });
    // setup subscription server
    const subscriptionServer = subscriptions_transport_ws_1.SubscriptionServer.create({ schema, execute: graphql_1.execute, subscribe: graphql_1.subscribe }, { server: httpServer, path: server.graphqlPath });
    ["SIGINT", "SIGTERM"].forEach((signal) => {
        process.on(signal, () => {
            subscriptionServer.close();
            process.exit();
        });
    });
    await new Promise((resolve) => httpServer.listen({ port: PORT }, resolve));
    console.log(`ðŸš€ Server ready at http://localhost:${PORT}${server.graphqlPath}`);
    return { server, app };
}
startApolloServer();
//# sourceMappingURL=data:application/json;base64,