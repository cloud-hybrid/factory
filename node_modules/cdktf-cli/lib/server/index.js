"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServer = void 0;
// spawns a server which serves a GraphQL api which is used inside the cdktf watch command
// heavily inspired by https://github.com/gatsbyjs/gatsby/blob/2b672fcdd7cb6e75b9ae640d6bd475a612f4d723/packages/gatsby-recipes/src/graphql-server/index.js
const detect_port_1 = __importDefault(require("detect-port"));
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const execa_1 = __importDefault(require("execa"));
const logging_1 = require("../logging");
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const utilities_1 = require("../../bin/cmds/helper/utilities");
const serverLogger = logging_1.getLogger("cli-server");
const loadFile = (file) => {
    // if file exists relative ot this file return its file path
    // otherwise return the file path relative to the project root
    const filePath = path.join(__dirname, file);
    if (fs.existsSync(filePath)) {
        return filePath;
    }
    return path.join(utilities_1.projectRootPath(), "bundle", "lib", "server", file);
};
async function startServer() {
    var _a, _b;
    logging_1.logger.debug("Starting Server for CLI");
    const port = await detect_port_1.default(40000);
    const subprocess = execa_1.default(`node`, [loadFile("server.js"), String(port)], {
        env: process.env,
    });
    (_a = subprocess.stderr) === null || _a === void 0 ? void 0 : _a.on("data", (chunk) => serverLogger.error(chunk.toString()));
    (_b = subprocess.stdout) === null || _b === void 0 ? void 0 : _b.on("data", (chunk) => serverLogger.debug(chunk.toString()));
    // wait for server to be running
    const waitForServer = async (retries = 10, waitTime = 500) => {
        try {
            await cross_fetch_1.default(`http://localhost:${port}/up`);
            return true;
        }
        catch (e) {
            if (e.code !== "ECONNREFUSED")
                throw e;
            if (retries > 0) {
                await new Promise((resolve) => setTimeout(resolve, waitTime));
                return waitForServer(retries - 1, waitTime);
            }
            return false;
        }
    };
    logging_1.logger.debug("Waiting for server to become available..");
    const running = await waitForServer();
    logging_1.logger.debug(running
        ? "Server is up"
        : "Server did not manage to start up within alloted time");
    ["exit"].forEach((signal) => {
        process.on(signal, () => {
            console.log(`${signal} signal called. killing subprocess..`);
            subprocess.kill(`SIGTERM`, {
                forceKillAfterTimeout: 2000,
            });
        });
    });
    const stop = async () => {
        subprocess.kill("SIGTERM", {
            forceKillAfterTimeout: 2000,
        });
    };
    return { port, stop };
}
exports.startServer = startServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMEZBQTBGO0FBQzFGLDJKQUEySjtBQUMzSiw4REFBcUM7QUFDckMsOERBQWdDO0FBQ2hDLGtEQUEwQjtBQUMxQix3Q0FBK0M7QUFDL0MsMkNBQTZCO0FBQzdCLDZDQUErQjtBQUMvQiwrREFBa0U7QUFFbEUsTUFBTSxZQUFZLEdBQUcsbUJBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUU3QyxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO0lBQ2hDLDREQUE0RDtJQUM1RCw4REFBOEQ7SUFDOUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQzNCLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUFlLEVBQUUsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN2RSxDQUFDLENBQUM7QUFFSyxLQUFLLFVBQVUsV0FBVzs7SUFJL0IsZ0JBQU0sQ0FBQyxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUV4QyxNQUFNLElBQUksR0FBRyxNQUFNLHFCQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckMsTUFBTSxVQUFVLEdBQUcsZUFBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtRQUN0RSxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUc7S0FDakIsQ0FBQyxDQUFDO0lBRUgsTUFBQSxVQUFVLENBQUMsTUFBTSwwQ0FBRSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDdEMsWUFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsRUFDcEM7SUFDRixNQUFBLFVBQVUsQ0FBQyxNQUFNLDBDQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUN0QyxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUNwQztJQUVGLGdDQUFnQztJQUNoQyxNQUFNLGFBQWEsR0FBRyxLQUFLLEVBQ3pCLE9BQU8sR0FBRyxFQUFFLEVBQ1osUUFBUSxHQUFHLEdBQUcsRUFDSSxFQUFFO1FBQ3BCLElBQUk7WUFDRixNQUFNLHFCQUFLLENBQUMsb0JBQW9CLElBQUksS0FBSyxDQUFDLENBQUM7WUFDM0MsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLGNBQWM7Z0JBQUUsTUFBTSxDQUFDLENBQUM7WUFDdkMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO2dCQUNmLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDOUQsT0FBTyxhQUFhLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUM3QztZQUNELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7SUFDSCxDQUFDLENBQUM7SUFDRixnQkFBTSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sT0FBTyxHQUFHLE1BQU0sYUFBYSxFQUFFLENBQUM7SUFDdEMsZ0JBQU0sQ0FBQyxLQUFLLENBQ1YsT0FBTztRQUNMLENBQUMsQ0FBQyxjQUFjO1FBQ2hCLENBQUMsQ0FBQyx1REFBdUQsQ0FDNUQsQ0FBQztJQUVGLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDMUIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO1lBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLHNDQUFzQyxDQUFDLENBQUM7WUFDN0QsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ3pCLHFCQUFxQixFQUFFLElBQUk7YUFDNUIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO1FBQ3RCLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ3pCLHFCQUFxQixFQUFFLElBQUk7U0FDNUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUN4QixDQUFDO0FBNURELGtDQTREQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNwYXducyBhIHNlcnZlciB3aGljaCBzZXJ2ZXMgYSBHcmFwaFFMIGFwaSB3aGljaCBpcyB1c2VkIGluc2lkZSB0aGUgY2RrdGYgd2F0Y2ggY29tbWFuZFxuLy8gaGVhdmlseSBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZ2F0c2J5anMvZ2F0c2J5L2Jsb2IvMmI2NzJmY2RkN2NiNmU3NWI5YWU2NDBkNmJkNDc1YTYxMmY0ZDcyMy9wYWNrYWdlcy9nYXRzYnktcmVjaXBlcy9zcmMvZ3JhcGhxbC1zZXJ2ZXIvaW5kZXguanNcbmltcG9ydCBkZXRlY3RQb3J0IGZyb20gXCJkZXRlY3QtcG9ydFwiO1xuaW1wb3J0IGZldGNoIGZyb20gXCJjcm9zcy1mZXRjaFwiO1xuaW1wb3J0IGV4ZWNhIGZyb20gXCJleGVjYVwiO1xuaW1wb3J0IHsgbG9nZ2VyLCBnZXRMb2dnZXIgfSBmcm9tIFwiLi4vbG9nZ2luZ1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgeyBwcm9qZWN0Um9vdFBhdGggfSBmcm9tIFwiLi4vLi4vYmluL2NtZHMvaGVscGVyL3V0aWxpdGllc1wiO1xuXG5jb25zdCBzZXJ2ZXJMb2dnZXIgPSBnZXRMb2dnZXIoXCJjbGktc2VydmVyXCIpO1xuXG5jb25zdCBsb2FkRmlsZSA9IChmaWxlOiBzdHJpbmcpID0+IHtcbiAgLy8gaWYgZmlsZSBleGlzdHMgcmVsYXRpdmUgb3QgdGhpcyBmaWxlIHJldHVybiBpdHMgZmlsZSBwYXRoXG4gIC8vIG90aGVyd2lzZSByZXR1cm4gdGhlIGZpbGUgcGF0aCByZWxhdGl2ZSB0byB0aGUgcHJvamVjdCByb290XG4gIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgZmlsZSk7XG4gIGlmIChmcy5leGlzdHNTeW5jKGZpbGVQYXRoKSkge1xuICAgIHJldHVybiBmaWxlUGF0aDtcbiAgfVxuICByZXR1cm4gcGF0aC5qb2luKHByb2plY3RSb290UGF0aCgpLCBcImJ1bmRsZVwiLCBcImxpYlwiLCBcInNlcnZlclwiLCBmaWxlKTtcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydFNlcnZlcigpOiBQcm9taXNlPHtcbiAgcG9ydDogbnVtYmVyO1xuICBzdG9wOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xufT4ge1xuICBsb2dnZXIuZGVidWcoXCJTdGFydGluZyBTZXJ2ZXIgZm9yIENMSVwiKTtcblxuICBjb25zdCBwb3J0ID0gYXdhaXQgZGV0ZWN0UG9ydCg0MDAwMCk7XG5cbiAgY29uc3Qgc3VicHJvY2VzcyA9IGV4ZWNhKGBub2RlYCwgW2xvYWRGaWxlKFwic2VydmVyLmpzXCIpLCBTdHJpbmcocG9ydCldLCB7XG4gICAgZW52OiBwcm9jZXNzLmVudixcbiAgfSk7XG5cbiAgc3VicHJvY2Vzcy5zdGRlcnI/Lm9uKFwiZGF0YVwiLCAoY2h1bmspID0+XG4gICAgc2VydmVyTG9nZ2VyLmVycm9yKGNodW5rLnRvU3RyaW5nKCkpXG4gICk7XG4gIHN1YnByb2Nlc3Muc3Rkb3V0Py5vbihcImRhdGFcIiwgKGNodW5rKSA9PlxuICAgIHNlcnZlckxvZ2dlci5kZWJ1ZyhjaHVuay50b1N0cmluZygpKVxuICApO1xuXG4gIC8vIHdhaXQgZm9yIHNlcnZlciB0byBiZSBydW5uaW5nXG4gIGNvbnN0IHdhaXRGb3JTZXJ2ZXIgPSBhc3luYyAoXG4gICAgcmV0cmllcyA9IDEwLFxuICAgIHdhaXRUaW1lID0gNTAwXG4gICk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDoke3BvcnR9L3VwYCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5jb2RlICE9PSBcIkVDT05OUkVGVVNFRFwiKSB0aHJvdyBlO1xuICAgICAgaWYgKHJldHJpZXMgPiAwKSB7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHdhaXRUaW1lKSk7XG4gICAgICAgIHJldHVybiB3YWl0Rm9yU2VydmVyKHJldHJpZXMgLSAxLCB3YWl0VGltZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICBsb2dnZXIuZGVidWcoXCJXYWl0aW5nIGZvciBzZXJ2ZXIgdG8gYmVjb21lIGF2YWlsYWJsZS4uXCIpO1xuICBjb25zdCBydW5uaW5nID0gYXdhaXQgd2FpdEZvclNlcnZlcigpO1xuICBsb2dnZXIuZGVidWcoXG4gICAgcnVubmluZ1xuICAgICAgPyBcIlNlcnZlciBpcyB1cFwiXG4gICAgICA6IFwiU2VydmVyIGRpZCBub3QgbWFuYWdlIHRvIHN0YXJ0IHVwIHdpdGhpbiBhbGxvdGVkIHRpbWVcIlxuICApO1xuXG4gIFtcImV4aXRcIl0uZm9yRWFjaCgoc2lnbmFsKSA9PiB7XG4gICAgcHJvY2Vzcy5vbihzaWduYWwsICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGAke3NpZ25hbH0gc2lnbmFsIGNhbGxlZC4ga2lsbGluZyBzdWJwcm9jZXNzLi5gKTtcbiAgICAgIHN1YnByb2Nlc3Mua2lsbChgU0lHVEVSTWAsIHtcbiAgICAgICAgZm9yY2VLaWxsQWZ0ZXJUaW1lb3V0OiAyMDAwLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IHN0b3AgPSBhc3luYyAoKSA9PiB7XG4gICAgc3VicHJvY2Vzcy5raWxsKFwiU0lHVEVSTVwiLCB7XG4gICAgICBmb3JjZUtpbGxBZnRlclRpbWVvdXQ6IDIwMDAsXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHsgcG9ydCwgc3RvcCB9O1xufVxuIl19