"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Diff = exports.Plan = exports.CloudRunInfo = void 0;
const react_1 = __importStar(require("react"));
const ink_1 = require("ink");
const ink_spinner_1 = __importDefault(require("ink-spinner"));
const components_1 = require("./components");
const terraform_context_1 = require("./terraform-context");
const PlanSummary = ({ resources }) => {
    const summary = resources.reduce((accumulator, resource) => {
        if (accumulator[resource.action] !== undefined) {
            accumulator[resource.action] += 1;
        }
        return accumulator;
    }, {
        create: 0,
        update: 0,
        delete: 0,
    });
    return (react_1.default.createElement(react_1.default.Fragment, null, Object.keys(summary).map((key, i) => (react_1.default.createElement(ink_1.Box, { key: key },
        i > 0 && react_1.default.createElement(ink_1.Text, null, ", "),
        react_1.default.createElement(ink_1.Text, null,
            summary[key],
            " to ",
            key))))));
};
exports.CloudRunInfo = () => {
    const { url } = terraform_context_1.useTerraformState();
    if (url == undefined)
        return react_1.default.createElement(react_1.default.Fragment, null);
    const staticElements = [url];
    return (react_1.default.createElement(ink_1.Static, { items: staticElements }, (e) => (react_1.default.createElement(ink_1.Text, { key: e },
        "Running plan in the remote backend. To view this run in a browser, visit: ",
        e))));
};
exports.Plan = () => {
    const { plan, currentStack } = terraform_context_1.useTerraformState();
    return (react_1.default.createElement(react_1.Fragment, null,
        react_1.default.createElement(ink_1.Box, { flexDirection: "column" },
            react_1.default.createElement(exports.CloudRunInfo, null),
            react_1.default.createElement(ink_1.Box, null,
                react_1.default.createElement(ink_1.Text, null, "Stack: "),
                react_1.default.createElement(ink_1.Text, { bold: true }, currentStack.name)),
            (plan === null || plan === void 0 ? void 0 : plan.needsApply) ? react_1.default.createElement(ink_1.Text, { bold: true }, "Resources") : react_1.default.createElement(react_1.default.Fragment, null), plan === null || plan === void 0 ? void 0 :
            plan.applyableResources.map((resource) => (react_1.default.createElement(ink_1.Box, { key: resource.id, marginLeft: 1 },
                react_1.default.createElement(components_1.PlanElement, { resource: resource, stackName: currentStack.name })))),
            react_1.default.createElement(ink_1.Box, { marginTop: 1 },
                react_1.default.createElement(ink_1.Text, { bold: true }, "Diff: "),
                react_1.default.createElement(PlanSummary, { resources: (plan === null || plan === void 0 ? void 0 : plan.applyableResources) || [] }),
                react_1.default.createElement(ink_1.Text, null, ".")))));
};
exports.Diff = ({ targetDir, targetStack, synthCommand, }) => {
    const { status, currentStack, errors } = terraform_context_1.useRunDiff({
        targetDir,
        targetStack,
        synthCommand,
        isSpeculative: true,
    });
    const isPlanning = status != terraform_context_1.Status.PLANNED;
    const statusText = currentStack.name === "" ? (`${status}...`) : (react_1.default.createElement(ink_1.Text, null,
        status,
        react_1.default.createElement(ink_1.Text, { bold: true },
            "\u00A0",
            currentStack.name),
        "..."));
    if (errors)
        return react_1.default.createElement(ink_1.Box, null, errors);
    return (react_1.default.createElement(ink_1.Box, null,
        react_1.default.createElement(exports.CloudRunInfo, null),
        isPlanning ? (react_1.default.createElement(react_1.Fragment, null,
            react_1.default.createElement(ink_1.Text, { color: "green" },
                react_1.default.createElement(ink_spinner_1.default, { type: "dots" })),
            react_1.default.createElement(ink_1.Box, { paddingLeft: 1 },
                react_1.default.createElement(ink_1.Text, null, statusText)))) : (react_1.default.createElement(exports.Plan, null))));
};
//# sourceMappingURL=data:application/json;base64,