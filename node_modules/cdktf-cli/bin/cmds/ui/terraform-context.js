"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useRunDestroy = exports.useRunDeploy = exports.useRunDiff = exports.useRunInit = exports.useRunSynth = exports.useRunWhen = exports.useTerraform = exports.useTerraformState = exports.TerraformProvider = exports.parseOutput = exports.Status = void 0;
/* eslint-disable no-control-regex */
const react_1 = __importDefault(require("react"));
const terraform_cli_1 = require("./models/terraform-cli");
const terraform_cloud_1 = require("./models/terraform-cloud");
const terraform_1 = require("./models/terraform");
const synth_stack_1 = require("../helper/synth-stack");
const ink_1 = require("ink");
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const chalk = __importStar(require("chalk"));
const logging_1 = require("../../../lib/logging");
const schema_1 = require("./models/schema");
const z = __importStar(require("zod"));
const cdktf_1 = require("cdktf");
const chalkColour = new chalk.Instance();
const TerraformContextState = react_1.default.createContext(undefined);
const TerraformContextDispatch = react_1.default.createContext(
// eslint-disable-next-line @typescript-eslint/no-empty-function
(() => { }));
var Status;
(function (Status) {
    Status["STARTING"] = "starting";
    Status["SYNTHESIZING"] = "synthesizing";
    Status["SYNTHESIZED"] = "synthesized";
    Status["INITIALIZING"] = "initializing";
    Status["PLANNING"] = "planning";
    Status["PLANNED"] = "planned";
    Status["DEPLOYING"] = "deploying";
    Status["DESTROYING"] = "destroying";
    Status["DONE"] = "done";
})(Status = exports.Status || (exports.Status = {}));
const mapActionToState = (action, done) => {
    switch (action) {
        case "create":
        case "update":
            return done
                ? terraform_1.DeployingResourceApplyState.CREATED
                : terraform_1.DeployingResourceApplyState.CREATING;
        case "delete":
            return done
                ? terraform_1.DeployingResourceApplyState.DESTROYED
                : terraform_1.DeployingResourceApplyState.DESTROYING;
        default:
            return terraform_1.DeployingResourceApplyState.WAITING;
    }
};
const parseJsonOutputLine = (line) => {
    let json, message;
    try {
        json = JSON.parse(line);
    }
    catch (_a) {
        logging_1.logger.trace(`Could not parse line as JSON: ${line}`);
        return;
    }
    try {
        message = schema_1.schema.parse(json);
    }
    catch (err) {
        if (err instanceof z.ZodError) {
            logging_1.logger.warn(`Error parsing line into schema: ${JSON.stringify(err.errors)} => ${line}`);
        }
        return;
    }
    switch (message.type) {
        case "apply_start":
        case "apply_progress":
            return {
                id: message.hook.resource.resource,
                applyState: mapActionToState(message.hook.action, false),
            };
        case "apply_complete":
            return {
                id: message.hook.resource.resource,
                applyState: mapActionToState(message.hook.action, true),
            };
        default:
            return;
    }
};
const parseTextOutputLine = (line) => {
    if (/^Outputs:/.test(line)) {
        return;
    }
    if (/^Plan:/.test(line)) {
        return;
    }
    if (/^data\..*/.test(line)) {
        return;
    }
    const resourceMatch = line.match(/^([a-zA-Z_][a-zA-Z\d_\-.]*):/);
    let applyState;
    switch (true) {
        case /Creating.../.test(line):
        case /Still creating.../.test(line):
            applyState = terraform_1.DeployingResourceApplyState.CREATING;
            break;
        case /Creation complete/.test(line):
            applyState = terraform_1.DeployingResourceApplyState.CREATED;
            break;
        case /Modifying.../.test(line):
            applyState = terraform_1.DeployingResourceApplyState.UPDATING;
            break;
        case /Modifications complete/.test(line):
            applyState = terraform_1.DeployingResourceApplyState.UPDATED;
            break;
        case /Destroying.../.test(line):
        case /Still destroying.../.test(line):
            applyState = terraform_1.DeployingResourceApplyState.DESTROYING;
            break;
        case /Destruction complete/.test(line):
            applyState = terraform_1.DeployingResourceApplyState.DESTROYED;
            break;
        default:
            return;
    }
    if (resourceMatch &&
        resourceMatch.length >= 0 &&
        resourceMatch[1] != "Warning") {
        return {
            id: resourceMatch[1],
            applyState,
        };
    }
    else {
        return;
    }
};
exports.parseOutput = (str) => {
    const lines = strip_ansi_1.default(str.toString()).split("\n");
    const resources = lines.map((line) => {
        const parsed = parseJsonOutputLine(line) || parseTextOutputLine(line);
        if (parsed === undefined) {
            return;
        }
        const { id, applyState } = parsed;
        return {
            id,
            applyState,
            action: terraform_1.PlannedResourceAction.CREATE,
        };
    });
    return resources.reduce((acc, resource) => {
        if (resource) {
            acc.push(resource);
        }
        return acc;
        // eslint-disable-next-line @typescript-eslint/no-array-constructor
    }, new Array());
};
function deployReducer(state, action) {
    switch (action.type) {
        case "UPDATE_RESOURCES": {
            const map = new Map(state.resources.map((r) => [r.id, r]));
            action.resources.forEach((r) => map.set(r.id, r));
            return {
                ...state,
                resources: [...map.values()],
            };
        }
        case "SYNTH": {
            return { ...state, status: Status.SYNTHESIZING };
        }
        case "SYNTHESIZED": {
            return { ...state, status: Status.SYNTHESIZED, stacks: action.stacks };
        }
        case "CURRENT_STACK": {
            return {
                ...state,
                currentStack: action.currentStack,
            };
        }
        case "INIT": {
            return { ...state, status: Status.INITIALIZING };
        }
        case "PLAN": {
            return { ...state, status: Status.PLANNING };
        }
        case "PLANNED": {
            if (action.plan instanceof terraform_cloud_1.TerraformCloudPlan) {
                return {
                    ...state,
                    status: Status.PLANNED,
                    plan: action.plan,
                    url: action.plan.url,
                };
            }
            else {
                return {
                    ...state,
                    status: Status.PLANNED,
                    plan: action.plan,
                };
            }
        }
        case "DEPLOY": {
            return {
                ...state,
                status: Status.DEPLOYING,
                resources: action.resources,
            };
        }
        case "DESTROY": {
            return {
                ...state,
                status: Status.DESTROYING,
                resources: action.resources,
            };
        }
        case "OUTPUT": {
            return { ...state, output: action.output };
        }
        case "DONE": {
            return { ...state, status: Status.DONE };
        }
        case "ERROR": {
            return {
                ...state,
                errors: [
                    ...(Array.isArray(state.errors) ? state.errors : []),
                    action.error,
                ],
            };
        }
        default: {
            throw new Error(`Unhandled action type: ${JSON.stringify(action, null, 2)}`);
        }
    }
}
// eslint-disable-next-line react/prop-types
exports.TerraformProvider = ({ children, initialState, }) => {
    const initialCurrentStack = {
        constructPath: "",
        content: "",
        name: "",
        annotations: [],
        synthesizedStackPath: "",
        workingDirectory: "",
    };
    const [state, dispatch] = react_1.default.useReducer(deployReducer, initialState || {
        status: Status.STARTING,
        resources: [],
        currentStack: initialCurrentStack,
    });
    return (react_1.default.createElement(TerraformContextState.Provider, { value: state },
        react_1.default.createElement(TerraformContextDispatch.Provider, { value: dispatch }, children)));
};
exports.useTerraformState = () => {
    const state = react_1.default.useContext(TerraformContextState);
    if (state === undefined) {
        throw new Error("useTerraformState must be used within a TerraformContextState.Provider");
    }
    return state;
};
const useTerraformDispatch = () => {
    const dispatch = react_1.default.useContext(TerraformContextDispatch);
    if (dispatch === undefined) {
        throw new Error("useTerraform must be used within a TerraformContextDispatch.Provider");
    }
    return dispatch;
};
const useConfirmation = ({ autoApprove = false, }) => {
    const { exit } = ink_1.useApp();
    const [confirmed, setConfirmed] = react_1.default.useState(autoApprove);
    const confirmationCallback = react_1.default.useCallback((submitValue) => {
        if (submitValue === false) {
            exit();
            return;
        }
        setConfirmed(submitValue);
    }, [exit]);
    return [confirmed, confirmationCallback];
};
exports.useTerraform = ({ targetDir, targetStack, synthCommand, isSpeculative = false, }) => {
    const dispatch = useTerraformDispatch();
    const state = exports.useTerraformState();
    const [terraform, setTerraform] = react_1.default.useState();
    const executorForStack = async (stack) => {
        var _a, _b, _c, _d;
        const parsedStack = JSON.parse(stack.content);
        if ((_b = (_a = parsedStack.terraform) === null || _a === void 0 ? void 0 : _a.backend) === null || _b === void 0 ? void 0 : _b.remote) {
            const tfClient = new terraform_cloud_1.TerraformCloud(stack, (_d = (_c = parsedStack.terraform) === null || _c === void 0 ? void 0 : _c.backend) === null || _d === void 0 ? void 0 : _d.remote, isSpeculative);
            if (await tfClient.isRemoteWorkspace()) {
                setTerraform(tfClient);
            }
            else {
                setTerraform(new terraform_cli_1.TerraformCli(stack));
            }
        }
        else {
            setTerraform(new terraform_cli_1.TerraformCli(stack));
        }
    };
    const execTerraformSynth = async (loadExecutor = true) => {
        try {
            dispatch({ type: "SYNTH" });
            const stacks = await synth_stack_1.SynthStack.synth(synthCommand, targetDir);
            printAnnotations(stacks);
            if (loadExecutor) {
                if (stacks.length > 1 && !targetStack) {
                    throw new Error(`Found more than one stack, please specify a target stack. Run cdktf <verb> <stack> with one of these stacks: ${stacks
                        .map((s) => s.name)
                        .join(", ")} `);
                }
                const stack = targetStack
                    ? stacks.find((s) => s.name === targetStack)
                    : stacks[0];
                if (!stack)
                    throw new Error(`Can't find given stack ${targetStack} - Found the following stacks ${stacks
                        .map((s) => s.name)
                        .join(", ")}`);
                dispatch({ type: "CURRENT_STACK", currentStack: stack });
                await executorForStack(stack);
            }
            else {
                // synth
                const stack = targetStack
                    ? stacks.find((s) => s.name === targetStack)
                    : stacks[0];
                if (stack) {
                    dispatch({ type: "CURRENT_STACK", currentStack: stack });
                }
            }
            dispatch({ type: "SYNTHESIZED", stacks });
        }
        catch (e) {
            dispatch({ type: "ERROR", error: e });
        }
    };
    const execTerraformInit = async () => {
        try {
            if (!terraform)
                throw new Error("Internal error: Terraform is not initialized yet. Please call synth() with loadExecutor: true first");
            dispatch({ type: "INIT" });
            await terraform.init();
        }
        catch (e) {
            dispatch({ type: "ERROR", error: e });
        }
    };
    const execTerraformOutput = async () => {
        try {
            if (!terraform)
                throw new Error("Terraform is not initialized yet");
            const output = await terraform.output();
            dispatch({ type: "OUTPUT", output });
        }
        catch (e) {
            dispatch({ type: "ERROR", error: e });
        }
    };
    const execTerraformPlan = async (destroy = false) => {
        let plan;
        try {
            if (!terraform)
                throw new Error("Terraform is not initialized yet");
            dispatch({ type: "PLAN" });
            plan = await terraform.plan(destroy);
            dispatch({ type: "PLANNED", plan });
            return plan;
        }
        catch (e) {
            dispatch({ type: "ERROR", error: e });
        }
        return;
    };
    const execTerraformApply = async () => {
        const plan = state.plan;
        try {
            if (!terraform)
                throw new Error("Terraform is not initialized yet");
            if (!plan)
                throw new Error("No plan");
            if (plan.needsApply) {
                const resources = plan.applyableResources.map((r) => Object.assign({}, r, {
                    applyState: terraform_1.DeployingResourceApplyState.WAITING,
                }));
                dispatch({ type: "DEPLOY", resources });
                await terraform.deploy(plan.planFile, (output) => {
                    const resources = exports.parseOutput(output.toString());
                    dispatch({ type: "UPDATE_RESOURCES", resources });
                });
            }
            dispatch({ type: "DONE" });
        }
        catch (e) {
            dispatch({ type: "ERROR", error: e });
        }
    };
    const execTerraformDestroy = async () => {
        const plan = state.plan;
        try {
            if (!terraform)
                throw new Error("Terraform is not initialized yet");
            if (!plan)
                throw new Error("No plan");
            if (plan.needsApply) {
                const resources = plan.applyableResources.map((r) => Object.assign({}, r, {
                    applyState: terraform_1.DeployingResourceApplyState.WAITING,
                }));
                dispatch({ type: "DESTROY", resources });
                await terraform.destroy((output) => {
                    const resources = exports.parseOutput(output.toString());
                    dispatch({ type: "UPDATE_RESOURCES", resources });
                });
            }
            dispatch({ type: "DONE" });
        }
        catch (e) {
            dispatch({ type: "ERROR", error: e });
        }
    };
    return {
        synth: execTerraformSynth,
        deploy: execTerraformApply,
        diff: execTerraformPlan,
        output: execTerraformOutput,
        destroy: execTerraformDestroy,
        init: execTerraformInit,
    };
};
const useRunOnce = (fn, ...args) => {
    react_1.default.useEffect(() => {
        fn(...args);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []); // only run once on mount – ignore any changes to fn
};
exports.useRunWhen = (condition, fn, ...args) => {
    react_1.default.useEffect(() => {
        if (condition)
            fn(...args);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [condition]); // only run if condition changes
};
exports.useRunSynth = (options) => {
    const state = exports.useTerraformState();
    const { synth } = exports.useTerraform(options);
    useRunOnce(synth, false);
    return state;
};
exports.useRunInit = (options) => {
    const { synth, init } = exports.useTerraform(options);
    const state = exports.useTerraformState();
    useRunOnce(synth);
    exports.useRunWhen(state.status === Status.SYNTHESIZED, init);
    return state;
};
exports.useRunDiff = (options) => {
    const { synth, init, diff } = exports.useTerraform(options);
    const state = exports.useTerraformState();
    useRunOnce(synth);
    exports.useRunWhen(state.status === Status.SYNTHESIZED, async () => {
        await init();
        await diff();
    });
    return state;
};
exports.useRunDeploy = ({ autoApprove, ...options }) => {
    const state = exports.useTerraformState();
    const { synth, init, diff, deploy, output } = exports.useTerraform(options);
    const [confirmed, confirmationCallback] = useConfirmation({ autoApprove });
    useRunOnce(synth);
    exports.useRunWhen(state.status === Status.SYNTHESIZED, async () => {
        await init();
        await diff();
    });
    exports.useRunWhen(confirmed && state.status === Status.PLANNED, async () => {
        await deploy();
        await output();
    });
    return {
        state,
        confirmation: confirmationCallback,
        isConfirmed: confirmed,
    };
};
exports.useRunDestroy = ({ autoApprove, ...options }) => {
    const state = exports.useTerraformState();
    const { synth, init, diff, destroy } = exports.useTerraform(options);
    const [confirmed, confirmationCallback] = useConfirmation({ autoApprove });
    useRunOnce(synth);
    exports.useRunWhen(state.status === Status.SYNTHESIZED, async () => {
        await init();
        await diff(true); // true = plan a destroy
    });
    exports.useRunWhen(confirmed && state.status === Status.PLANNED, async () => {
        await destroy();
    });
    return {
        state,
        confirmation: confirmationCallback,
        isConfirmed: confirmed,
    };
};
/**
 * prints annotations via console
 * @throws Error if an Annotation with level === ERROR has been encountered
 */
function printAnnotations(stacks) {
    let encounteredAnnotationError = false;
    stacks.forEach((stack) => (stack.annotations || []).forEach((annotation) => {
        if (annotation.level === cdktf_1.AnnotationMetadataEntryType.ERROR)
            encounteredAnnotationError = true;
        let color = chalkColour.whiteBright;
        let level = annotation.level;
        switch (annotation.level) {
            case cdktf_1.AnnotationMetadataEntryType.INFO: {
                level = "INFO";
                break;
            }
            case cdktf_1.AnnotationMetadataEntryType.WARN: {
                color = chalkColour.hex("#FFA500"); // orange
                level = "WARN";
                break;
            }
            case cdktf_1.AnnotationMetadataEntryType.ERROR: {
                color = chalkColour.redBright;
                level = "ERROR";
                break;
            }
        }
        console.log(color(`${level} [${annotation.constructPath}]: ${annotation.message}`));
        if (annotation.level === cdktf_1.AnnotationMetadataEntryType.ERROR &&
            annotation.stacktrace)
            console.log(chalkColour.gray(annotation.stacktrace.join("\n")));
    }));
    if (encounteredAnnotationError) {
        throw new Error("While synthesizing one or more error annotations have been encountered. Please check the log output above.");
    }
}
//# sourceMappingURL=data:application/json;base64,