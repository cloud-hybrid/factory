"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const list_1 = require("./ui/list");
const provider_generator_1 = require("@cdktf/provider-generator");
const render_ink_1 = require("./helper/render-ink");
const version_check_1 = require("./helper/version-check");
const check_directory_1 = require("./helper/check-directory");
const check_environment_1 = require("./helper/check-environment");
const config = provider_generator_1.config.readConfigSync();
class Command {
    constructor() {
        this.command = "list [OPTIONS]";
        this.describe = "List stacks in app.";
        this.builder = (args) => args
            .option("app", {
            default: config.app,
            desc: "Command to use in order to execute cdktf app",
            alias: "a",
        })
            .option("output", {
            default: config.output,
            desc: "Output directory",
            alias: "o",
        })
            .showHelpOnFail(true);
    }
    async handler(argv) {
        check_directory_1.throwIfNotProjectDirectory("list");
        await version_check_1.displayVersionMessage();
        await check_environment_1.checkEnvironment("list");
        const command = argv.app;
        const outdir = argv.output;
        await render_ink_1.renderInk(react_1.default.createElement(list_1.List, { targetDir: outdir, synthCommand: command }));
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxrREFBMEI7QUFDMUIsb0NBQWlDO0FBQ2pDLGtFQUEwRDtBQUMxRCxvREFBZ0Q7QUFDaEQsMERBQStEO0FBQy9ELDhEQUFzRTtBQUN0RSxrRUFBOEQ7QUFFOUQsTUFBTSxNQUFNLEdBQUcsMkJBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUVwQyxNQUFNLE9BQU87SUFBYjtRQUNrQixZQUFPLEdBQUcsZ0JBQWdCLENBQUM7UUFDM0IsYUFBUSxHQUFHLHFCQUFxQixDQUFDO1FBRWpDLFlBQU8sR0FBRyxDQUFDLElBQWdCLEVBQUUsRUFBRSxDQUM3QyxJQUFJO2FBQ0QsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNiLE9BQU8sRUFBRSxNQUFNLENBQUMsR0FBRztZQUNuQixJQUFJLEVBQUUsOENBQThDO1lBQ3BELEtBQUssRUFBRSxHQUFHO1NBQ1gsQ0FBQzthQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNO1lBQ3RCLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDO2FBQ0QsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBYTVCLENBQUM7SUFYUSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQVM7UUFDNUIsNENBQTBCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkMsTUFBTSxxQ0FBcUIsRUFBRSxDQUFDO1FBQzlCLE1BQU0sb0NBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUN6QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRTNCLE1BQU0sc0JBQVMsQ0FDYixlQUFLLENBQUMsYUFBYSxDQUFDLFdBQUksRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQ3hFLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeWFyZ3MgZnJvbSBcInlhcmdzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSBcIi4vdWkvbGlzdFwiO1xuaW1wb3J0IHsgY29uZmlnIGFzIGNmZyB9IGZyb20gXCJAY2RrdGYvcHJvdmlkZXItZ2VuZXJhdG9yXCI7XG5pbXBvcnQgeyByZW5kZXJJbmsgfSBmcm9tIFwiLi9oZWxwZXIvcmVuZGVyLWlua1wiO1xuaW1wb3J0IHsgZGlzcGxheVZlcnNpb25NZXNzYWdlIH0gZnJvbSBcIi4vaGVscGVyL3ZlcnNpb24tY2hlY2tcIjtcbmltcG9ydCB7IHRocm93SWZOb3RQcm9qZWN0RGlyZWN0b3J5IH0gZnJvbSBcIi4vaGVscGVyL2NoZWNrLWRpcmVjdG9yeVwiO1xuaW1wb3J0IHsgY2hlY2tFbnZpcm9ubWVudCB9IGZyb20gXCIuL2hlbHBlci9jaGVjay1lbnZpcm9ubWVudFwiO1xuXG5jb25zdCBjb25maWcgPSBjZmcucmVhZENvbmZpZ1N5bmMoKTtcblxuY2xhc3MgQ29tbWFuZCBpbXBsZW1lbnRzIHlhcmdzLkNvbW1hbmRNb2R1bGUge1xuICBwdWJsaWMgcmVhZG9ubHkgY29tbWFuZCA9IFwibGlzdCBbT1BUSU9OU11cIjtcbiAgcHVibGljIHJlYWRvbmx5IGRlc2NyaWJlID0gXCJMaXN0IHN0YWNrcyBpbiBhcHAuXCI7XG5cbiAgcHVibGljIHJlYWRvbmx5IGJ1aWxkZXIgPSAoYXJnczogeWFyZ3MuQXJndikgPT5cbiAgICBhcmdzXG4gICAgICAub3B0aW9uKFwiYXBwXCIsIHtcbiAgICAgICAgZGVmYXVsdDogY29uZmlnLmFwcCxcbiAgICAgICAgZGVzYzogXCJDb21tYW5kIHRvIHVzZSBpbiBvcmRlciB0byBleGVjdXRlIGNka3RmIGFwcFwiLFxuICAgICAgICBhbGlhczogXCJhXCIsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbihcIm91dHB1dFwiLCB7XG4gICAgICAgIGRlZmF1bHQ6IGNvbmZpZy5vdXRwdXQsXG4gICAgICAgIGRlc2M6IFwiT3V0cHV0IGRpcmVjdG9yeVwiLFxuICAgICAgICBhbGlhczogXCJvXCIsXG4gICAgICB9KVxuICAgICAgLnNob3dIZWxwT25GYWlsKHRydWUpO1xuXG4gIHB1YmxpYyBhc3luYyBoYW5kbGVyKGFyZ3Y6IGFueSkge1xuICAgIHRocm93SWZOb3RQcm9qZWN0RGlyZWN0b3J5KFwibGlzdFwiKTtcbiAgICBhd2FpdCBkaXNwbGF5VmVyc2lvbk1lc3NhZ2UoKTtcbiAgICBhd2FpdCBjaGVja0Vudmlyb25tZW50KFwibGlzdFwiKTtcbiAgICBjb25zdCBjb21tYW5kID0gYXJndi5hcHA7XG4gICAgY29uc3Qgb3V0ZGlyID0gYXJndi5vdXRwdXQ7XG5cbiAgICBhd2FpdCByZW5kZXJJbmsoXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KExpc3QsIHsgdGFyZ2V0RGlyOiBvdXRkaXIsIHN5bnRoQ29tbWFuZDogY29tbWFuZCB9KVxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgQ29tbWFuZCgpO1xuIl19