"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const deploy_1 = require("./ui/deploy");
const provider_generator_1 = require("@cdktf/provider-generator");
const render_ink_1 = require("./helper/render-ink");
const version_check_1 = require("./helper/version-check");
const check_directory_1 = require("./helper/check-directory");
const check_environment_1 = require("./helper/check-environment");
const config = provider_generator_1.config.readConfigSync();
class Command {
    constructor() {
        this.command = "deploy [stack] [OPTIONS]";
        this.describe = "Deploy the given stack";
        this.aliases = ["apply"];
        this.builder = (args) => args
            .positional("stack", {
            desc: "Deploy stack which matches the given id only. Required when more than one stack is present in the app",
            type: "string",
        })
            .option("app", {
            default: config.app,
            required: true,
            desc: "Command to use in order to execute cdktf app",
            alias: "a",
        })
            .option("output", {
            default: config.output,
            required: true,
            desc: "Output directory",
            alias: "o",
        })
            .option("auto-approve", {
            type: "boolean",
            default: false,
            required: false,
            desc: "Auto approve",
        })
            .showHelpOnFail(true);
    }
    async handler(argv) {
        check_directory_1.throwIfNotProjectDirectory("deploy");
        await version_check_1.displayVersionMessage();
        await check_environment_1.checkEnvironment("deploy");
        const command = argv.app;
        const outdir = argv.output;
        const autoApprove = argv.autoApprove;
        const stack = argv.stack;
        await render_ink_1.renderInk(react_1.default.createElement(deploy_1.Deploy, {
            targetDir: outdir,
            targetStack: stack,
            synthCommand: command,
            autoApprove,
        }));
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVwbG95LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0Esa0RBQTBCO0FBQzFCLHdDQUFxQztBQUNyQyxrRUFBMEQ7QUFDMUQsb0RBQWdEO0FBQ2hELDBEQUErRDtBQUMvRCw4REFBc0U7QUFDdEUsa0VBQThEO0FBRTlELE1BQU0sTUFBTSxHQUFHLDJCQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7QUFFcEMsTUFBTSxPQUFPO0lBQWI7UUFDa0IsWUFBTyxHQUFHLDBCQUEwQixDQUFDO1FBQ3JDLGFBQVEsR0FBRyx3QkFBd0IsQ0FBQztRQUNwQyxZQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVwQixZQUFPLEdBQUcsQ0FBQyxJQUFnQixFQUFFLEVBQUUsQ0FDN0MsSUFBSTthQUNELFVBQVUsQ0FBQyxPQUFPLEVBQUU7WUFDbkIsSUFBSSxFQUFFLHVHQUF1RztZQUM3RyxJQUFJLEVBQUUsUUFBUTtTQUNmLENBQUM7YUFDRCxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHO1lBQ25CLFFBQVEsRUFBRSxJQUFJO1lBQ2QsSUFBSSxFQUFFLDhDQUE4QztZQUNwRCxLQUFLLEVBQUUsR0FBRztTQUNYLENBQUM7YUFDRCxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ2hCLE9BQU8sRUFBRSxNQUFNLENBQUMsTUFBTTtZQUN0QixRQUFRLEVBQUUsSUFBSTtZQUNkLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDO2FBQ0QsTUFBTSxDQUFDLGNBQWMsRUFBRTtZQUN0QixJQUFJLEVBQUUsU0FBUztZQUNmLE9BQU8sRUFBRSxLQUFLO1lBQ2QsUUFBUSxFQUFFLEtBQUs7WUFDZixJQUFJLEVBQUUsY0FBYztTQUNyQixDQUFDO2FBQ0QsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBb0I1QixDQUFDO0lBbEJRLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBUztRQUM1Qiw0Q0FBMEIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyQyxNQUFNLHFDQUFxQixFQUFFLENBQUM7UUFDOUIsTUFBTSxvQ0FBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ3pCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDM0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNyQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRXpCLE1BQU0sc0JBQVMsQ0FDYixlQUFLLENBQUMsYUFBYSxDQUFDLGVBQU0sRUFBRTtZQUMxQixTQUFTLEVBQUUsTUFBTTtZQUNqQixXQUFXLEVBQUUsS0FBSztZQUNsQixZQUFZLEVBQUUsT0FBTztZQUNyQixXQUFXO1NBQ1osQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB5YXJncyBmcm9tIFwieWFyZ3NcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IERlcGxveSB9IGZyb20gXCIuL3VpL2RlcGxveVwiO1xuaW1wb3J0IHsgY29uZmlnIGFzIGNmZyB9IGZyb20gXCJAY2RrdGYvcHJvdmlkZXItZ2VuZXJhdG9yXCI7XG5pbXBvcnQgeyByZW5kZXJJbmsgfSBmcm9tIFwiLi9oZWxwZXIvcmVuZGVyLWlua1wiO1xuaW1wb3J0IHsgZGlzcGxheVZlcnNpb25NZXNzYWdlIH0gZnJvbSBcIi4vaGVscGVyL3ZlcnNpb24tY2hlY2tcIjtcbmltcG9ydCB7IHRocm93SWZOb3RQcm9qZWN0RGlyZWN0b3J5IH0gZnJvbSBcIi4vaGVscGVyL2NoZWNrLWRpcmVjdG9yeVwiO1xuaW1wb3J0IHsgY2hlY2tFbnZpcm9ubWVudCB9IGZyb20gXCIuL2hlbHBlci9jaGVjay1lbnZpcm9ubWVudFwiO1xuXG5jb25zdCBjb25maWcgPSBjZmcucmVhZENvbmZpZ1N5bmMoKTtcblxuY2xhc3MgQ29tbWFuZCBpbXBsZW1lbnRzIHlhcmdzLkNvbW1hbmRNb2R1bGUge1xuICBwdWJsaWMgcmVhZG9ubHkgY29tbWFuZCA9IFwiZGVwbG95IFtzdGFja10gW09QVElPTlNdXCI7XG4gIHB1YmxpYyByZWFkb25seSBkZXNjcmliZSA9IFwiRGVwbG95IHRoZSBnaXZlbiBzdGFja1wiO1xuICBwdWJsaWMgcmVhZG9ubHkgYWxpYXNlcyA9IFtcImFwcGx5XCJdO1xuXG4gIHB1YmxpYyByZWFkb25seSBidWlsZGVyID0gKGFyZ3M6IHlhcmdzLkFyZ3YpID0+XG4gICAgYXJnc1xuICAgICAgLnBvc2l0aW9uYWwoXCJzdGFja1wiLCB7XG4gICAgICAgIGRlc2M6IFwiRGVwbG95IHN0YWNrIHdoaWNoIG1hdGNoZXMgdGhlIGdpdmVuIGlkIG9ubHkuIFJlcXVpcmVkIHdoZW4gbW9yZSB0aGFuIG9uZSBzdGFjayBpcyBwcmVzZW50IGluIHRoZSBhcHBcIixcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwiYXBwXCIsIHtcbiAgICAgICAgZGVmYXVsdDogY29uZmlnLmFwcCxcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIGRlc2M6IFwiQ29tbWFuZCB0byB1c2UgaW4gb3JkZXIgdG8gZXhlY3V0ZSBjZGt0ZiBhcHBcIixcbiAgICAgICAgYWxpYXM6IFwiYVwiLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJvdXRwdXRcIiwge1xuICAgICAgICBkZWZhdWx0OiBjb25maWcub3V0cHV0LFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgZGVzYzogXCJPdXRwdXQgZGlyZWN0b3J5XCIsXG4gICAgICAgIGFsaWFzOiBcIm9cIixcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwiYXV0by1hcHByb3ZlXCIsIHtcbiAgICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgIGRlc2M6IFwiQXV0byBhcHByb3ZlXCIsXG4gICAgICB9KVxuICAgICAgLnNob3dIZWxwT25GYWlsKHRydWUpO1xuXG4gIHB1YmxpYyBhc3luYyBoYW5kbGVyKGFyZ3Y6IGFueSkge1xuICAgIHRocm93SWZOb3RQcm9qZWN0RGlyZWN0b3J5KFwiZGVwbG95XCIpO1xuICAgIGF3YWl0IGRpc3BsYXlWZXJzaW9uTWVzc2FnZSgpO1xuICAgIGF3YWl0IGNoZWNrRW52aXJvbm1lbnQoXCJkZXBsb3lcIik7XG4gICAgY29uc3QgY29tbWFuZCA9IGFyZ3YuYXBwO1xuICAgIGNvbnN0IG91dGRpciA9IGFyZ3Yub3V0cHV0O1xuICAgIGNvbnN0IGF1dG9BcHByb3ZlID0gYXJndi5hdXRvQXBwcm92ZTtcbiAgICBjb25zdCBzdGFjayA9IGFyZ3Yuc3RhY2s7XG5cbiAgICBhd2FpdCByZW5kZXJJbmsoXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERlcGxveSwge1xuICAgICAgICB0YXJnZXREaXI6IG91dGRpcixcbiAgICAgICAgdGFyZ2V0U3RhY2s6IHN0YWNrLFxuICAgICAgICBzeW50aENvbW1hbmQ6IGNvbW1hbmQsXG4gICAgICAgIGF1dG9BcHByb3ZlLFxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IENvbW1hbmQoKTtcbiJdfQ==