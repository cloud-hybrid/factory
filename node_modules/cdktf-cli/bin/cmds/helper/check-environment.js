"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkEnvironment = void 0;
const path = __importStar(require("path"));
const semver = __importStar(require("semver"));
const errors_1 = require("../../../lib/errors");
const util_1 = require("../../../lib/util");
function throwIfLowerVersion(command, language, minVersion, stdout) {
    const version = semver.coerce(stdout);
    if (!version || !semver.valid(version)) {
        console.error(errors_1.Errors.Internal(command, `Unable to parse ${language} version "${stdout}"`));
        return;
    }
    if (semver.lt(version, minVersion)) {
        console.error(errors_1.Errors.Usage(command, `${language} version "${version}" is not supported. Please upgrade to at least ${minVersion}`));
    }
}
function getBinaryVersion(command, binary, versionCommand) {
    try {
        return util_1.exec(binary, [versionCommand], { env: process.env });
    }
    catch (e) {
        throw errors_1.Errors.Usage(command, `Unable to run ${binary} ${versionCommand}, please check if ${binary} is installed: ${e}`);
    }
}
async function checkGoVersion(command) {
    const out = await getBinaryVersion(command, "go", "version");
    throwIfLowerVersion(command, "Go", "1.16.0", out);
}
async function checkNodeVersion(command) {
    const out = await getBinaryVersion(command, "node", "--version");
    throwIfLowerVersion(command, "Node.js", "12.16.0", out);
}
async function checkEnvironment(command, projectPath = process.cwd()) {
    await checkNodeVersion(command);
    let language;
    try {
        const cdktfJson = require(path.resolve(projectPath, "cdktf.json"));
        language = cdktfJson.language;
    }
    catch (_a) {
        // We can not detect the language
    }
    switch (language) {
        case "go":
            await checkGoVersion(command);
    }
}
exports.checkEnvironment = checkEnvironment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2stZW52aXJvbm1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGVjay1lbnZpcm9ubWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQTZCO0FBQzdCLCtDQUFpQztBQUNqQyxnREFBNkM7QUFDN0MsNENBQXlDO0FBRXpDLFNBQVMsbUJBQW1CLENBQzFCLE9BQWUsRUFDZixRQUFnQixFQUNoQixVQUFrQixFQUNsQixNQUFjO0lBRWQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN0QyxPQUFPLENBQUMsS0FBSyxDQUNYLGVBQU0sQ0FBQyxRQUFRLENBQ2IsT0FBTyxFQUNQLG1CQUFtQixRQUFRLGFBQWEsTUFBTSxHQUFHLENBQ2xELENBQ0YsQ0FBQztRQUNGLE9BQU87S0FDUjtJQUVELElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLEVBQUU7UUFDbEMsT0FBTyxDQUFDLEtBQUssQ0FDWCxlQUFNLENBQUMsS0FBSyxDQUNWLE9BQU8sRUFDUCxHQUFHLFFBQVEsYUFBYSxPQUFPLGtEQUFrRCxVQUFVLEVBQUUsQ0FDOUYsQ0FDRixDQUFDO0tBQ0g7QUFDSCxDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FDdkIsT0FBZSxFQUNmLE1BQWMsRUFDZCxjQUFzQjtJQUV0QixJQUFJO1FBQ0YsT0FBTyxXQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsY0FBYyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7S0FDN0Q7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE1BQU0sZUFBTSxDQUFDLEtBQUssQ0FDaEIsT0FBTyxFQUNQLGlCQUFpQixNQUFNLElBQUksY0FBYyxxQkFBcUIsTUFBTSxrQkFBa0IsQ0FBQyxFQUFFLENBQzFGLENBQUM7S0FDSDtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsY0FBYyxDQUFDLE9BQWU7SUFDM0MsTUFBTSxHQUFHLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzdELG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFFRCxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsT0FBZTtJQUM3QyxNQUFNLEdBQUcsR0FBRyxNQUFNLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDakUsbUJBQW1CLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUVNLEtBQUssVUFBVSxnQkFBZ0IsQ0FDcEMsT0FBZSxFQUNmLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFO0lBRTNCLE1BQU0sZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFaEMsSUFBSSxRQUE0QixDQUFDO0lBQ2pDLElBQUk7UUFDRixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNuRSxRQUFRLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztLQUMvQjtJQUFDLFdBQU07UUFDTixpQ0FBaUM7S0FDbEM7SUFFRCxRQUFRLFFBQVEsRUFBRTtRQUNoQixLQUFLLElBQUk7WUFDUCxNQUFNLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNqQztBQUNILENBQUM7QUFsQkQsNENBa0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgc2VtdmVyIGZyb20gXCJzZW12ZXJcIjtcbmltcG9ydCB7IEVycm9ycyB9IGZyb20gXCIuLi8uLi8uLi9saWIvZXJyb3JzXCI7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSBcIi4uLy4uLy4uL2xpYi91dGlsXCI7XG5cbmZ1bmN0aW9uIHRocm93SWZMb3dlclZlcnNpb24oXG4gIGNvbW1hbmQ6IHN0cmluZyxcbiAgbGFuZ3VhZ2U6IHN0cmluZyxcbiAgbWluVmVyc2lvbjogc3RyaW5nLFxuICBzdGRvdXQ6IHN0cmluZ1xuKSB7XG4gIGNvbnN0IHZlcnNpb24gPSBzZW12ZXIuY29lcmNlKHN0ZG91dCk7XG4gIGlmICghdmVyc2lvbiB8fCAhc2VtdmVyLnZhbGlkKHZlcnNpb24pKSB7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgIEVycm9ycy5JbnRlcm5hbChcbiAgICAgICAgY29tbWFuZCxcbiAgICAgICAgYFVuYWJsZSB0byBwYXJzZSAke2xhbmd1YWdlfSB2ZXJzaW9uIFwiJHtzdGRvdXR9XCJgXG4gICAgICApXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc2VtdmVyLmx0KHZlcnNpb24sIG1pblZlcnNpb24pKSB7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgIEVycm9ycy5Vc2FnZShcbiAgICAgICAgY29tbWFuZCxcbiAgICAgICAgYCR7bGFuZ3VhZ2V9IHZlcnNpb24gXCIke3ZlcnNpb259XCIgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHVwZ3JhZGUgdG8gYXQgbGVhc3QgJHttaW5WZXJzaW9ufWBcbiAgICAgIClcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEJpbmFyeVZlcnNpb24oXG4gIGNvbW1hbmQ6IHN0cmluZyxcbiAgYmluYXJ5OiBzdHJpbmcsXG4gIHZlcnNpb25Db21tYW5kOiBzdHJpbmdcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGV4ZWMoYmluYXJ5LCBbdmVyc2lvbkNvbW1hbmRdLCB7IGVudjogcHJvY2Vzcy5lbnYgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBFcnJvcnMuVXNhZ2UoXG4gICAgICBjb21tYW5kLFxuICAgICAgYFVuYWJsZSB0byBydW4gJHtiaW5hcnl9ICR7dmVyc2lvbkNvbW1hbmR9LCBwbGVhc2UgY2hlY2sgaWYgJHtiaW5hcnl9IGlzIGluc3RhbGxlZDogJHtlfWBcbiAgICApO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoZWNrR29WZXJzaW9uKGNvbW1hbmQ6IHN0cmluZykge1xuICBjb25zdCBvdXQgPSBhd2FpdCBnZXRCaW5hcnlWZXJzaW9uKGNvbW1hbmQsIFwiZ29cIiwgXCJ2ZXJzaW9uXCIpO1xuICB0aHJvd0lmTG93ZXJWZXJzaW9uKGNvbW1hbmQsIFwiR29cIiwgXCIxLjE2LjBcIiwgb3V0KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tOb2RlVmVyc2lvbihjb21tYW5kOiBzdHJpbmcpIHtcbiAgY29uc3Qgb3V0ID0gYXdhaXQgZ2V0QmluYXJ5VmVyc2lvbihjb21tYW5kLCBcIm5vZGVcIiwgXCItLXZlcnNpb25cIik7XG4gIHRocm93SWZMb3dlclZlcnNpb24oY29tbWFuZCwgXCJOb2RlLmpzXCIsIFwiMTIuMTYuMFwiLCBvdXQpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tFbnZpcm9ubWVudChcbiAgY29tbWFuZDogc3RyaW5nLFxuICBwcm9qZWN0UGF0aCA9IHByb2Nlc3MuY3dkKClcbikge1xuICBhd2FpdCBjaGVja05vZGVWZXJzaW9uKGNvbW1hbmQpO1xuXG4gIGxldCBsYW5ndWFnZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICB0cnkge1xuICAgIGNvbnN0IGNka3RmSnNvbiA9IHJlcXVpcmUocGF0aC5yZXNvbHZlKHByb2plY3RQYXRoLCBcImNka3RmLmpzb25cIikpO1xuICAgIGxhbmd1YWdlID0gY2RrdGZKc29uLmxhbmd1YWdlO1xuICB9IGNhdGNoIHtcbiAgICAvLyBXZSBjYW4gbm90IGRldGVjdCB0aGUgbGFuZ3VhZ2VcbiAgfVxuXG4gIHN3aXRjaCAobGFuZ3VhZ2UpIHtcbiAgICBjYXNlIFwiZ29cIjpcbiAgICAgIGF3YWl0IGNoZWNrR29WZXJzaW9uKGNvbW1hbmQpO1xuICB9XG59XG4iXX0=