"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const terraform_check_1 = require("./helper/terraform-check");
const version_check_1 = require("./helper/version-check");
const init_1 = require("./helper/init");
const check_environment_1 = require("./helper/check-environment");
const utilities_1 = require("./helper/utilities");
const pkg = utilities_1.readPackageJson();
class Command {
    constructor() {
        this.command = "init [OPTIONS]";
        this.describe = "Create a new cdktf project from a template.";
        this.builder = (args) => args
            .showHelpOnFail(true)
            .option("template", {
            type: "string",
            desc: `The template to be used to create a new project. Either URL to zip file or one of the built-in templates: [${init_1.templates
                .map((t) => `"${t}"`)
                .join(", ")}]`,
        })
            .option("project-name", {
            type: "string",
            desc: "The name of the project.",
        })
            .option("project-description", {
            type: "string",
            desc: "The description of the project.",
        })
            .option("dist", {
            type: "string",
            desc: 'Install dependencies from a "dist" directory (for development)',
        })
            .option("local", {
            type: "boolean",
            desc: "Use local state storage for generated Terraform.",
            default: false,
        })
            .option("cdktf-version", {
            type: "string",
            desc: "The cdktf version to use while creating a new project.",
            default: pkg.version,
        })
            .option("from-terraform-project", {
            type: "string",
            desc: "Use a terraform project as the basis, CDK constructs will be generated based on the .tf files in the path",
        })
            .strict();
    }
    async handler(argv) {
        await terraform_check_1.terraformCheck();
        await version_check_1.displayVersionMessage();
        await check_environment_1.checkEnvironment("init");
        init_1.checkForEmptyDirectory(".");
        await init_1.runInit(argv);
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw4REFBMEQ7QUFDMUQsMERBQStEO0FBQy9ELHdDQUEyRTtBQUMzRSxrRUFBOEQ7QUFDOUQsa0RBQXFEO0FBRXJELE1BQU0sR0FBRyxHQUFHLDJCQUFlLEVBQUUsQ0FBQztBQUU5QixNQUFNLE9BQU87SUFBYjtRQUNrQixZQUFPLEdBQUcsZ0JBQWdCLENBQUM7UUFDM0IsYUFBUSxHQUFHLDZDQUE2QyxDQUFDO1FBQ3pELFlBQU8sR0FBRyxDQUFDLElBQWdCLEVBQUUsRUFBRSxDQUM3QyxJQUFJO2FBQ0QsY0FBYyxDQUFDLElBQUksQ0FBQzthQUNwQixNQUFNLENBQUMsVUFBVSxFQUFFO1lBQ2xCLElBQUksRUFBRSxRQUFRO1lBQ2QsSUFBSSxFQUFFLDhHQUE4RyxnQkFBUztpQkFDMUgsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2lCQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7U0FDakIsQ0FBQzthQUNELE1BQU0sQ0FBQyxjQUFjLEVBQUU7WUFDdEIsSUFBSSxFQUFFLFFBQVE7WUFDZCxJQUFJLEVBQUUsMEJBQTBCO1NBQ2pDLENBQUM7YUFDRCxNQUFNLENBQUMscUJBQXFCLEVBQUU7WUFDN0IsSUFBSSxFQUFFLFFBQVE7WUFDZCxJQUFJLEVBQUUsaUNBQWlDO1NBQ3hDLENBQUM7YUFDRCxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2QsSUFBSSxFQUFFLFFBQVE7WUFDZCxJQUFJLEVBQUUsZ0VBQWdFO1NBQ3ZFLENBQUM7YUFDRCxNQUFNLENBQUMsT0FBTyxFQUFFO1lBQ2YsSUFBSSxFQUFFLFNBQVM7WUFDZixJQUFJLEVBQUUsa0RBQWtEO1lBQ3hELE9BQU8sRUFBRSxLQUFLO1NBQ2YsQ0FBQzthQUNELE1BQU0sQ0FBQyxlQUFlLEVBQUU7WUFDdkIsSUFBSSxFQUFFLFFBQVE7WUFDZCxJQUFJLEVBQUUsd0RBQXdEO1lBQzlELE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTztTQUNyQixDQUFDO2FBQ0QsTUFBTSxDQUFDLHdCQUF3QixFQUFFO1lBQ2hDLElBQUksRUFBRSxRQUFRO1lBQ2QsSUFBSSxFQUFFLDJHQUEyRztTQUNsSCxDQUFDO2FBQ0QsTUFBTSxFQUFFLENBQUM7SUFXaEIsQ0FBQztJQVRRLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBUztRQUM1QixNQUFNLGdDQUFjLEVBQUUsQ0FBQztRQUN2QixNQUFNLHFDQUFxQixFQUFFLENBQUM7UUFDOUIsTUFBTSxvQ0FBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUvQiw2QkFBc0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU1QixNQUFNLGNBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeWFyZ3MgZnJvbSBcInlhcmdzXCI7XG5pbXBvcnQgeyB0ZXJyYWZvcm1DaGVjayB9IGZyb20gXCIuL2hlbHBlci90ZXJyYWZvcm0tY2hlY2tcIjtcbmltcG9ydCB7IGRpc3BsYXlWZXJzaW9uTWVzc2FnZSB9IGZyb20gXCIuL2hlbHBlci92ZXJzaW9uLWNoZWNrXCI7XG5pbXBvcnQgeyBjaGVja0ZvckVtcHR5RGlyZWN0b3J5LCBydW5Jbml0LCB0ZW1wbGF0ZXMgfSBmcm9tIFwiLi9oZWxwZXIvaW5pdFwiO1xuaW1wb3J0IHsgY2hlY2tFbnZpcm9ubWVudCB9IGZyb20gXCIuL2hlbHBlci9jaGVjay1lbnZpcm9ubWVudFwiO1xuaW1wb3J0IHsgcmVhZFBhY2thZ2VKc29uIH0gZnJvbSBcIi4vaGVscGVyL3V0aWxpdGllc1wiO1xuXG5jb25zdCBwa2cgPSByZWFkUGFja2FnZUpzb24oKTtcblxuY2xhc3MgQ29tbWFuZCBpbXBsZW1lbnRzIHlhcmdzLkNvbW1hbmRNb2R1bGUge1xuICBwdWJsaWMgcmVhZG9ubHkgY29tbWFuZCA9IFwiaW5pdCBbT1BUSU9OU11cIjtcbiAgcHVibGljIHJlYWRvbmx5IGRlc2NyaWJlID0gXCJDcmVhdGUgYSBuZXcgY2RrdGYgcHJvamVjdCBmcm9tIGEgdGVtcGxhdGUuXCI7XG4gIHB1YmxpYyByZWFkb25seSBidWlsZGVyID0gKGFyZ3M6IHlhcmdzLkFyZ3YpID0+XG4gICAgYXJnc1xuICAgICAgLnNob3dIZWxwT25GYWlsKHRydWUpXG4gICAgICAub3B0aW9uKFwidGVtcGxhdGVcIiwge1xuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICBkZXNjOiBgVGhlIHRlbXBsYXRlIHRvIGJlIHVzZWQgdG8gY3JlYXRlIGEgbmV3IHByb2plY3QuIEVpdGhlciBVUkwgdG8gemlwIGZpbGUgb3Igb25lIG9mIHRoZSBidWlsdC1pbiB0ZW1wbGF0ZXM6IFske3RlbXBsYXRlc1xuICAgICAgICAgIC5tYXAoKHQpID0+IGBcIiR7dH1cImApXG4gICAgICAgICAgLmpvaW4oXCIsIFwiKX1dYCxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwicHJvamVjdC1uYW1lXCIsIHtcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgZGVzYzogXCJUaGUgbmFtZSBvZiB0aGUgcHJvamVjdC5cIixcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwicHJvamVjdC1kZXNjcmlwdGlvblwiLCB7XG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIGRlc2M6IFwiVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBwcm9qZWN0LlwiLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJkaXN0XCIsIHtcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgZGVzYzogJ0luc3RhbGwgZGVwZW5kZW5jaWVzIGZyb20gYSBcImRpc3RcIiBkaXJlY3RvcnkgKGZvciBkZXZlbG9wbWVudCknLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJsb2NhbFwiLCB7XG4gICAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxuICAgICAgICBkZXNjOiBcIlVzZSBsb2NhbCBzdGF0ZSBzdG9yYWdlIGZvciBnZW5lcmF0ZWQgVGVycmFmb3JtLlwiLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwiY2RrdGYtdmVyc2lvblwiLCB7XG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIGRlc2M6IFwiVGhlIGNka3RmIHZlcnNpb24gdG8gdXNlIHdoaWxlIGNyZWF0aW5nIGEgbmV3IHByb2plY3QuXCIsXG4gICAgICAgIGRlZmF1bHQ6IHBrZy52ZXJzaW9uLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJmcm9tLXRlcnJhZm9ybS1wcm9qZWN0XCIsIHtcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgZGVzYzogXCJVc2UgYSB0ZXJyYWZvcm0gcHJvamVjdCBhcyB0aGUgYmFzaXMsIENESyBjb25zdHJ1Y3RzIHdpbGwgYmUgZ2VuZXJhdGVkIGJhc2VkIG9uIHRoZSAudGYgZmlsZXMgaW4gdGhlIHBhdGhcIixcbiAgICAgIH0pXG4gICAgICAuc3RyaWN0KCk7XG5cbiAgcHVibGljIGFzeW5jIGhhbmRsZXIoYXJndjogYW55KSB7XG4gICAgYXdhaXQgdGVycmFmb3JtQ2hlY2soKTtcbiAgICBhd2FpdCBkaXNwbGF5VmVyc2lvbk1lc3NhZ2UoKTtcbiAgICBhd2FpdCBjaGVja0Vudmlyb25tZW50KFwiaW5pdFwiKTtcblxuICAgIGNoZWNrRm9yRW1wdHlEaXJlY3RvcnkoXCIuXCIpO1xuXG4gICAgYXdhaXQgcnVuSW5pdChhcmd2KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBDb21tYW5kKCk7XG4iXX0=