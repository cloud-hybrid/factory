"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const terraform_login_1 = require("./helper/terraform-login");
const terraformCloudClient = __importStar(require("./helper/terraform-cloud-client"));
const chalk = __importStar(require("chalk"));
const terraform_check_1 = require("./helper/terraform-check");
const version_check_1 = require("./helper/version-check");
const chalkColour = new chalk.Instance();
class Command {
    constructor() {
        this.command = "login";
        this.describe = "Retrieves an API token to connect to Terraform Cloud.";
        this.builder = (args) => args.showHelpOnFail(true);
    }
    async handler(argv) {
        await terraform_check_1.terraformCheck();
        await version_check_1.displayVersionMessage();
        const args = argv;
        if (args["_"].length > 1) {
            console.error(chalkColour `{redBright ERROR: 'cdktf login' command cannot have more than one argument.}\n`);
            yargs_1.default.showHelp();
            process.exit(1);
        }
        const terraformLogin = new terraform_login_1.TerraformLogin();
        const token = await terraformLogin.askToLogin();
        if (token == "") {
            console.error(chalkColour `{redBright ERROR: couldn't configure Terraform Cloud credentials.}\n`);
            process.exit(1);
        }
        // Get user details if token is set
        const userAccount = await terraformCloudClient.getAccountDetails(token);
        if (userAccount) {
            const username = userAccount.data.attributes.username;
            console.log(chalkColour `\n{greenBright cdktf has successfully configured Terraform Cloud credentials!}`);
            console.log(chalkColour `\nWelcome {bold ${username}}!`);
        }
        else {
            console.error(chalkColour `{redBright ERROR: couldn't configure Terraform Cloud credentials.}\n`);
            process.exit(1);
        }
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2dpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxrREFBMEI7QUFDMUIsOERBQTBEO0FBQzFELHNGQUF3RTtBQUN4RSw2Q0FBK0I7QUFDL0IsOERBQTBEO0FBQzFELDBEQUErRDtBQUUvRCxNQUFNLFdBQVcsR0FBRyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUV6QyxNQUFNLE9BQU87SUFBYjtRQUNrQixZQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ2xCLGFBQVEsR0FDdEIsdURBQXVELENBQUM7UUFDMUMsWUFBTyxHQUFHLENBQUMsSUFBZ0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQXVDNUUsQ0FBQztJQXJDUSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQVM7UUFDNUIsTUFBTSxnQ0FBYyxFQUFFLENBQUM7UUFDdkIsTUFBTSxxQ0FBcUIsRUFBRSxDQUFDO1FBRTlCLE1BQU0sSUFBSSxHQUFHLElBQXVCLENBQUM7UUFDckMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN4QixPQUFPLENBQUMsS0FBSyxDQUNYLFdBQVcsQ0FBQSxnRkFBZ0YsQ0FDNUYsQ0FBQztZQUNGLGVBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNqQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO1FBRUQsTUFBTSxjQUFjLEdBQUcsSUFBSSxnQ0FBYyxFQUFFLENBQUM7UUFDNUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxjQUFjLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDaEQsSUFBSSxLQUFLLElBQUksRUFBRSxFQUFFO1lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FDWCxXQUFXLENBQUEsc0VBQXNFLENBQ2xGLENBQUM7WUFDRixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO1FBRUQsbUNBQW1DO1FBQ25DLE1BQU0sV0FBVyxHQUFHLE1BQU0sb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEUsSUFBSSxXQUFXLEVBQUU7WUFDZixNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDdEQsT0FBTyxDQUFDLEdBQUcsQ0FDVCxXQUFXLENBQUEsZ0ZBQWdGLENBQzVGLENBQUM7WUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQSxtQkFBbUIsUUFBUSxJQUFJLENBQUMsQ0FBQztTQUN6RDthQUFNO1lBQ0wsT0FBTyxDQUFDLEtBQUssQ0FDWCxXQUFXLENBQUEsc0VBQXNFLENBQ2xGLENBQUM7WUFDRixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHlhcmdzIGZyb20gXCJ5YXJnc1wiO1xuaW1wb3J0IHsgVGVycmFmb3JtTG9naW4gfSBmcm9tIFwiLi9oZWxwZXIvdGVycmFmb3JtLWxvZ2luXCI7XG5pbXBvcnQgKiBhcyB0ZXJyYWZvcm1DbG91ZENsaWVudCBmcm9tIFwiLi9oZWxwZXIvdGVycmFmb3JtLWNsb3VkLWNsaWVudFwiO1xuaW1wb3J0ICogYXMgY2hhbGsgZnJvbSBcImNoYWxrXCI7XG5pbXBvcnQgeyB0ZXJyYWZvcm1DaGVjayB9IGZyb20gXCIuL2hlbHBlci90ZXJyYWZvcm0tY2hlY2tcIjtcbmltcG9ydCB7IGRpc3BsYXlWZXJzaW9uTWVzc2FnZSB9IGZyb20gXCIuL2hlbHBlci92ZXJzaW9uLWNoZWNrXCI7XG5cbmNvbnN0IGNoYWxrQ29sb3VyID0gbmV3IGNoYWxrLkluc3RhbmNlKCk7XG5cbmNsYXNzIENvbW1hbmQgaW1wbGVtZW50cyB5YXJncy5Db21tYW5kTW9kdWxlIHtcbiAgcHVibGljIHJlYWRvbmx5IGNvbW1hbmQgPSBcImxvZ2luXCI7XG4gIHB1YmxpYyByZWFkb25seSBkZXNjcmliZSA9XG4gICAgXCJSZXRyaWV2ZXMgYW4gQVBJIHRva2VuIHRvIGNvbm5lY3QgdG8gVGVycmFmb3JtIENsb3VkLlwiO1xuICBwdWJsaWMgcmVhZG9ubHkgYnVpbGRlciA9IChhcmdzOiB5YXJncy5Bcmd2KSA9PiBhcmdzLnNob3dIZWxwT25GYWlsKHRydWUpO1xuXG4gIHB1YmxpYyBhc3luYyBoYW5kbGVyKGFyZ3Y6IGFueSkge1xuICAgIGF3YWl0IHRlcnJhZm9ybUNoZWNrKCk7XG4gICAgYXdhaXQgZGlzcGxheVZlcnNpb25NZXNzYWdlKCk7XG5cbiAgICBjb25zdCBhcmdzID0gYXJndiBhcyB5YXJncy5Bcmd1bWVudHM7XG4gICAgaWYgKGFyZ3NbXCJfXCJdLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGNoYWxrQ29sb3VyYHtyZWRCcmlnaHQgRVJST1I6ICdjZGt0ZiBsb2dpbicgY29tbWFuZCBjYW5ub3QgaGF2ZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50Ln1cXG5gXG4gICAgICApO1xuICAgICAgeWFyZ3Muc2hvd0hlbHAoKTtcbiAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICB9XG5cbiAgICBjb25zdCB0ZXJyYWZvcm1Mb2dpbiA9IG5ldyBUZXJyYWZvcm1Mb2dpbigpO1xuICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdGVycmFmb3JtTG9naW4uYXNrVG9Mb2dpbigpO1xuICAgIGlmICh0b2tlbiA9PSBcIlwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBjaGFsa0NvbG91cmB7cmVkQnJpZ2h0IEVSUk9SOiBjb3VsZG4ndCBjb25maWd1cmUgVGVycmFmb3JtIENsb3VkIGNyZWRlbnRpYWxzLn1cXG5gXG4gICAgICApO1xuICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cblxuICAgIC8vIEdldCB1c2VyIGRldGFpbHMgaWYgdG9rZW4gaXMgc2V0XG4gICAgY29uc3QgdXNlckFjY291bnQgPSBhd2FpdCB0ZXJyYWZvcm1DbG91ZENsaWVudC5nZXRBY2NvdW50RGV0YWlscyh0b2tlbik7XG4gICAgaWYgKHVzZXJBY2NvdW50KSB7XG4gICAgICBjb25zdCB1c2VybmFtZSA9IHVzZXJBY2NvdW50LmRhdGEuYXR0cmlidXRlcy51c2VybmFtZTtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBjaGFsa0NvbG91cmBcXG57Z3JlZW5CcmlnaHQgY2RrdGYgaGFzIHN1Y2Nlc3NmdWxseSBjb25maWd1cmVkIFRlcnJhZm9ybSBDbG91ZCBjcmVkZW50aWFscyF9YFxuICAgICAgKTtcbiAgICAgIGNvbnNvbGUubG9nKGNoYWxrQ29sb3VyYFxcbldlbGNvbWUge2JvbGQgJHt1c2VybmFtZX19IWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBjaGFsa0NvbG91cmB7cmVkQnJpZ2h0IEVSUk9SOiBjb3VsZG4ndCBjb25maWd1cmUgVGVycmFmb3JtIENsb3VkIGNyZWRlbnRpYWxzLn1cXG5gXG4gICAgICApO1xuICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBDb21tYW5kKCk7XG4iXX0=