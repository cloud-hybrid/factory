"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const synth_1 = require("./ui/synth");
const provider_generator_1 = require("@cdktf/provider-generator");
const render_ink_1 = require("./helper/render-ink");
const fs = __importStar(require("fs-extra"));
const version_check_1 = require("./helper/version-check");
const check_directory_1 = require("./helper/check-directory");
const check_environment_1 = require("./helper/check-environment");
const config = provider_generator_1.config.readConfigSync();
class Command {
    constructor() {
        this.command = "synth [stack] [OPTIONS]";
        this.describe = "Synthesizes Terraform code for the given app in a directory.";
        this.aliases = ["synthesize"];
        this.builder = (args) => args
            .positional("stack", {
            desc: "Stack to output when using --json flag",
            type: "string",
        })
            .option("app", {
            default: config.app,
            desc: "Command to use in order to execute cdktf app",
            alias: "a",
        })
            .option("output", {
            default: config.output,
            desc: "Output directory",
            alias: "o",
        })
            .option("json", {
            type: "boolean",
            desc: "Provide JSON output for the generated Terraform configuration.",
            default: false,
        })
            .showHelpOnFail(true);
    }
    async handler(argv) {
        check_directory_1.throwIfNotProjectDirectory("synth");
        await version_check_1.displayVersionMessage();
        await check_environment_1.checkEnvironment("synth");
        const command = argv.app;
        const outdir = argv.output;
        const jsonOutput = argv.json;
        const stack = argv.stack;
        if (config.checkCodeMakerOutput &&
            !(await fs.pathExists(config.codeMakerOutput))) {
            console.error(`ERROR: synthesis failed, run "cdktf get" to generate providers in ${config.codeMakerOutput}`);
            process.exit(1);
        }
        await render_ink_1.renderInk(react_1.default.createElement(synth_1.Synth, {
            targetDir: outdir,
            targetStack: stack,
            synthCommand: command,
            jsonOutput: jsonOutput,
        }));
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ludGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzeW50aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxrREFBMEI7QUFDMUIsc0NBQW1DO0FBQ25DLGtFQUEwRDtBQUMxRCxvREFBZ0Q7QUFDaEQsNkNBQStCO0FBQy9CLDBEQUErRDtBQUMvRCw4REFBc0U7QUFDdEUsa0VBQThEO0FBRTlELE1BQU0sTUFBTSxHQUFHLDJCQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7QUFFcEMsTUFBTSxPQUFPO0lBQWI7UUFDa0IsWUFBTyxHQUFHLHlCQUF5QixDQUFDO1FBQ3BDLGFBQVEsR0FDdEIsOERBQThELENBQUM7UUFDakQsWUFBTyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFekIsWUFBTyxHQUFHLENBQUMsSUFBZ0IsRUFBRSxFQUFFLENBQzdDLElBQUk7YUFDRCxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQ25CLElBQUksRUFBRSx3Q0FBd0M7WUFDOUMsSUFBSSxFQUFFLFFBQVE7U0FDZixDQUFDO2FBQ0QsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNiLE9BQU8sRUFBRSxNQUFNLENBQUMsR0FBRztZQUNuQixJQUFJLEVBQUUsOENBQThDO1lBQ3BELEtBQUssRUFBRSxHQUFHO1NBQ1gsQ0FBQzthQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNO1lBQ3RCLElBQUksRUFBRSxrQkFBa0I7WUFDeEIsS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDO2FBQ0QsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNkLElBQUksRUFBRSxTQUFTO1lBQ2YsSUFBSSxFQUFFLGdFQUFnRTtZQUN0RSxPQUFPLEVBQUUsS0FBSztTQUNmLENBQUM7YUFDRCxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUE4QjVCLENBQUM7SUE1QlEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFTO1FBQzVCLDRDQUEwQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLE1BQU0scUNBQXFCLEVBQUUsQ0FBQztRQUM5QixNQUFNLG9DQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDekIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMzQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzdCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFekIsSUFDRSxNQUFNLENBQUMsb0JBQW9CO1lBQzNCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQzlDO1lBQ0EsT0FBTyxDQUFDLEtBQUssQ0FDWCxxRUFBcUUsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUM5RixDQUFDO1lBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQjtRQUVELE1BQU0sc0JBQVMsQ0FDYixlQUFLLENBQUMsYUFBYSxDQUFDLGFBQUssRUFBRTtZQUN6QixTQUFTLEVBQUUsTUFBTTtZQUNqQixXQUFXLEVBQUUsS0FBSztZQUNsQixZQUFZLEVBQUUsT0FBTztZQUNyQixVQUFVLEVBQUUsVUFBVTtTQUN2QixDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB5YXJncyBmcm9tIFwieWFyZ3NcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFN5bnRoIH0gZnJvbSBcIi4vdWkvc3ludGhcIjtcbmltcG9ydCB7IGNvbmZpZyBhcyBjZmcgfSBmcm9tIFwiQGNka3RmL3Byb3ZpZGVyLWdlbmVyYXRvclwiO1xuaW1wb3J0IHsgcmVuZGVySW5rIH0gZnJvbSBcIi4vaGVscGVyL3JlbmRlci1pbmtcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmcy1leHRyYVwiO1xuaW1wb3J0IHsgZGlzcGxheVZlcnNpb25NZXNzYWdlIH0gZnJvbSBcIi4vaGVscGVyL3ZlcnNpb24tY2hlY2tcIjtcbmltcG9ydCB7IHRocm93SWZOb3RQcm9qZWN0RGlyZWN0b3J5IH0gZnJvbSBcIi4vaGVscGVyL2NoZWNrLWRpcmVjdG9yeVwiO1xuaW1wb3J0IHsgY2hlY2tFbnZpcm9ubWVudCB9IGZyb20gXCIuL2hlbHBlci9jaGVjay1lbnZpcm9ubWVudFwiO1xuXG5jb25zdCBjb25maWcgPSBjZmcucmVhZENvbmZpZ1N5bmMoKTtcblxuY2xhc3MgQ29tbWFuZCBpbXBsZW1lbnRzIHlhcmdzLkNvbW1hbmRNb2R1bGUge1xuICBwdWJsaWMgcmVhZG9ubHkgY29tbWFuZCA9IFwic3ludGggW3N0YWNrXSBbT1BUSU9OU11cIjtcbiAgcHVibGljIHJlYWRvbmx5IGRlc2NyaWJlID1cbiAgICBcIlN5bnRoZXNpemVzIFRlcnJhZm9ybSBjb2RlIGZvciB0aGUgZ2l2ZW4gYXBwIGluIGEgZGlyZWN0b3J5LlwiO1xuICBwdWJsaWMgcmVhZG9ubHkgYWxpYXNlcyA9IFtcInN5bnRoZXNpemVcIl07XG5cbiAgcHVibGljIHJlYWRvbmx5IGJ1aWxkZXIgPSAoYXJnczogeWFyZ3MuQXJndikgPT5cbiAgICBhcmdzXG4gICAgICAucG9zaXRpb25hbChcInN0YWNrXCIsIHtcbiAgICAgICAgZGVzYzogXCJTdGFjayB0byBvdXRwdXQgd2hlbiB1c2luZyAtLWpzb24gZmxhZ1wiLFxuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oXCJhcHBcIiwge1xuICAgICAgICBkZWZhdWx0OiBjb25maWcuYXBwLFxuICAgICAgICBkZXNjOiBcIkNvbW1hbmQgdG8gdXNlIGluIG9yZGVyIHRvIGV4ZWN1dGUgY2RrdGYgYXBwXCIsXG4gICAgICAgIGFsaWFzOiBcImFcIixcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwib3V0cHV0XCIsIHtcbiAgICAgICAgZGVmYXVsdDogY29uZmlnLm91dHB1dCxcbiAgICAgICAgZGVzYzogXCJPdXRwdXQgZGlyZWN0b3J5XCIsXG4gICAgICAgIGFsaWFzOiBcIm9cIixcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKFwianNvblwiLCB7XG4gICAgICAgIHR5cGU6IFwiYm9vbGVhblwiLFxuICAgICAgICBkZXNjOiBcIlByb3ZpZGUgSlNPTiBvdXRwdXQgZm9yIHRoZSBnZW5lcmF0ZWQgVGVycmFmb3JtIGNvbmZpZ3VyYXRpb24uXCIsXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIC5zaG93SGVscE9uRmFpbCh0cnVlKTtcblxuICBwdWJsaWMgYXN5bmMgaGFuZGxlcihhcmd2OiBhbnkpIHtcbiAgICB0aHJvd0lmTm90UHJvamVjdERpcmVjdG9yeShcInN5bnRoXCIpO1xuICAgIGF3YWl0IGRpc3BsYXlWZXJzaW9uTWVzc2FnZSgpO1xuICAgIGF3YWl0IGNoZWNrRW52aXJvbm1lbnQoXCJzeW50aFwiKTtcbiAgICBjb25zdCBjb21tYW5kID0gYXJndi5hcHA7XG4gICAgY29uc3Qgb3V0ZGlyID0gYXJndi5vdXRwdXQ7XG4gICAgY29uc3QganNvbk91dHB1dCA9IGFyZ3YuanNvbjtcbiAgICBjb25zdCBzdGFjayA9IGFyZ3Yuc3RhY2s7XG5cbiAgICBpZiAoXG4gICAgICBjb25maWcuY2hlY2tDb2RlTWFrZXJPdXRwdXQgJiZcbiAgICAgICEoYXdhaXQgZnMucGF0aEV4aXN0cyhjb25maWcuY29kZU1ha2VyT3V0cHV0KSlcbiAgICApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGBFUlJPUjogc3ludGhlc2lzIGZhaWxlZCwgcnVuIFwiY2RrdGYgZ2V0XCIgdG8gZ2VuZXJhdGUgcHJvdmlkZXJzIGluICR7Y29uZmlnLmNvZGVNYWtlck91dHB1dH1gXG4gICAgICApO1xuICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgIH1cblxuICAgIGF3YWl0IHJlbmRlckluayhcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3ludGgsIHtcbiAgICAgICAgdGFyZ2V0RGlyOiBvdXRkaXIsXG4gICAgICAgIHRhcmdldFN0YWNrOiBzdGFjayxcbiAgICAgICAgc3ludGhDb21tYW5kOiBjb21tYW5kLFxuICAgICAgICBqc29uT3V0cHV0OiBqc29uT3V0cHV0LFxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IENvbW1hbmQoKTtcbiJdfQ==