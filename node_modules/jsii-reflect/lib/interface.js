"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _interfaces;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterfaceType = void 0;
const method_1 = require("./method");
const property_1 = require("./property");
const reference_type_1 = require("./reference-type");
const util_1 = require("./util");
class InterfaceType extends reference_type_1.ReferenceType {
    constructor(system, assembly, spec) {
        super(system, assembly, spec);
        this.system = system;
        this.assembly = assembly;
        this.spec = spec;
        /** Caches the result of `getInterfaces`. */
        // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility
        _interfaces.set(this, new Map());
    }
    /**
     * True if this interface only contains properties. Different backends might
     * have idiomatic ways to allow defining concrete instances such interfaces.
     * For example, in Java, the generator will produce a PoJo and a builder
     * which will allow users to create a concrete object with data which
     * adheres to this interface.
     */
    get datatype() {
        return this.isDataType();
    }
    /**
     * Lists all interfaces this interface extends.
     * @param inherited include all interfaces implemented by all super interfaces (default: false)
     */
    getInterfaces(inherited = false) {
        if (!this.spec.interfaces) {
            return [];
        }
        if (__classPrivateFieldGet(this, _interfaces).has(inherited)) {
            return Array.from(__classPrivateFieldGet(this, _interfaces).get(inherited));
        }
        const result = new Set();
        for (const iface of this.spec.interfaces) {
            const ifaceType = this.system.findInterface(iface);
            if (!result.has(ifaceType) && inherited) {
                ifaceType.getInterfaces(inherited).forEach((i) => result.add(i));
            }
            result.add(ifaceType);
        }
        __classPrivateFieldGet(this, _interfaces).set(inherited, Array.from(result));
        // Returning a copy of the array, distinct from the one we memoized, for safety.
        return Array.from(result);
    }
    /**
     * Lists all properties in this class.
     * @param inherited include all properties inherited from base classes (default: false)
     */
    getProperties(inherited = false) {
        return this._getProperties(inherited, this);
    }
    /**
     * List all methods in this class.
     * @param inherited include all methods inherited from base classes (default: false)
     */
    getMethods(inherited = false) {
        return this._getMethods(inherited, this);
    }
    isDataType() {
        return !!this.spec.datatype;
    }
    isInterfaceType() {
        return true;
    }
    _getProperties(inherited, parentType) {
        var _a;
        const base = {};
        if (inherited) {
            for (const parent of this.getInterfaces()) {
                Object.assign(base, parent._getProperties(inherited, parentType));
            }
        }
        return Object.assign(base, util_1.indexBy(((_a = this.spec.properties) !== null && _a !== void 0 ? _a : []).map((p) => new property_1.Property(this.system, this.assembly, parentType, this, p)), (p) => p.name));
    }
    _getMethods(inherited, parentType) {
        var _a;
        const base = {};
        if (inherited) {
            for (const parent of this.getInterfaces()) {
                Object.assign(base, parent._getMethods(inherited, parentType));
            }
        }
        return Object.assign(base, util_1.indexBy(((_a = this.spec.methods) !== null && _a !== void 0 ? _a : []).map((m) => new method_1.Method(this.system, this.assembly, parentType, this, m)), (m) => m.name));
    }
}
exports.InterfaceType = InterfaceType;
_interfaces = new WeakMap();
//# sourceMappingURL=data:application/json;base64,