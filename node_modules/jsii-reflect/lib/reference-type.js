"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReferenceType = void 0;
const _memoized_1 = require("./_memoized");
const type_1 = require("./type");
class ReferenceType extends type_1.Type {
    constructor(system, assembly, spec) {
        super(system, assembly, spec);
        this.system = system;
        this.assembly = assembly;
    }
    /**
     * All the base interfaces that this interface extends.
     */
    get interfaces() {
        return this.getInterfaces();
    }
    /**
     * List of methods (without inherited methods).
     */
    get ownMethods() {
        return Object.values(this.getMethods(false));
    }
    /**
     * List of own and inherited methods
     */
    get allMethods() {
        return Object.values(this.getMethods(true));
    }
    /**
     * List of properties.
     */
    get ownProperties() {
        return Object.values(this.getProperties());
    }
    /**
     * List of own and inherited methods
     */
    get allProperties() {
        return Object.values(this.getProperties(true));
    }
    get ownMembers() {
        return Object.values(this.getMembers(false));
    }
    get allMembers() {
        return Object.values(this.getMembers(true));
    }
    getMembers(inherited = false) {
        return Object.assign(this.getMethods(inherited), this.getProperties(inherited));
    }
}
__decorate([
    _memoized_1.memoized
], ReferenceType.prototype, "interfaces", null);
__decorate([
    _memoized_1.memoized
], ReferenceType.prototype, "ownMethods", null);
__decorate([
    _memoized_1.memoized
], ReferenceType.prototype, "allMethods", null);
__decorate([
    _memoized_1.memoized
], ReferenceType.prototype, "ownProperties", null);
__decorate([
    _memoized_1.memoized
], ReferenceType.prototype, "allProperties", null);
__decorate([
    _memoized_1.memoized
], ReferenceType.prototype, "ownMembers", null);
__decorate([
    _memoized_1.memoized
], ReferenceType.prototype, "allMembers", null);
exports.ReferenceType = ReferenceType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXJlbmNlLXR5cGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWZlcmVuY2UtdHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFQSwyQ0FBdUM7QUFLdkMsaUNBQThCO0FBSTlCLE1BQXNCLGFBQWMsU0FBUSxXQUFJO0lBQzlDLFlBQ1MsTUFBa0IsRUFDbEIsUUFBa0IsRUFDekIsSUFBZTtRQUVmLEtBQUssQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBSnZCLFdBQU0sR0FBTixNQUFNLENBQVk7UUFDbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUkzQixDQUFDO0lBRUQ7O09BRUc7SUFFSCxJQUFXLFVBQVU7UUFDbkIsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVEOztPQUVHO0lBRUgsSUFBVyxVQUFVO1FBQ25CLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVEOztPQUVHO0lBRUgsSUFBVyxVQUFVO1FBQ25CLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVEOztPQUVHO0lBRUgsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7O09BRUc7SUFFSCxJQUFXLGFBQWE7UUFDdEIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBR0QsSUFBVyxVQUFVO1FBQ25CLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUdELElBQVcsVUFBVTtRQUNuQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTSxVQUFVLENBQUMsU0FBUyxHQUFHLEtBQUs7UUFDakMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUNsQixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUMxQixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUM5QixDQUFDO0lBQ0osQ0FBQztDQXFCRjtBQXhFQztJQURDLG9CQUFROytDQUdSO0FBTUQ7SUFEQyxvQkFBUTsrQ0FHUjtBQU1EO0lBREMsb0JBQVE7K0NBR1I7QUFNRDtJQURDLG9CQUFRO2tEQUdSO0FBTUQ7SUFEQyxvQkFBUTtrREFHUjtBQUdEO0lBREMsb0JBQVE7K0NBR1I7QUFHRDtJQURDLG9CQUFROytDQUdSO0FBekRILHNDQXFGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGpzaWkgZnJvbSAnQGpzaWkvc3BlYyc7XG5cbmltcG9ydCB7IG1lbW9pemVkIH0gZnJvbSAnLi9fbWVtb2l6ZWQnO1xuaW1wb3J0IHsgQXNzZW1ibHkgfSBmcm9tICcuL2Fzc2VtYmx5JztcbmltcG9ydCB7IEludGVyZmFjZVR5cGUgfSBmcm9tICcuL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBNZXRob2QgfSBmcm9tICcuL21ldGhvZCc7XG5pbXBvcnQgeyBQcm9wZXJ0eSB9IGZyb20gJy4vcHJvcGVydHknO1xuaW1wb3J0IHsgVHlwZSB9IGZyb20gJy4vdHlwZSc7XG5pbXBvcnQgeyBUeXBlTWVtYmVyIH0gZnJvbSAnLi90eXBlLW1lbWJlcic7XG5pbXBvcnQgeyBUeXBlU3lzdGVtIH0gZnJvbSAnLi90eXBlLXN5c3RlbSc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZWZlcmVuY2VUeXBlIGV4dGVuZHMgVHlwZSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgc3lzdGVtOiBUeXBlU3lzdGVtLFxuICAgIHB1YmxpYyBhc3NlbWJseTogQXNzZW1ibHksXG4gICAgc3BlYzoganNpaS5UeXBlLFxuICApIHtcbiAgICBzdXBlcihzeXN0ZW0sIGFzc2VtYmx5LCBzcGVjKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGwgdGhlIGJhc2UgaW50ZXJmYWNlcyB0aGF0IHRoaXMgaW50ZXJmYWNlIGV4dGVuZHMuXG4gICAqL1xuICBAbWVtb2l6ZWRcbiAgcHVibGljIGdldCBpbnRlcmZhY2VzKCk6IEludGVyZmFjZVR5cGVbXSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SW50ZXJmYWNlcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgbWV0aG9kcyAod2l0aG91dCBpbmhlcml0ZWQgbWV0aG9kcykuXG4gICAqL1xuICBAbWVtb2l6ZWRcbiAgcHVibGljIGdldCBvd25NZXRob2RzKCk6IE1ldGhvZFtdIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLmdldE1ldGhvZHMoZmFsc2UpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG93biBhbmQgaW5oZXJpdGVkIG1ldGhvZHNcbiAgICovXG4gIEBtZW1vaXplZFxuICBwdWJsaWMgZ2V0IGFsbE1ldGhvZHMoKTogTWV0aG9kW10ge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuZ2V0TWV0aG9kcyh0cnVlKSk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBvZiBwcm9wZXJ0aWVzLlxuICAgKi9cbiAgQG1lbW9pemVkXG4gIHB1YmxpYyBnZXQgb3duUHJvcGVydGllcygpOiBQcm9wZXJ0eVtdIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLmdldFByb3BlcnRpZXMoKSk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBvZiBvd24gYW5kIGluaGVyaXRlZCBtZXRob2RzXG4gICAqL1xuICBAbWVtb2l6ZWRcbiAgcHVibGljIGdldCBhbGxQcm9wZXJ0aWVzKCk6IFByb3BlcnR5W10ge1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuZ2V0UHJvcGVydGllcyh0cnVlKSk7XG4gIH1cblxuICBAbWVtb2l6ZWRcbiAgcHVibGljIGdldCBvd25NZW1iZXJzKCk6IFR5cGVNZW1iZXJbXSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5nZXRNZW1iZXJzKGZhbHNlKSk7XG4gIH1cblxuICBAbWVtb2l6ZWRcbiAgcHVibGljIGdldCBhbGxNZW1iZXJzKCk6IFR5cGVNZW1iZXJbXSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5nZXRNZW1iZXJzKHRydWUpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRNZW1iZXJzKGluaGVyaXRlZCA9IGZhbHNlKTogeyBbbmFtZTogc3RyaW5nXTogVHlwZU1lbWJlciB9IHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAgIHRoaXMuZ2V0TWV0aG9kcyhpbmhlcml0ZWQpLFxuICAgICAgdGhpcy5nZXRQcm9wZXJ0aWVzKGluaGVyaXRlZCksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0cyBhbGwgaW50ZXJmYWNlcyB0aGlzIGludGVyZmFjZSBleHRlbmRzLlxuICAgKiBAcGFyYW0gaW5oZXJpdGVkIGluY2x1ZGUgYWxsIGludGVyZmFjZXMgaW1wbGVtZW50ZWQgYnkgYWxsIHN1cGVyIGludGVyZmFjZXMgKGRlZmF1bHQ6IGZhbHNlKVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdldEludGVyZmFjZXMoaW5oZXJpdGVkPzogYm9vbGVhbik6IEludGVyZmFjZVR5cGVbXTtcblxuICAvKipcbiAgICogTGlzdHMgYWxsIHByb3BlcnRpZXMgaW4gdGhpcyBjbGFzcy5cbiAgICogQHBhcmFtIGluaGVyaXRlZCBpbmNsdWRlIGFsbCBwcm9wZXJ0aWVzIGluaGVyaXRlZCBmcm9tIGJhc2UgY2xhc3NlcyAoZGVmYXVsdDogZmFsc2UpXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgZ2V0UHJvcGVydGllcyhpbmhlcml0ZWQ/OiBib29sZWFuKToge1xuICAgIFtuYW1lOiBzdHJpbmddOiBQcm9wZXJ0eTtcbiAgfTtcblxuICAvKipcbiAgICogTGlzdCBhbGwgbWV0aG9kcyBpbiB0aGlzIGNsYXNzLlxuICAgKiBAcGFyYW0gaW5oZXJpdGVkIGluY2x1ZGUgYWxsIG1ldGhvZHMgaW5oZXJpdGVkIGZyb20gYmFzZSBjbGFzc2VzIChkZWZhdWx0OiBmYWxzZSlcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRNZXRob2RzKGluaGVyaXRlZD86IGJvb2xlYW4pOiB7IFtuYW1lOiBzdHJpbmddOiBNZXRob2QgfTtcbn1cbiJdfQ==