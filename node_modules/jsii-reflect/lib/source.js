"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.repositoryUrl = exports.locationInRepository = void 0;
/**
 * Return the repository location for the given API item
 */
function locationInRepository(item) {
    const moduleLoc = item.locationInModule;
    if (!moduleLoc) {
        return undefined;
    }
    const moduleDir = item.assembly.repository.directory;
    if (!moduleDir) {
        return moduleLoc;
    }
    return {
        filename: `${moduleDir}/${moduleLoc.filename}`,
        line: moduleLoc.line,
    };
}
exports.locationInRepository = locationInRepository;
/**
 * Return a URL for this item into the source repository, if available
 *
 * (Currently only supports GitHub URLs)
 */
function repositoryUrl(item, ref = 'master') {
    const loc = locationInRepository(item);
    if (!loc) {
        return undefined;
    }
    const repo = item.assembly.repository;
    if (!repo.url.startsWith('https://') ||
        !repo.url.includes('github.com') ||
        !repo.url.endsWith('.git')) {
        return undefined;
    }
    // Turn https://github.com/awslabs/aws-cdk.git ->  https://github.com/awslabs/aws-cdk/blob/REF/filename#L<number>
    const prefix = repo.url.substr(0, repo.url.length - 4);
    return `${prefix}/blob/${ref}/${loc.filename}#L${loc.line}`;
}
exports.repositoryUrl = repositoryUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQWdDQTs7R0FFRztBQUNILFNBQWdCLG9CQUFvQixDQUNsQyxJQUFxQjtJQUVyQixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDeEMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNkLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDO0lBQ3JELElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDZCxPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUVELE9BQU87UUFDTCxRQUFRLEVBQUUsR0FBRyxTQUFTLElBQUksU0FBUyxDQUFDLFFBQVEsRUFBRTtRQUM5QyxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7S0FDckIsQ0FBQztBQUNKLENBQUM7QUFqQkQsb0RBaUJDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLGFBQWEsQ0FDM0IsSUFBcUIsRUFDckIsR0FBRyxHQUFHLFFBQVE7SUFFZCxNQUFNLEdBQUcsR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QyxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQ1IsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFFRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztJQUN0QyxJQUNFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO1FBQ2hDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDO1FBQ2hDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQzFCO1FBQ0EsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFFRCxpSEFBaUg7SUFFakgsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRXZELE9BQU8sR0FBRyxNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzlELENBQUM7QUF2QkQsc0NBdUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXNzZW1ibHkgfSBmcm9tICcuL2Fzc2VtYmx5JztcblxuLyoqXG4gKiBEZXNjcmliZXMgYSBzb3VyY2UgbG9jYXRpb24gaW4gYSBmaWxlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU291cmNlTG9jYXRpb24ge1xuICAvKipcbiAgICogVGhlIGZpbGUgbmFtZVxuICAgKi9cbiAgZmlsZW5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIDEtYmFzZWQgbGluZSBpbnNpZGUgdGhlIGZpbGVcbiAgICovXG4gIGxpbmU6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIEFQSSBpdGVtcyB0aGF0IGNhbiBiZSBxdWVyaWVkIGZvciBhIHNvdXJjZSBsb2NhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNvdXJjZUxvY2F0YWJsZSB7XG4gIC8qKlxuICAgKiBUaGUgYXNzZW1ibHkgdGhlIEFQSSBpdGVtIGlzIGRlZmluZWQgaW5cbiAgICovXG4gIHJlYWRvbmx5IGFzc2VtYmx5OiBBc3NlbWJseTtcblxuICAvKipcbiAgICogU291cmNlIGxvY2F0aW9uIHJlbGF0aXZlIHRvIHRoZSBhc3NlbWJseSByb290XG4gICAqL1xuICByZWFkb25seSBsb2NhdGlvbkluTW9kdWxlPzogU291cmNlTG9jYXRpb247XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSByZXBvc2l0b3J5IGxvY2F0aW9uIGZvciB0aGUgZ2l2ZW4gQVBJIGl0ZW1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvY2F0aW9uSW5SZXBvc2l0b3J5KFxuICBpdGVtOiBTb3VyY2VMb2NhdGFibGUsXG4pOiBTb3VyY2VMb2NhdGlvbiB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IG1vZHVsZUxvYyA9IGl0ZW0ubG9jYXRpb25Jbk1vZHVsZTtcbiAgaWYgKCFtb2R1bGVMb2MpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgbW9kdWxlRGlyID0gaXRlbS5hc3NlbWJseS5yZXBvc2l0b3J5LmRpcmVjdG9yeTtcbiAgaWYgKCFtb2R1bGVEaXIpIHtcbiAgICByZXR1cm4gbW9kdWxlTG9jO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmaWxlbmFtZTogYCR7bW9kdWxlRGlyfS8ke21vZHVsZUxvYy5maWxlbmFtZX1gLFxuICAgIGxpbmU6IG1vZHVsZUxvYy5saW5lLFxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybiBhIFVSTCBmb3IgdGhpcyBpdGVtIGludG8gdGhlIHNvdXJjZSByZXBvc2l0b3J5LCBpZiBhdmFpbGFibGVcbiAqXG4gKiAoQ3VycmVudGx5IG9ubHkgc3VwcG9ydHMgR2l0SHViIFVSTHMpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBvc2l0b3J5VXJsKFxuICBpdGVtOiBTb3VyY2VMb2NhdGFibGUsXG4gIHJlZiA9ICdtYXN0ZXInLFxuKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgbG9jID0gbG9jYXRpb25JblJlcG9zaXRvcnkoaXRlbSk7XG4gIGlmICghbG9jKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IHJlcG8gPSBpdGVtLmFzc2VtYmx5LnJlcG9zaXRvcnk7XG4gIGlmIChcbiAgICAhcmVwby51cmwuc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSB8fFxuICAgICFyZXBvLnVybC5pbmNsdWRlcygnZ2l0aHViLmNvbScpIHx8XG4gICAgIXJlcG8udXJsLmVuZHNXaXRoKCcuZ2l0JylcbiAgKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIFR1cm4gaHR0cHM6Ly9naXRodWIuY29tL2F3c2xhYnMvYXdzLWNkay5naXQgLT4gIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3NsYWJzL2F3cy1jZGsvYmxvYi9SRUYvZmlsZW5hbWUjTDxudW1iZXI+XG5cbiAgY29uc3QgcHJlZml4ID0gcmVwby51cmwuc3Vic3RyKDAsIHJlcG8udXJsLmxlbmd0aCAtIDQpO1xuXG4gIHJldHVybiBgJHtwcmVmaXh9L2Jsb2IvJHtyZWZ9LyR7bG9jLmZpbGVuYW1lfSNMJHtsb2MubGluZX1gO1xufVxuIl19