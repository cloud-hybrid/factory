"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Docs = void 0;
const spec_1 = require("@jsii/spec");
class Docs {
    constructor(system, target, spec, parentDocs) {
        this.system = system;
        this.target = target;
        this.parentDocs = parentDocs;
        this.docs = spec !== null && spec !== void 0 ? spec : {};
    }
    /**
     * Returns docstring of summary and remarks
     */
    toString() {
        return [this.docs.summary, this.docs.remarks]
            .filter((txt) => !!txt)
            .join('\n\n');
    }
    get subclassable() {
        return !!this.docs.subclassable;
    }
    /**
     * Return the reason for deprecation of this type
     */
    get deprecationReason() {
        if (this.docs.deprecated !== undefined) {
            return this.docs.deprecated;
        }
        if (this.parentDocs) {
            return this.parentDocs.deprecationReason;
        }
        return undefined;
    }
    /**
     * Return whether this type is deprecated
     */
    get deprecated() {
        return this.deprecationReason !== undefined;
    }
    /**
     * Return the stability of this type
     */
    get stability() {
        var _a;
        return lowestStability(this.docs.stability, (_a = this.parentDocs) === null || _a === void 0 ? void 0 : _a.stability);
    }
    /**
     * Return any custom tags on this type
     */
    customTag(tag) {
        var _a;
        return (_a = this.docs.custom) === null || _a === void 0 ? void 0 : _a[tag];
    }
    /**
     * Return summary of this type
     */
    get summary() {
        var _a;
        return (_a = this.docs.summary) !== null && _a !== void 0 ? _a : '';
    }
    /**
     * Return remarks for this type
     */
    get remarks() {
        var _a;
        return (_a = this.docs.remarks) !== null && _a !== void 0 ? _a : '';
    }
    /**
     * Return examples for this type
     */
    get example() {
        var _a;
        return (_a = this.docs.example) !== null && _a !== void 0 ? _a : '';
    }
    /**
     * Return documentation links for this type
     */
    get link() {
        var _a;
        return (_a = this.docs.see) !== null && _a !== void 0 ? _a : '';
    }
    /**
     * Returns the return type
     */
    get returns() {
        var _a;
        return (_a = this.docs.returns) !== null && _a !== void 0 ? _a : '';
    }
}
exports.Docs = Docs;
const stabilityPrecedence = {
    [spec_1.Stability.Deprecated]: 0,
    [spec_1.Stability.Experimental]: 1,
    [spec_1.Stability.External]: 2,
    [spec_1.Stability.Stable]: 3,
};
function lowestStability(a, b) {
    if (a === undefined) {
        return b;
    }
    if (b === undefined) {
        return a;
    }
    return stabilityPrecedence[a] < stabilityPrecedence[b] ? a : b;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRvY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EscUNBQXVDO0FBUXZDLE1BQWEsSUFBSTtJQUdmLFlBQ2tCLE1BQWtCLEVBQ2xCLE1BQW9CLEVBQ3BDLElBQWUsRUFDRSxVQUFpQjtRQUhsQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ2xCLFdBQU0sR0FBTixNQUFNLENBQWM7UUFFbkIsZUFBVSxHQUFWLFVBQVUsQ0FBTztRQUVsQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksYUFBSixJQUFJLGNBQUosSUFBSSxHQUFJLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQ7O09BRUc7SUFDSSxRQUFRO1FBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2FBQzFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQzthQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELElBQVcsWUFBWTtRQUNyQixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUNsQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLGlCQUFpQjtRQUMxQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUN0QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1NBQzdCO1FBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQztTQUMxQztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsVUFBVTtRQUNuQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsS0FBSyxTQUFTLENBQUM7SUFDOUMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxTQUFTOztRQUNsQixPQUFPLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsUUFBRSxJQUFJLENBQUMsVUFBVSwwQ0FBRSxTQUFTLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxTQUFTLENBQUMsR0FBVzs7UUFDMUIsYUFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sMENBQUcsR0FBRyxFQUFFO0lBQ2pDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsT0FBTzs7UUFDaEIsYUFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sbUNBQUksRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsT0FBTzs7UUFDaEIsYUFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sbUNBQUksRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsT0FBTzs7UUFDaEIsYUFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sbUNBQUksRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsSUFBSTs7UUFDYixhQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxtQ0FBSSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxPQUFPOztRQUNoQixhQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxtQ0FBSSxFQUFFLENBQUM7SUFDakMsQ0FBQztDQUNGO0FBN0ZELG9CQTZGQztBQUVELE1BQU0sbUJBQW1CLEdBQUc7SUFDMUIsQ0FBQyxnQkFBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7SUFDekIsQ0FBQyxnQkFBUyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7SUFDM0IsQ0FBQyxnQkFBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7SUFDdkIsQ0FBQyxnQkFBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7Q0FDdEIsQ0FBQztBQUVGLFNBQVMsZUFBZSxDQUFDLENBQWEsRUFBRSxDQUFhO0lBQ25ELElBQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtRQUNuQixPQUFPLENBQUMsQ0FBQztLQUNWO0lBQ0QsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFDRCxPQUFPLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxHQUFHLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMganNpaSBmcm9tICdAanNpaS9zcGVjJztcbmltcG9ydCB7IFN0YWJpbGl0eSB9IGZyb20gJ0Bqc2lpL3NwZWMnO1xuXG5pbXBvcnQgeyBUeXBlU3lzdGVtIH0gZnJvbSAnLi90eXBlLXN5c3RlbSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRhYmxlIHtcbiAgZG9jczogRG9jcztcbn1cblxuZXhwb3J0IGNsYXNzIERvY3Mge1xuICBwdWJsaWMgcmVhZG9ubHkgZG9jczoganNpaS5Eb2NzO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3lzdGVtOiBUeXBlU3lzdGVtLFxuICAgIHB1YmxpYyByZWFkb25seSB0YXJnZXQ6IERvY3VtZW50YWJsZSxcbiAgICBzcGVjOiBqc2lpLkRvY3MsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXJlbnREb2NzPzogRG9jcyxcbiAgKSB7XG4gICAgdGhpcy5kb2NzID0gc3BlYyA/PyB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGRvY3N0cmluZyBvZiBzdW1tYXJ5IGFuZCByZW1hcmtzXG4gICAqL1xuICBwdWJsaWMgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFt0aGlzLmRvY3Muc3VtbWFyeSwgdGhpcy5kb2NzLnJlbWFya3NdXG4gICAgICAuZmlsdGVyKCh0eHQpID0+ICEhdHh0KVxuICAgICAgLmpvaW4oJ1xcblxcbicpO1xuICB9XG5cbiAgcHVibGljIGdldCBzdWJjbGFzc2FibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5kb2NzLnN1YmNsYXNzYWJsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHJlYXNvbiBmb3IgZGVwcmVjYXRpb24gb2YgdGhpcyB0eXBlXG4gICAqL1xuICBwdWJsaWMgZ2V0IGRlcHJlY2F0aW9uUmVhc29uKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMuZG9jcy5kZXByZWNhdGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmRvY3MuZGVwcmVjYXRlZDtcbiAgICB9XG4gICAgaWYgKHRoaXMucGFyZW50RG9jcykge1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50RG9jcy5kZXByZWNhdGlvblJlYXNvbjtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIHR5cGUgaXMgZGVwcmVjYXRlZFxuICAgKi9cbiAgcHVibGljIGdldCBkZXByZWNhdGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmRlcHJlY2F0aW9uUmVhc29uICE9PSB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBzdGFiaWxpdHkgb2YgdGhpcyB0eXBlXG4gICAqL1xuICBwdWJsaWMgZ2V0IHN0YWJpbGl0eSgpOiBqc2lpLlN0YWJpbGl0eSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIGxvd2VzdFN0YWJpbGl0eSh0aGlzLmRvY3Muc3RhYmlsaXR5LCB0aGlzLnBhcmVudERvY3M/LnN0YWJpbGl0eSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFueSBjdXN0b20gdGFncyBvbiB0aGlzIHR5cGVcbiAgICovXG4gIHB1YmxpYyBjdXN0b21UYWcodGFnOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmRvY3MuY3VzdG9tPy5bdGFnXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gc3VtbWFyeSBvZiB0aGlzIHR5cGVcbiAgICovXG4gIHB1YmxpYyBnZXQgc3VtbWFyeSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmRvY3Muc3VtbWFyeSA/PyAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gcmVtYXJrcyBmb3IgdGhpcyB0eXBlXG4gICAqL1xuICBwdWJsaWMgZ2V0IHJlbWFya3MoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5kb2NzLnJlbWFya3MgPz8gJyc7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGV4YW1wbGVzIGZvciB0aGlzIHR5cGVcbiAgICovXG4gIHB1YmxpYyBnZXQgZXhhbXBsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmRvY3MuZXhhbXBsZSA/PyAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gZG9jdW1lbnRhdGlvbiBsaW5rcyBmb3IgdGhpcyB0eXBlXG4gICAqL1xuICBwdWJsaWMgZ2V0IGxpbmsoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5kb2NzLnNlZSA/PyAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSByZXR1cm4gdHlwZVxuICAgKi9cbiAgcHVibGljIGdldCByZXR1cm5zKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZG9jcy5yZXR1cm5zID8/ICcnO1xuICB9XG59XG5cbmNvbnN0IHN0YWJpbGl0eVByZWNlZGVuY2UgPSB7XG4gIFtTdGFiaWxpdHkuRGVwcmVjYXRlZF06IDAsXG4gIFtTdGFiaWxpdHkuRXhwZXJpbWVudGFsXTogMSxcbiAgW1N0YWJpbGl0eS5FeHRlcm5hbF06IDIsXG4gIFtTdGFiaWxpdHkuU3RhYmxlXTogMyxcbn07XG5cbmZ1bmN0aW9uIGxvd2VzdFN0YWJpbGl0eShhPzogU3RhYmlsaXR5LCBiPzogU3RhYmlsaXR5KTogU3RhYmlsaXR5IHwgdW5kZWZpbmVkIHtcbiAgaWYgKGEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBiO1xuICB9XG4gIGlmIChiID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYTtcbiAgfVxuICByZXR1cm4gc3RhYmlsaXR5UHJlY2VkZW5jZVthXSA8IHN0YWJpbGl0eVByZWNlZGVuY2VbYl0gPyBhIDogYjtcbn1cbiJdfQ==