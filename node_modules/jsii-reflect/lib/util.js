"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findUp = exports.findPackageJsonUp = exports.isBuiltinModule = exports.findDependencyDirectory = exports.indexBy = void 0;
const fs = require("fs-extra");
const path = require("path");
function indexBy(xs, f) {
    const ret = {};
    for (const x of xs) {
        ret[f(x)] = x;
    }
    return ret;
}
exports.indexBy = indexBy;
/**
 * Find the directory that contains a given dependency, identified by its 'package.json', from a starting search directory
 *
 * (This code is duplicated among jsii/jsii-pacmak/jsii-reflect. Changes should be done in all
 * 3 locations, and we should unify these at some point: https://github.com/aws/jsii/issues/3236)
 */
async function findDependencyDirectory(dependencyName, searchStart) {
    // Explicitly do not use 'require("dep/package.json")' because that will fail if the
    // package does not export that particular file.
    const entryPoint = require.resolve(dependencyName, {
        paths: [searchStart],
    });
    // Search up from the given directory, looking for a package.json that matches
    // the dependency name (so we don't accidentally find stray 'package.jsons').
    const depPkgJsonPath = await findPackageJsonUp(dependencyName, path.dirname(entryPoint));
    if (!depPkgJsonPath) {
        throw new Error(`Could not find dependency '${dependencyName}' from '${searchStart}'`);
    }
    return depPkgJsonPath;
}
exports.findDependencyDirectory = findDependencyDirectory;
/**
 * Whether the given dependency is a built-in
 *
 * Some dependencies that occur in `package.json` are also built-ins in modern Node
 * versions (most egregious example: 'punycode'). Detect those and filter them out.
 */
function isBuiltinModule(depName) {
    // eslint-disable-next-line @typescript-eslint/no-require-imports,@typescript-eslint/no-var-requires
    const { builtinModules } = require('module');
    return (builtinModules !== null && builtinModules !== void 0 ? builtinModules : []).includes(depName);
}
exports.isBuiltinModule = isBuiltinModule;
/**
 * Find the package.json for a given package upwards from the given directory
 *
 * (This code is duplicated among jsii/jsii-pacmak/jsii-reflect. Changes should be done in all
 * 3 locations, and we should unify these at some point: https://github.com/aws/jsii/issues/3236)
 */
async function findPackageJsonUp(packageName, directory) {
    return findUp(directory, async (dir) => {
        const pjFile = path.join(dir, 'package.json');
        return ((await fs.pathExists(pjFile)) &&
            (await fs.readJson(pjFile)).name === packageName);
    });
}
exports.findPackageJsonUp = findPackageJsonUp;
/**
 * Find a directory up the tree from a starting directory matching a condition
 *
 * Will return `undefined` if no directory matches
 *
 * (This code is duplicated among jsii/jsii-pacmak/jsii-reflect. Changes should be done in all
 * 3 locations, and we should unify these at some point: https://github.com/aws/jsii/issues/3236)
 */
async function findUp(directory, pred) {
    // eslint-disable-next-line no-constant-condition
    while (true) {
        // eslint-disable-next-line no-await-in-loop
        if (await pred(directory)) {
            return directory;
        }
        const parent = path.dirname(directory);
        if (parent === directory) {
            return undefined;
        }
        directory = parent;
    }
}
exports.findUp = findUp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQStCO0FBQy9CLDZCQUE2QjtBQUU3QixTQUFnQixPQUFPLENBQUksRUFBTyxFQUFFLENBQW1CO0lBQ3JELE1BQU0sR0FBRyxHQUF5QixFQUFFLENBQUM7SUFDckMsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNmO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBTkQsMEJBTUM7QUFFRDs7Ozs7R0FLRztBQUNJLEtBQUssVUFBVSx1QkFBdUIsQ0FDM0MsY0FBc0IsRUFDdEIsV0FBbUI7SUFFbkIsb0ZBQW9GO0lBQ3BGLGdEQUFnRDtJQUNoRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRTtRQUNqRCxLQUFLLEVBQUUsQ0FBQyxXQUFXLENBQUM7S0FDckIsQ0FBQyxDQUFDO0lBRUgsOEVBQThFO0lBQzlFLDZFQUE2RTtJQUM3RSxNQUFNLGNBQWMsR0FBRyxNQUFNLGlCQUFpQixDQUM1QyxjQUFjLEVBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FDekIsQ0FBQztJQUVGLElBQUksQ0FBQyxjQUFjLEVBQUU7UUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FDYiw4QkFBOEIsY0FBYyxXQUFXLFdBQVcsR0FBRyxDQUN0RSxDQUFDO0tBQ0g7SUFFRCxPQUFPLGNBQWMsQ0FBQztBQUN4QixDQUFDO0FBeEJELDBEQXdCQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsZUFBZSxDQUFDLE9BQWU7SUFDN0Msb0dBQW9HO0lBQ3BHLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0MsT0FBTyxDQUFDLGNBQWMsYUFBZCxjQUFjLGNBQWQsY0FBYyxHQUFJLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBSkQsMENBSUM7QUFFRDs7Ozs7R0FLRztBQUNJLEtBQUssVUFBVSxpQkFBaUIsQ0FDckMsV0FBbUIsRUFDbkIsU0FBaUI7SUFFakIsT0FBTyxNQUFNLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNyQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUM5QyxPQUFPLENBQ0wsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUNqRCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBWEQsOENBV0M7QUFFRDs7Ozs7OztHQU9HO0FBQ0ksS0FBSyxVQUFVLE1BQU0sQ0FDMUIsU0FBaUIsRUFDakIsSUFBdUM7SUFFdkMsaURBQWlEO0lBQ2pELE9BQU8sSUFBSSxFQUFFO1FBQ1gsNENBQTRDO1FBQzVDLElBQUksTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDekIsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUN4QixPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUNELFNBQVMsR0FBRyxNQUFNLENBQUM7S0FDcEI7QUFDSCxDQUFDO0FBakJELHdCQWlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmRleEJ5PFQ+KHhzOiBUW10sIGY6ICh4OiBUKSA9PiBzdHJpbmcpOiB7IFtrZXk6IHN0cmluZ106IFQgfSB7XG4gIGNvbnN0IHJldDogeyBba2V5OiBzdHJpbmddOiBUIH0gPSB7fTtcbiAgZm9yIChjb25zdCB4IG9mIHhzKSB7XG4gICAgcmV0W2YoeCldID0geDtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIEZpbmQgdGhlIGRpcmVjdG9yeSB0aGF0IGNvbnRhaW5zIGEgZ2l2ZW4gZGVwZW5kZW5jeSwgaWRlbnRpZmllZCBieSBpdHMgJ3BhY2thZ2UuanNvbicsIGZyb20gYSBzdGFydGluZyBzZWFyY2ggZGlyZWN0b3J5XG4gKlxuICogKFRoaXMgY29kZSBpcyBkdXBsaWNhdGVkIGFtb25nIGpzaWkvanNpaS1wYWNtYWsvanNpaS1yZWZsZWN0LiBDaGFuZ2VzIHNob3VsZCBiZSBkb25lIGluIGFsbFxuICogMyBsb2NhdGlvbnMsIGFuZCB3ZSBzaG91bGQgdW5pZnkgdGhlc2UgYXQgc29tZSBwb2ludDogaHR0cHM6Ly9naXRodWIuY29tL2F3cy9qc2lpL2lzc3Vlcy8zMjM2KVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmluZERlcGVuZGVuY3lEaXJlY3RvcnkoXG4gIGRlcGVuZGVuY3lOYW1lOiBzdHJpbmcsXG4gIHNlYXJjaFN0YXJ0OiBzdHJpbmcsXG4pIHtcbiAgLy8gRXhwbGljaXRseSBkbyBub3QgdXNlICdyZXF1aXJlKFwiZGVwL3BhY2thZ2UuanNvblwiKScgYmVjYXVzZSB0aGF0IHdpbGwgZmFpbCBpZiB0aGVcbiAgLy8gcGFja2FnZSBkb2VzIG5vdCBleHBvcnQgdGhhdCBwYXJ0aWN1bGFyIGZpbGUuXG4gIGNvbnN0IGVudHJ5UG9pbnQgPSByZXF1aXJlLnJlc29sdmUoZGVwZW5kZW5jeU5hbWUsIHtcbiAgICBwYXRoczogW3NlYXJjaFN0YXJ0XSxcbiAgfSk7XG5cbiAgLy8gU2VhcmNoIHVwIGZyb20gdGhlIGdpdmVuIGRpcmVjdG9yeSwgbG9va2luZyBmb3IgYSBwYWNrYWdlLmpzb24gdGhhdCBtYXRjaGVzXG4gIC8vIHRoZSBkZXBlbmRlbmN5IG5hbWUgKHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBmaW5kIHN0cmF5ICdwYWNrYWdlLmpzb25zJykuXG4gIGNvbnN0IGRlcFBrZ0pzb25QYXRoID0gYXdhaXQgZmluZFBhY2thZ2VKc29uVXAoXG4gICAgZGVwZW5kZW5jeU5hbWUsXG4gICAgcGF0aC5kaXJuYW1lKGVudHJ5UG9pbnQpLFxuICApO1xuXG4gIGlmICghZGVwUGtnSnNvblBhdGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgQ291bGQgbm90IGZpbmQgZGVwZW5kZW5jeSAnJHtkZXBlbmRlbmN5TmFtZX0nIGZyb20gJyR7c2VhcmNoU3RhcnR9J2AsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBkZXBQa2dKc29uUGF0aDtcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHRoZSBnaXZlbiBkZXBlbmRlbmN5IGlzIGEgYnVpbHQtaW5cbiAqXG4gKiBTb21lIGRlcGVuZGVuY2llcyB0aGF0IG9jY3VyIGluIGBwYWNrYWdlLmpzb25gIGFyZSBhbHNvIGJ1aWx0LWlucyBpbiBtb2Rlcm4gTm9kZVxuICogdmVyc2lvbnMgKG1vc3QgZWdyZWdpb3VzIGV4YW1wbGU6ICdwdW55Y29kZScpLiBEZXRlY3QgdGhvc2UgYW5kIGZpbHRlciB0aGVtIG91dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQnVpbHRpbk1vZHVsZShkZXBOYW1lOiBzdHJpbmcpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHMsQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuICBjb25zdCB7IGJ1aWx0aW5Nb2R1bGVzIH0gPSByZXF1aXJlKCdtb2R1bGUnKTtcbiAgcmV0dXJuIChidWlsdGluTW9kdWxlcyA/PyBbXSkuaW5jbHVkZXMoZGVwTmFtZSk7XG59XG5cbi8qKlxuICogRmluZCB0aGUgcGFja2FnZS5qc29uIGZvciBhIGdpdmVuIHBhY2thZ2UgdXB3YXJkcyBmcm9tIHRoZSBnaXZlbiBkaXJlY3RvcnlcbiAqXG4gKiAoVGhpcyBjb2RlIGlzIGR1cGxpY2F0ZWQgYW1vbmcganNpaS9qc2lpLXBhY21hay9qc2lpLXJlZmxlY3QuIENoYW5nZXMgc2hvdWxkIGJlIGRvbmUgaW4gYWxsXG4gKiAzIGxvY2F0aW9ucywgYW5kIHdlIHNob3VsZCB1bmlmeSB0aGVzZSBhdCBzb21lIHBvaW50OiBodHRwczovL2dpdGh1Yi5jb20vYXdzL2pzaWkvaXNzdWVzLzMyMzYpXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaW5kUGFja2FnZUpzb25VcChcbiAgcGFja2FnZU5hbWU6IHN0cmluZyxcbiAgZGlyZWN0b3J5OiBzdHJpbmcsXG4pIHtcbiAgcmV0dXJuIGZpbmRVcChkaXJlY3RvcnksIGFzeW5jIChkaXIpID0+IHtcbiAgICBjb25zdCBwakZpbGUgPSBwYXRoLmpvaW4oZGlyLCAncGFja2FnZS5qc29uJyk7XG4gICAgcmV0dXJuIChcbiAgICAgIChhd2FpdCBmcy5wYXRoRXhpc3RzKHBqRmlsZSkpICYmXG4gICAgICAoYXdhaXQgZnMucmVhZEpzb24ocGpGaWxlKSkubmFtZSA9PT0gcGFja2FnZU5hbWVcbiAgICApO1xuICB9KTtcbn1cblxuLyoqXG4gKiBGaW5kIGEgZGlyZWN0b3J5IHVwIHRoZSB0cmVlIGZyb20gYSBzdGFydGluZyBkaXJlY3RvcnkgbWF0Y2hpbmcgYSBjb25kaXRpb25cbiAqXG4gKiBXaWxsIHJldHVybiBgdW5kZWZpbmVkYCBpZiBubyBkaXJlY3RvcnkgbWF0Y2hlc1xuICpcbiAqIChUaGlzIGNvZGUgaXMgZHVwbGljYXRlZCBhbW9uZyBqc2lpL2pzaWktcGFjbWFrL2pzaWktcmVmbGVjdC4gQ2hhbmdlcyBzaG91bGQgYmUgZG9uZSBpbiBhbGxcbiAqIDMgbG9jYXRpb25zLCBhbmQgd2Ugc2hvdWxkIHVuaWZ5IHRoZXNlIGF0IHNvbWUgcG9pbnQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MvanNpaS9pc3N1ZXMvMzIzNilcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRVcChcbiAgZGlyZWN0b3J5OiBzdHJpbmcsXG4gIHByZWQ6IChkaXI6IHN0cmluZykgPT4gUHJvbWlzZTxib29sZWFuPixcbik6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgd2hpbGUgKHRydWUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxuICAgIGlmIChhd2FpdCBwcmVkKGRpcmVjdG9yeSkpIHtcbiAgICAgIHJldHVybiBkaXJlY3Rvcnk7XG4gICAgfVxuXG4gICAgY29uc3QgcGFyZW50ID0gcGF0aC5kaXJuYW1lKGRpcmVjdG9yeSk7XG4gICAgaWYgKHBhcmVudCA9PT0gZGlyZWN0b3J5KSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBkaXJlY3RvcnkgPSBwYXJlbnQ7XG4gIH1cbn1cbiJdfQ==