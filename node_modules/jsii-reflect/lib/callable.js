"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Callable = void 0;
const docs_1 = require("./docs");
const parameter_1 = require("./parameter");
const source_1 = require("./source");
class Callable {
    constructor(system, assembly, parentType, spec) {
        this.system = system;
        this.assembly = assembly;
        this.parentType = parentType;
        this.spec = spec;
    }
    /**
     * The parameters of the method/initializer
     */
    get parameters() {
        var _a;
        return ((_a = this.spec.parameters) !== null && _a !== void 0 ? _a : []).map((p) => new parameter_1.Parameter(this.system, this.parentType, this, p));
    }
    /**
     * Indicates if this method is protected (otherwise it is public)
     */
    get protected() {
        return !!this.spec.protected;
    }
    /**
     * Indicates whether this method is variadic or not. When ``true``, the last
     * element of ``#parameters`` will also be flagged ``#variadic``.
     */
    get variadic() {
        return !!this.spec.variadic;
    }
    get overrides() {
        if (!this.spec.overrides) {
            return undefined;
        }
        return this.system.findFqn(this.spec.overrides);
    }
    get docs() {
        var _a;
        return new docs_1.Docs(this.system, this, (_a = this.spec.docs) !== null && _a !== void 0 ? _a : {}, this.parentType.docs);
    }
    /**
     * Return the location in the module
     */
    get locationInModule() {
        return this.spec.locationInModule;
    }
    /**
     * Return the location in the repository
     */
    get locationInRepository() {
        return source_1.locationInRepository(this);
    }
    toString() {
        return `${this.kind}:${this.parentType.fqn}.${this.name}`;
    }
}
exports.Callable = Callable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjYWxsYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSxpQ0FBNEM7QUFFNUMsMkNBQXdDO0FBQ3hDLHFDQUlrQjtBQUtsQixNQUFzQixRQUFRO0lBTzVCLFlBQ2tCLE1BQWtCLEVBQ2xCLFFBQWtCLEVBQ2xCLFVBQWdCLEVBQ2hCLElBQW1CO1FBSG5CLFdBQU0sR0FBTixNQUFNLENBQVk7UUFDbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixlQUFVLEdBQVYsVUFBVSxDQUFNO1FBQ2hCLFNBQUksR0FBSixJQUFJLENBQWU7SUFDbEMsQ0FBQztJQUVKOztPQUVHO0lBQ0gsSUFBVyxVQUFVOztRQUNuQixPQUFPLE9BQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLG1DQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FDckMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUkscUJBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUM1RCxDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxTQUFTO1FBQ2xCLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFXLFFBQVE7UUFDakIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQVcsU0FBUztRQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDeEIsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELElBQVcsSUFBSTs7UUFDYixPQUFPLElBQUksV0FBSSxDQUNiLElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxRQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxtQ0FBSSxFQUFFLEVBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUNyQixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxnQkFBZ0I7UUFDekIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ3BDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsb0JBQW9CO1FBQzdCLE9BQU8sNkJBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDNUQsQ0FBQztDQUNGO0FBeEVELDRCQXdFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGpzaWkgZnJvbSAnQGpzaWkvc3BlYyc7XG5cbmltcG9ydCB7IEFzc2VtYmx5IH0gZnJvbSAnLi9hc3NlbWJseSc7XG5pbXBvcnQgeyBEb2NzLCBEb2N1bWVudGFibGUgfSBmcm9tICcuL2RvY3MnO1xuaW1wb3J0IHsgT3ZlcnJpZGFibGUgfSBmcm9tICcuL292ZXJyaWRhYmxlJztcbmltcG9ydCB7IFBhcmFtZXRlciB9IGZyb20gJy4vcGFyYW1ldGVyJztcbmltcG9ydCB7XG4gIFNvdXJjZUxvY2F0YWJsZSxcbiAgbG9jYXRpb25JblJlcG9zaXRvcnksXG4gIFNvdXJjZUxvY2F0aW9uLFxufSBmcm9tICcuL3NvdXJjZSc7XG5pbXBvcnQgeyBUeXBlIH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IE1lbWJlcktpbmQsIFR5cGVNZW1iZXIgfSBmcm9tICcuL3R5cGUtbWVtYmVyJztcbmltcG9ydCB7IFR5cGVTeXN0ZW0gfSBmcm9tICcuL3R5cGUtc3lzdGVtJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhbGxhYmxlXG4gIGltcGxlbWVudHMgRG9jdW1lbnRhYmxlLCBPdmVycmlkYWJsZSwgVHlwZU1lbWJlciwgU291cmNlTG9jYXRhYmxlXG57XG4gIHB1YmxpYyBkZWNsYXJlIGFic3RyYWN0IHJlYWRvbmx5IGtpbmQ6IE1lbWJlcktpbmQ7XG4gIHB1YmxpYyBkZWNsYXJlIGFic3RyYWN0IHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgcHVibGljIGRlY2xhcmUgYWJzdHJhY3QgcmVhZG9ubHkgYWJzdHJhY3Q6IGJvb2xlYW47XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBzeXN0ZW06IFR5cGVTeXN0ZW0sXG4gICAgcHVibGljIHJlYWRvbmx5IGFzc2VtYmx5OiBBc3NlbWJseSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFyZW50VHlwZTogVHlwZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3BlYzoganNpaS5DYWxsYWJsZSxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBUaGUgcGFyYW1ldGVycyBvZiB0aGUgbWV0aG9kL2luaXRpYWxpemVyXG4gICAqL1xuICBwdWJsaWMgZ2V0IHBhcmFtZXRlcnMoKTogUGFyYW1ldGVyW10ge1xuICAgIHJldHVybiAodGhpcy5zcGVjLnBhcmFtZXRlcnMgPz8gW10pLm1hcChcbiAgICAgIChwKSA9PiBuZXcgUGFyYW1ldGVyKHRoaXMuc3lzdGVtLCB0aGlzLnBhcmVudFR5cGUsIHRoaXMsIHApLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoaXMgbWV0aG9kIGlzIHByb3RlY3RlZCAob3RoZXJ3aXNlIGl0IGlzIHB1YmxpYylcbiAgICovXG4gIHB1YmxpYyBnZXQgcHJvdGVjdGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXRoaXMuc3BlYy5wcm90ZWN0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBtZXRob2QgaXMgdmFyaWFkaWMgb3Igbm90LiBXaGVuIGBgdHJ1ZWBgLCB0aGUgbGFzdFxuICAgKiBlbGVtZW50IG9mIGBgI3BhcmFtZXRlcnNgYCB3aWxsIGFsc28gYmUgZmxhZ2dlZCBgYCN2YXJpYWRpY2BgLlxuICAgKi9cbiAgcHVibGljIGdldCB2YXJpYWRpYygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLnNwZWMudmFyaWFkaWM7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG92ZXJyaWRlcygpOiBUeXBlIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoIXRoaXMuc3BlYy5vdmVycmlkZXMpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3lzdGVtLmZpbmRGcW4odGhpcy5zcGVjLm92ZXJyaWRlcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGRvY3MoKTogRG9jcyB7XG4gICAgcmV0dXJuIG5ldyBEb2NzKFxuICAgICAgdGhpcy5zeXN0ZW0sXG4gICAgICB0aGlzLFxuICAgICAgdGhpcy5zcGVjLmRvY3MgPz8ge30sXG4gICAgICB0aGlzLnBhcmVudFR5cGUuZG9jcyxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbG9jYXRpb24gaW4gdGhlIG1vZHVsZVxuICAgKi9cbiAgcHVibGljIGdldCBsb2NhdGlvbkluTW9kdWxlKCk6IFNvdXJjZUxvY2F0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5zcGVjLmxvY2F0aW9uSW5Nb2R1bGU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBsb2NhdGlvbiBpbiB0aGUgcmVwb3NpdG9yeVxuICAgKi9cbiAgcHVibGljIGdldCBsb2NhdGlvbkluUmVwb3NpdG9yeSgpOiBTb3VyY2VMb2NhdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIGxvY2F0aW9uSW5SZXBvc2l0b3J5KHRoaXMpO1xuICB9XG5cbiAgcHVibGljIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmtpbmR9OiR7dGhpcy5wYXJlbnRUeXBlLmZxbn0uJHt0aGlzLm5hbWV9YDtcbiAgfVxufVxuIl19