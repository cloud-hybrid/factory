"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Property = void 0;
const docs_1 = require("./docs");
const optional_value_1 = require("./optional-value");
const source_1 = require("./source");
const type_member_1 = require("./type-member");
class Property extends optional_value_1.OptionalValue {
    constructor(system, assembly, parentType, definingType, spec) {
        super(system, spec);
        this.assembly = assembly;
        this.parentType = parentType;
        this.definingType = definingType;
        this.spec = spec;
        this.kind = type_member_1.MemberKind.Property;
    }
    toString() {
        return `property:${this.parentType.fqn}.${this.name}`;
    }
    /**
     * The name of the property.
     */
    get name() {
        return this.spec.name;
    }
    /**
     * Indicates if this property only has a getter (immutable).
     */
    get immutable() {
        return !!this.spec.immutable;
    }
    /**
     * Indicates if this property is protected (otherwise it is public)
     */
    get protected() {
        return !!this.spec.protected;
    }
    /**
     * Indicates if this property is abstract
     */
    get abstract() {
        return !!this.spec.abstract;
    }
    /**
     * Indicates if this is a static property.
     */
    get static() {
        return !!this.spec.static;
    }
    /**
     * A hint that indicates that this static, immutable property is initialized
     * during startup. This allows emitting "const" idioms in different target languages.
     * Implies `static` and `immutable`.
     */
    get const() {
        return !!this.spec.const;
    }
    get overrides() {
        if (!this.spec.overrides) {
            return undefined;
        }
        return this.system.findFqn(this.spec.overrides);
    }
    get docs() {
        var _a;
        return new docs_1.Docs(this.system, this, (_a = this.spec.docs) !== null && _a !== void 0 ? _a : {}, this.parentType.docs);
    }
    /**
     * Return the location in the module
     */
    get locationInModule() {
        return this.spec.locationInModule;
    }
    /**
     * Return the location in the repository
     */
    get locationInRepository() {
        return source_1.locationInRepository(this);
    }
}
exports.Property = Property;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcm9wZXJ0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSxpQ0FBNEM7QUFDNUMscURBQWlEO0FBRWpELHFDQUlrQjtBQUVsQiwrQ0FBdUQ7QUFHdkQsTUFBYSxRQUNYLFNBQVEsOEJBQWE7SUFLckIsWUFDRSxNQUFrQixFQUNGLFFBQWtCLEVBQ2xCLFVBQWdCLEVBQ2hCLFlBQWtCLEVBQ2xCLElBQW1CO1FBRW5DLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFMSixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGVBQVUsR0FBVixVQUFVLENBQU07UUFDaEIsaUJBQVksR0FBWixZQUFZLENBQU07UUFDbEIsU0FBSSxHQUFKLElBQUksQ0FBZTtRQVByQixTQUFJLEdBQUcsd0JBQVUsQ0FBQyxRQUFRLENBQUM7SUFVM0MsQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLFlBQVksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hELENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsSUFBSTtRQUNiLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDeEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxTQUFTO1FBQ2xCLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsU0FBUztRQUNsQixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMvQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLFFBQVE7UUFDakIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDOUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxNQUFNO1FBQ2YsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFXLEtBQUs7UUFDZCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBVyxTQUFTO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUN4QixPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsSUFBVyxJQUFJOztRQUNiLE9BQU8sSUFBSSxXQUFJLENBQ2IsSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLFFBQ0osSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLG1DQUFJLEVBQUUsRUFDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ3JCLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLGdCQUFnQjtRQUN6QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDcEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxvQkFBb0I7UUFDN0IsT0FBTyw2QkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDO0NBQ0Y7QUE5RkQsNEJBOEZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMganNpaSBmcm9tICdAanNpaS9zcGVjJztcblxuaW1wb3J0IHsgQXNzZW1ibHkgfSBmcm9tICcuL2Fzc2VtYmx5JztcbmltcG9ydCB7IERvY3MsIERvY3VtZW50YWJsZSB9IGZyb20gJy4vZG9jcyc7XG5pbXBvcnQgeyBPcHRpb25hbFZhbHVlIH0gZnJvbSAnLi9vcHRpb25hbC12YWx1ZSc7XG5pbXBvcnQgeyBPdmVycmlkYWJsZSB9IGZyb20gJy4vb3ZlcnJpZGFibGUnO1xuaW1wb3J0IHtcbiAgbG9jYXRpb25JblJlcG9zaXRvcnksXG4gIFNvdXJjZUxvY2F0YWJsZSxcbiAgU291cmNlTG9jYXRpb24sXG59IGZyb20gJy4vc291cmNlJztcbmltcG9ydCB7IFR5cGUgfSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IHsgTWVtYmVyS2luZCwgVHlwZU1lbWJlciB9IGZyb20gJy4vdHlwZS1tZW1iZXInO1xuaW1wb3J0IHsgVHlwZVN5c3RlbSB9IGZyb20gJy4vdHlwZS1zeXN0ZW0nO1xuXG5leHBvcnQgY2xhc3MgUHJvcGVydHlcbiAgZXh0ZW5kcyBPcHRpb25hbFZhbHVlXG4gIGltcGxlbWVudHMgRG9jdW1lbnRhYmxlLCBPdmVycmlkYWJsZSwgVHlwZU1lbWJlciwgU291cmNlTG9jYXRhYmxlXG57XG4gIHB1YmxpYyByZWFkb25seSBraW5kID0gTWVtYmVyS2luZC5Qcm9wZXJ0eTtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoXG4gICAgc3lzdGVtOiBUeXBlU3lzdGVtLFxuICAgIHB1YmxpYyByZWFkb25seSBhc3NlbWJseTogQXNzZW1ibHksXG4gICAgcHVibGljIHJlYWRvbmx5IHBhcmVudFR5cGU6IFR5cGUsXG4gICAgcHVibGljIHJlYWRvbmx5IGRlZmluaW5nVHlwZTogVHlwZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3BlYzoganNpaS5Qcm9wZXJ0eSxcbiAgKSB7XG4gICAgc3VwZXIoc3lzdGVtLCBzcGVjKTtcbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYHByb3BlcnR5OiR7dGhpcy5wYXJlbnRUeXBlLmZxbn0uJHt0aGlzLm5hbWV9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkuXG4gICAqL1xuICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zcGVjLm5hbWU7XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoaXMgcHJvcGVydHkgb25seSBoYXMgYSBnZXR0ZXIgKGltbXV0YWJsZSkuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGltbXV0YWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLnNwZWMuaW1tdXRhYmxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB0aGlzIHByb3BlcnR5IGlzIHByb3RlY3RlZCAob3RoZXJ3aXNlIGl0IGlzIHB1YmxpYylcbiAgICovXG4gIHB1YmxpYyBnZXQgcHJvdGVjdGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXRoaXMuc3BlYy5wcm90ZWN0ZWQ7XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoaXMgcHJvcGVydHkgaXMgYWJzdHJhY3RcbiAgICovXG4gIHB1YmxpYyBnZXQgYWJzdHJhY3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5zcGVjLmFic3RyYWN0O1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB0aGlzIGlzIGEgc3RhdGljIHByb3BlcnR5LlxuICAgKi9cbiAgcHVibGljIGdldCBzdGF0aWMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5zcGVjLnN0YXRpYztcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGhpbnQgdGhhdCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHN0YXRpYywgaW1tdXRhYmxlIHByb3BlcnR5IGlzIGluaXRpYWxpemVkXG4gICAqIGR1cmluZyBzdGFydHVwLiBUaGlzIGFsbG93cyBlbWl0dGluZyBcImNvbnN0XCIgaWRpb21zIGluIGRpZmZlcmVudCB0YXJnZXQgbGFuZ3VhZ2VzLlxuICAgKiBJbXBsaWVzIGBzdGF0aWNgIGFuZCBgaW1tdXRhYmxlYC5cbiAgICovXG4gIHB1YmxpYyBnZXQgY29uc3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5zcGVjLmNvbnN0O1xuICB9XG5cbiAgcHVibGljIGdldCBvdmVycmlkZXMoKTogVHlwZSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCF0aGlzLnNwZWMub3ZlcnJpZGVzKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN5c3RlbS5maW5kRnFuKHRoaXMuc3BlYy5vdmVycmlkZXMpO1xuICB9XG5cbiAgcHVibGljIGdldCBkb2NzKCk6IERvY3Mge1xuICAgIHJldHVybiBuZXcgRG9jcyhcbiAgICAgIHRoaXMuc3lzdGVtLFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMuc3BlYy5kb2NzID8/IHt9LFxuICAgICAgdGhpcy5wYXJlbnRUeXBlLmRvY3MsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGxvY2F0aW9uIGluIHRoZSBtb2R1bGVcbiAgICovXG4gIHB1YmxpYyBnZXQgbG9jYXRpb25Jbk1vZHVsZSgpOiBTb3VyY2VMb2NhdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuc3BlYy5sb2NhdGlvbkluTW9kdWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbG9jYXRpb24gaW4gdGhlIHJlcG9zaXRvcnlcbiAgICovXG4gIHB1YmxpYyBnZXQgbG9jYXRpb25JblJlcG9zaXRvcnkoKTogU291cmNlTG9jYXRpb24gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBsb2NhdGlvbkluUmVwb3NpdG9yeSh0aGlzKTtcbiAgfVxufVxuIl19