"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@jsii/check-node/run");
const colors = require("colors/safe");
const yargs = require("yargs");
const lib_1 = require("../lib");
async function main() {
    var _a;
    const options = yargs
        .usage('$0 [JSII-FILE | MODULE-DIR...]', 'Prints an ASCII tree representation of a jsii type system.', (args) => args
        .positional('JSII-FILE', {
        type: 'string',
        desc: 'path to a .jsii file to load, all dependency .jsii files must be explicitly supplied',
    })
        .positional('MODULE-DIR', {
        type: 'string',
        desc: 'path to an jsii npm module directory, all jsii dependencies will be loaded transitively',
    }))
        .option('closure', {
        type: 'string',
        alias: 'c',
        desc: 'Load dependencies of package without assuming its a JSII package itself',
    })
        .option('all', {
        type: 'boolean',
        alias: 'a',
        desc: 'show all details',
        default: false,
    })
        .option('colors', {
        type: 'boolean',
        desc: 'enable/disable ANSI colors in output',
        default: true,
    })
        .option('dependencies', {
        type: 'boolean',
        alias: 'd',
        desc: 'show assembly dependencies',
        default: false,
    })
        .option('inheritance', {
        type: 'boolean',
        alias: 'i',
        desc: 'show base classes and implemented interfaces',
        default: false,
    })
        .option('members', {
        type: 'boolean',
        alias: 'm',
        desc: 'show type members',
        default: false,
    })
        .option('signatures', {
        type: 'boolean',
        alias: 's',
        desc: 'show method and property signatures',
        default: false,
    })
        .option('types', {
        type: 'boolean',
        alias: 't',
        desc: 'show types',
        default: false,
    })
        .option('validate', {
        type: 'boolean',
        alias: 'V',
        desc: 'Validate that assemblies match schema while loading',
        default: true,
    })
        .option('stabilities', {
        type: 'boolean',
        alias: 'S',
        desc: 'Show stabilities',
        default: false,
    }).argv;
    const typesys = new lib_1.TypeSystem();
    if (options.closure) {
        await typesys.loadNpmDependencies(options.closure, {
            validate: options.validate,
        });
    }
    await Promise.all(((_a = options.jsiiFile) !== null && _a !== void 0 ? _a : []).map((fileOrDirectory) => typesys.load(fileOrDirectory, { validate: options.validate })));
    const tst = new lib_1.TypeSystemTree(typesys, {
        dependencies: options.dependencies || options.all,
        types: options.types || options.all || options.members || options.inheritance,
        members: options.members || options.all,
        inheritance: options.inheritance || options.all,
        signatures: options.signatures || options.all,
        stabilities: options.stabilities || options.all,
        colors: options.colors,
    });
    tst.printTree();
}
main().catch((e) => {
    console.log(colors.red(e));
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNpaS10cmVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsianNpaS10cmVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0NBQThCO0FBRTlCLHNDQUFzQztBQUN0QywrQkFBK0I7QUFFL0IsZ0NBQW9EO0FBRXBELEtBQUssVUFBVSxJQUFJOztJQUNqQixNQUFNLE9BQU8sR0FBRyxLQUFLO1NBQ2xCLEtBQUssQ0FDSixnQ0FBZ0MsRUFDaEMsNERBQTRELEVBQzVELENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDUCxJQUFJO1NBQ0QsVUFBVSxDQUFDLFdBQVcsRUFBRTtRQUN2QixJQUFJLEVBQUUsUUFBUTtRQUNkLElBQUksRUFBRSxzRkFBc0Y7S0FDN0YsQ0FBQztTQUNELFVBQVUsQ0FBQyxZQUFZLEVBQUU7UUFDeEIsSUFBSSxFQUFFLFFBQVE7UUFDZCxJQUFJLEVBQUUseUZBQXlGO0tBQ2hHLENBQUMsQ0FDUDtTQUNBLE1BQU0sQ0FBQyxTQUFTLEVBQUU7UUFDakIsSUFBSSxFQUFFLFFBQVE7UUFDZCxLQUFLLEVBQUUsR0FBRztRQUNWLElBQUksRUFBRSx5RUFBeUU7S0FDaEYsQ0FBQztTQUNELE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDYixJQUFJLEVBQUUsU0FBUztRQUNmLEtBQUssRUFBRSxHQUFHO1FBQ1YsSUFBSSxFQUFFLGtCQUFrQjtRQUN4QixPQUFPLEVBQUUsS0FBSztLQUNmLENBQUM7U0FDRCxNQUFNLENBQUMsUUFBUSxFQUFFO1FBQ2hCLElBQUksRUFBRSxTQUFTO1FBQ2YsSUFBSSxFQUFFLHNDQUFzQztRQUM1QyxPQUFPLEVBQUUsSUFBSTtLQUNkLENBQUM7U0FDRCxNQUFNLENBQUMsY0FBYyxFQUFFO1FBQ3RCLElBQUksRUFBRSxTQUFTO1FBQ2YsS0FBSyxFQUFFLEdBQUc7UUFDVixJQUFJLEVBQUUsNEJBQTRCO1FBQ2xDLE9BQU8sRUFBRSxLQUFLO0tBQ2YsQ0FBQztTQUNELE1BQU0sQ0FBQyxhQUFhLEVBQUU7UUFDckIsSUFBSSxFQUFFLFNBQVM7UUFDZixLQUFLLEVBQUUsR0FBRztRQUNWLElBQUksRUFBRSw4Q0FBOEM7UUFDcEQsT0FBTyxFQUFFLEtBQUs7S0FDZixDQUFDO1NBQ0QsTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUNqQixJQUFJLEVBQUUsU0FBUztRQUNmLEtBQUssRUFBRSxHQUFHO1FBQ1YsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixPQUFPLEVBQUUsS0FBSztLQUNmLENBQUM7U0FDRCxNQUFNLENBQUMsWUFBWSxFQUFFO1FBQ3BCLElBQUksRUFBRSxTQUFTO1FBQ2YsS0FBSyxFQUFFLEdBQUc7UUFDVixJQUFJLEVBQUUscUNBQXFDO1FBQzNDLE9BQU8sRUFBRSxLQUFLO0tBQ2YsQ0FBQztTQUNELE1BQU0sQ0FBQyxPQUFPLEVBQUU7UUFDZixJQUFJLEVBQUUsU0FBUztRQUNmLEtBQUssRUFBRSxHQUFHO1FBQ1YsSUFBSSxFQUFFLFlBQVk7UUFDbEIsT0FBTyxFQUFFLEtBQUs7S0FDZixDQUFDO1NBQ0QsTUFBTSxDQUFDLFVBQVUsRUFBRTtRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLEtBQUssRUFBRSxHQUFHO1FBQ1YsSUFBSSxFQUFFLHFEQUFxRDtRQUMzRCxPQUFPLEVBQUUsSUFBSTtLQUNkLENBQUM7U0FDRCxNQUFNLENBQUMsYUFBYSxFQUFFO1FBQ3JCLElBQUksRUFBRSxTQUFTO1FBQ2YsS0FBSyxFQUFFLEdBQUc7UUFDVixJQUFJLEVBQUUsa0JBQWtCO1FBQ3hCLE9BQU8sRUFBRSxLQUFLO0tBQ2YsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUVWLE1BQU0sT0FBTyxHQUFHLElBQUksZ0JBQVUsRUFBRSxDQUFDO0lBRWpDLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtRQUNuQixNQUFNLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ2pELFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUTtTQUMzQixDQUFDLENBQUM7S0FDSjtJQUVELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FDZixPQUFFLE9BQU8sQ0FBQyxRQUFxQixtQ0FBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUM3RCxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDOUQsQ0FDRixDQUFDO0lBRUYsTUFBTSxHQUFHLEdBQUcsSUFBSSxvQkFBYyxDQUFDLE9BQU8sRUFBRTtRQUN0QyxZQUFZLEVBQUUsT0FBTyxDQUFDLFlBQVksSUFBSSxPQUFPLENBQUMsR0FBRztRQUNqRCxLQUFLLEVBQ0gsT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLFdBQVc7UUFDeEUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLEdBQUc7UUFDdkMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXLElBQUksT0FBTyxDQUFDLEdBQUc7UUFDL0MsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLEdBQUc7UUFDN0MsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXLElBQUksT0FBTyxDQUFDLEdBQUc7UUFDL0MsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO0tBQ3ZCLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNsQixDQUFDO0FBRUQsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0IsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQGpzaWkvY2hlY2stbm9kZS9ydW4nO1xuXG5pbXBvcnQgKiBhcyBjb2xvcnMgZnJvbSAnY29sb3JzL3NhZmUnO1xuaW1wb3J0ICogYXMgeWFyZ3MgZnJvbSAneWFyZ3MnO1xuXG5pbXBvcnQgeyBUeXBlU3lzdGVtLCBUeXBlU3lzdGVtVHJlZSB9IGZyb20gJy4uL2xpYic7XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSB5YXJnc1xuICAgIC51c2FnZShcbiAgICAgICckMCBbSlNJSS1GSUxFIHwgTU9EVUxFLURJUi4uLl0nLFxuICAgICAgJ1ByaW50cyBhbiBBU0NJSSB0cmVlIHJlcHJlc2VudGF0aW9uIG9mIGEganNpaSB0eXBlIHN5c3RlbS4nLFxuICAgICAgKGFyZ3MpID0+XG4gICAgICAgIGFyZ3NcbiAgICAgICAgICAucG9zaXRpb25hbCgnSlNJSS1GSUxFJywge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBkZXNjOiAncGF0aCB0byBhIC5qc2lpIGZpbGUgdG8gbG9hZCwgYWxsIGRlcGVuZGVuY3kgLmpzaWkgZmlsZXMgbXVzdCBiZSBleHBsaWNpdGx5IHN1cHBsaWVkJyxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5wb3NpdGlvbmFsKCdNT0RVTEUtRElSJywge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBkZXNjOiAncGF0aCB0byBhbiBqc2lpIG5wbSBtb2R1bGUgZGlyZWN0b3J5LCBhbGwganNpaSBkZXBlbmRlbmNpZXMgd2lsbCBiZSBsb2FkZWQgdHJhbnNpdGl2ZWx5JyxcbiAgICAgICAgICB9KSxcbiAgICApXG4gICAgLm9wdGlvbignY2xvc3VyZScsIHtcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgYWxpYXM6ICdjJyxcbiAgICAgIGRlc2M6ICdMb2FkIGRlcGVuZGVuY2llcyBvZiBwYWNrYWdlIHdpdGhvdXQgYXNzdW1pbmcgaXRzIGEgSlNJSSBwYWNrYWdlIGl0c2VsZicsXG4gICAgfSlcbiAgICAub3B0aW9uKCdhbGwnLCB7XG4gICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICBhbGlhczogJ2EnLFxuICAgICAgZGVzYzogJ3Nob3cgYWxsIGRldGFpbHMnLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSlcbiAgICAub3B0aW9uKCdjb2xvcnMnLCB7XG4gICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICBkZXNjOiAnZW5hYmxlL2Rpc2FibGUgQU5TSSBjb2xvcnMgaW4gb3V0cHV0JyxcbiAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgfSlcbiAgICAub3B0aW9uKCdkZXBlbmRlbmNpZXMnLCB7XG4gICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICBhbGlhczogJ2QnLFxuICAgICAgZGVzYzogJ3Nob3cgYXNzZW1ibHkgZGVwZW5kZW5jaWVzJyxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0pXG4gICAgLm9wdGlvbignaW5oZXJpdGFuY2UnLCB7XG4gICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICBhbGlhczogJ2knLFxuICAgICAgZGVzYzogJ3Nob3cgYmFzZSBjbGFzc2VzIGFuZCBpbXBsZW1lbnRlZCBpbnRlcmZhY2VzJyxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0pXG4gICAgLm9wdGlvbignbWVtYmVycycsIHtcbiAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgIGFsaWFzOiAnbScsXG4gICAgICBkZXNjOiAnc2hvdyB0eXBlIG1lbWJlcnMnLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSlcbiAgICAub3B0aW9uKCdzaWduYXR1cmVzJywge1xuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgYWxpYXM6ICdzJyxcbiAgICAgIGRlc2M6ICdzaG93IG1ldGhvZCBhbmQgcHJvcGVydHkgc2lnbmF0dXJlcycsXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB9KVxuICAgIC5vcHRpb24oJ3R5cGVzJywge1xuICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgYWxpYXM6ICd0JyxcbiAgICAgIGRlc2M6ICdzaG93IHR5cGVzJyxcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIH0pXG4gICAgLm9wdGlvbigndmFsaWRhdGUnLCB7XG4gICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICBhbGlhczogJ1YnLFxuICAgICAgZGVzYzogJ1ZhbGlkYXRlIHRoYXQgYXNzZW1ibGllcyBtYXRjaCBzY2hlbWEgd2hpbGUgbG9hZGluZycsXG4gICAgICBkZWZhdWx0OiB0cnVlLFxuICAgIH0pXG4gICAgLm9wdGlvbignc3RhYmlsaXRpZXMnLCB7XG4gICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICBhbGlhczogJ1MnLFxuICAgICAgZGVzYzogJ1Nob3cgc3RhYmlsaXRpZXMnLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSkuYXJndjtcblxuICBjb25zdCB0eXBlc3lzID0gbmV3IFR5cGVTeXN0ZW0oKTtcblxuICBpZiAob3B0aW9ucy5jbG9zdXJlKSB7XG4gICAgYXdhaXQgdHlwZXN5cy5sb2FkTnBtRGVwZW5kZW5jaWVzKG9wdGlvbnMuY2xvc3VyZSwge1xuICAgICAgdmFsaWRhdGU6IG9wdGlvbnMudmFsaWRhdGUsXG4gICAgfSk7XG4gIH1cblxuICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAoKG9wdGlvbnMuanNpaUZpbGUgYXMgc3RyaW5nW10pID8/IFtdKS5tYXAoKGZpbGVPckRpcmVjdG9yeSkgPT5cbiAgICAgIHR5cGVzeXMubG9hZChmaWxlT3JEaXJlY3RvcnksIHsgdmFsaWRhdGU6IG9wdGlvbnMudmFsaWRhdGUgfSksXG4gICAgKSxcbiAgKTtcblxuICBjb25zdCB0c3QgPSBuZXcgVHlwZVN5c3RlbVRyZWUodHlwZXN5cywge1xuICAgIGRlcGVuZGVuY2llczogb3B0aW9ucy5kZXBlbmRlbmNpZXMgfHwgb3B0aW9ucy5hbGwsXG4gICAgdHlwZXM6XG4gICAgICBvcHRpb25zLnR5cGVzIHx8IG9wdGlvbnMuYWxsIHx8IG9wdGlvbnMubWVtYmVycyB8fCBvcHRpb25zLmluaGVyaXRhbmNlLFxuICAgIG1lbWJlcnM6IG9wdGlvbnMubWVtYmVycyB8fCBvcHRpb25zLmFsbCxcbiAgICBpbmhlcml0YW5jZTogb3B0aW9ucy5pbmhlcml0YW5jZSB8fCBvcHRpb25zLmFsbCxcbiAgICBzaWduYXR1cmVzOiBvcHRpb25zLnNpZ25hdHVyZXMgfHwgb3B0aW9ucy5hbGwsXG4gICAgc3RhYmlsaXRpZXM6IG9wdGlvbnMuc3RhYmlsaXRpZXMgfHwgb3B0aW9ucy5hbGwsXG4gICAgY29sb3JzOiBvcHRpb25zLmNvbG9ycyxcbiAgfSk7XG5cbiAgdHN0LnByaW50VHJlZSgpO1xufVxuXG5tYWluKCkuY2F0Y2goKGUpID0+IHtcbiAgY29uc29sZS5sb2coY29sb3JzLnJlZChlKSk7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn0pO1xuIl19