"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compile = void 0;
const crypto = __importStar(require("crypto"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const util_1 = require("./util");
const compilerModule = require.resolve('jsii/bin/jsii');
/**
 * Compiles the source files in `workdir` with jsii.
 */
async function compile(workdir, options) {
    var _a, _b, _c, _d;
    (0, util_1.validateOptions)(options);
    const args = ['--silence-warnings', 'reserved-word'];
    const entrypoint = (_a = options.entrypoint) !== null && _a !== void 0 ? _a : 'index.ts';
    if (path.extname(entrypoint) !== '.ts') {
        throw new Error(`jsii entrypoint must be a .ts file: ${entrypoint}`);
    }
    if (!(await fs.pathExists(path.join(workdir, entrypoint)))) {
        throw new Error(`unable to find typescript entrypoint: ${path.join(workdir, entrypoint)}`);
    }
    // path to entrypoint without extension
    const basepath = path.join(path.dirname(entrypoint), path.basename(entrypoint, '.ts'));
    const moduleKey = (_c = (_b = options.moduleKey) === null || _b === void 0 ? void 0 : _b.replace(/\./g, '').replace(/\//g, '')) !== null && _c !== void 0 ? _c : crypto.createHash('sha256').update(basepath, 'utf8').digest('hex');
    // jsii modules to include
    const moduleDirs = (_d = options.deps) !== null && _d !== void 0 ? _d : [];
    const targets = {};
    const deps = {};
    for (const dir of moduleDirs) {
        // read module metadata
        const metadata = await fs.readJson(path.join(dir, 'package.json'));
        const moduleName = metadata.name;
        const moduleVersion = metadata.version;
        const targetdir = path.join(path.join(workdir, 'node_modules'), moduleName);
        await fs.mkdirp(path.dirname(targetdir));
        await fs.copy(dir, targetdir);
        // add to "deps" and "peer deps"
        if (!moduleName.startsWith('@types/')) {
            deps[moduleName] = moduleVersion;
        }
    }
    const pkg = {
        name: moduleKey,
        version: '0.0.0',
        author: 'generated@generated.com',
        main: `${basepath}.js`,
        types: `${basepath}.d.ts`,
        license: 'UNLICENSED',
        repository: { url: 'http://generated', type: 'git' },
        jsii: {
            outdir: 'dist',
            targets: targets,
        },
        dependencies: deps,
        peerDependencies: deps,
    };
    if (options.python) {
        targets.python = {
            distName: 'generated',
            module: options.python.moduleName,
        };
    }
    if (options.java) {
        targets.java = {
            package: options.java.package,
            maven: {
                groupId: 'generated',
                artifactId: 'generated',
            },
        };
    }
    if (options.csharp) {
        targets.dotnet = {
            namespace: options.csharp.namespace,
            packageId: options.csharp.namespace,
        };
    }
    if (options.golang) {
        targets.go = {
            moduleName: options.golang.moduleName,
            packageName: options.golang.packageName,
        };
    }
    await fs.writeFile(path.join(workdir, 'package.json'), JSON.stringify(pkg, undefined, 2));
    await (0, util_1.exec)(compilerModule, args, {
        cwd: workdir,
    });
}
exports.compile = compile;
//# sourceMappingURL=data:application/json;base64,