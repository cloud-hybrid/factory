"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testutil_1 = require("./testutil");
let assembly;
beforeAll(async () => {
    assembly = await testutil_1.TestJsiiModule.fromSource({
        'index.ts': `
        export class ClassA {
          public someMethod() {
          }
        }
        export class ClassB {
          public argumentMethod(args: BeeArgs) {
            Array.isArray(args);
          }
        }

        export interface BeeArgs { readonly value: string; readonly nested?: NestedType; }

        export interface NestedType { readonly x: number; }

        export * as submod from './submodule';
        `,
        'submodule.ts': `
        export class SubmoduleClass {
        }
      `,
    }, {
        name: 'my_assembly',
        jsii: testutil_1.DUMMY_JSII_CONFIG,
    });
});
afterAll(() => assembly.cleanup());
test('detect class instantiations', () => {
    const translator = assembly.successfullyCompile(`
    import * as ass from 'my_assembly';
    const a = new ass.ClassA();
  `);
    expect(translator.fqnsReferenced()).toEqual(['my_assembly.ClassA']);
});
test("don't detect hidden class instantiations", () => {
    const translator = assembly.successfullyCompile(`
    /// !hide
    import * as ass from 'my_assembly';
    const a = new ass.ClassA();
    /// !show
    const b = new ass.ClassB();
  `);
    expect(translator.fqnsReferenced()).toEqual(['my_assembly.ClassB']);
});
test('detect method calls', () => {
    const translator = assembly.successfullyCompile(`
    /// !hide
    import * as ass from 'my_assembly';
    const a = new ass.ClassA();
    /// !show
    a.someMethod();
  `);
    expect(translator.fqnsReferenced()).toEqual(['my_assembly.ClassA#someMethod']);
});
test('detect types of parameter used in method calls', () => {
    const translator = assembly.successfullyCompile(`
    /// !hide
    import * as ass from 'my_assembly';
    const b = new ass.ClassB();
    /// !show
    b.argumentMethod({ value: 'hello' });
  `);
    expect(translator.fqnsReferenced()).toEqual(['my_assembly.BeeArgs', 'my_assembly.ClassB#argumentMethod']);
});
test('detect nested types of parameter used in method calls', () => {
    const translator = assembly.successfullyCompile(`
    /// !hide
    import * as ass from 'my_assembly';
    const b = new ass.ClassB();
    /// !show
    b.argumentMethod({ value: 'hello', nested: { x: 3 } });
  `);
    expect(translator.fqnsReferenced()).toContain('my_assembly.NestedType');
});
test('detect types in submodules', () => {
    const translator = assembly.successfullyCompile(`
    import { submod as subby } from 'my_assembly';
    const b = new subby.SubmoduleClass();
  `);
    expect(translator.fqnsReferenced()).toContain('my_assembly.submod.SubmoduleClass');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkLXJlZmVyZW5jZXMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlY29yZC1yZWZlcmVuY2VzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBK0Q7QUFFL0QsSUFBSSxRQUF3QixDQUFDO0FBQzdCLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNuQixRQUFRLEdBQUcsTUFBTSx5QkFBYyxDQUFDLFVBQVUsQ0FDeEM7UUFDRSxVQUFVLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7U0FnQlQ7UUFFSCxjQUFjLEVBQUU7OztPQUdmO0tBQ0YsRUFDRDtRQUNFLElBQUksRUFBRSxhQUFhO1FBQ25CLElBQUksRUFBRSw0QkFBaUI7S0FDeEIsQ0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFFbkMsSUFBSSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtJQUN2QyxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUM7OztHQUcvQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0FBQ3RFLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtJQUNwRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUM7Ozs7OztHQU0vQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0FBQ3RFLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUMvQixNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUM7Ozs7OztHQU0vQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsK0JBQStCLENBQUMsQ0FBQyxDQUFDO0FBQ2pGLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGdEQUFnRCxFQUFFLEdBQUcsRUFBRTtJQUMxRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUM7Ozs7OztHQU0vQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMscUJBQXFCLEVBQUUsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO0FBQzVHLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHVEQUF1RCxFQUFFLEdBQUcsRUFBRTtJQUNqRSxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUM7Ozs7OztHQU0vQyxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDMUUsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFO0lBQ3RDLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQzs7O0dBRy9DLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsbUNBQW1DLENBQUMsQ0FBQztBQUNyRixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3RKc2lpTW9kdWxlLCBEVU1NWV9KU0lJX0NPTkZJRyB9IGZyb20gJy4vdGVzdHV0aWwnO1xuXG5sZXQgYXNzZW1ibHk6IFRlc3RKc2lpTW9kdWxlO1xuYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgYXNzZW1ibHkgPSBhd2FpdCBUZXN0SnNpaU1vZHVsZS5mcm9tU291cmNlKFxuICAgIHtcbiAgICAgICdpbmRleC50cyc6IGBcbiAgICAgICAgZXhwb3J0IGNsYXNzIENsYXNzQSB7XG4gICAgICAgICAgcHVibGljIHNvbWVNZXRob2QoKSB7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGV4cG9ydCBjbGFzcyBDbGFzc0Ige1xuICAgICAgICAgIHB1YmxpYyBhcmd1bWVudE1ldGhvZChhcmdzOiBCZWVBcmdzKSB7XG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgQmVlQXJncyB7IHJlYWRvbmx5IHZhbHVlOiBzdHJpbmc7IHJlYWRvbmx5IG5lc3RlZD86IE5lc3RlZFR5cGU7IH1cblxuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIE5lc3RlZFR5cGUgeyByZWFkb25seSB4OiBudW1iZXI7IH1cblxuICAgICAgICBleHBvcnQgKiBhcyBzdWJtb2QgZnJvbSAnLi9zdWJtb2R1bGUnO1xuICAgICAgICBgLFxuXG4gICAgICAnc3VibW9kdWxlLnRzJzogYFxuICAgICAgICBleHBvcnQgY2xhc3MgU3VibW9kdWxlQ2xhc3Mge1xuICAgICAgICB9XG4gICAgICBgLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ215X2Fzc2VtYmx5JyxcbiAgICAgIGpzaWk6IERVTU1ZX0pTSUlfQ09ORklHLFxuICAgIH0sXG4gICk7XG59KTtcblxuYWZ0ZXJBbGwoKCkgPT4gYXNzZW1ibHkuY2xlYW51cCgpKTtcblxudGVzdCgnZGV0ZWN0IGNsYXNzIGluc3RhbnRpYXRpb25zJywgKCkgPT4ge1xuICBjb25zdCB0cmFuc2xhdG9yID0gYXNzZW1ibHkuc3VjY2Vzc2Z1bGx5Q29tcGlsZShgXG4gICAgaW1wb3J0ICogYXMgYXNzIGZyb20gJ215X2Fzc2VtYmx5JztcbiAgICBjb25zdCBhID0gbmV3IGFzcy5DbGFzc0EoKTtcbiAgYCk7XG4gIGV4cGVjdCh0cmFuc2xhdG9yLmZxbnNSZWZlcmVuY2VkKCkpLnRvRXF1YWwoWydteV9hc3NlbWJseS5DbGFzc0EnXSk7XG59KTtcblxudGVzdChcImRvbid0IGRldGVjdCBoaWRkZW4gY2xhc3MgaW5zdGFudGlhdGlvbnNcIiwgKCkgPT4ge1xuICBjb25zdCB0cmFuc2xhdG9yID0gYXNzZW1ibHkuc3VjY2Vzc2Z1bGx5Q29tcGlsZShgXG4gICAgLy8vICFoaWRlXG4gICAgaW1wb3J0ICogYXMgYXNzIGZyb20gJ215X2Fzc2VtYmx5JztcbiAgICBjb25zdCBhID0gbmV3IGFzcy5DbGFzc0EoKTtcbiAgICAvLy8gIXNob3dcbiAgICBjb25zdCBiID0gbmV3IGFzcy5DbGFzc0IoKTtcbiAgYCk7XG4gIGV4cGVjdCh0cmFuc2xhdG9yLmZxbnNSZWZlcmVuY2VkKCkpLnRvRXF1YWwoWydteV9hc3NlbWJseS5DbGFzc0InXSk7XG59KTtcblxudGVzdCgnZGV0ZWN0IG1ldGhvZCBjYWxscycsICgpID0+IHtcbiAgY29uc3QgdHJhbnNsYXRvciA9IGFzc2VtYmx5LnN1Y2Nlc3NmdWxseUNvbXBpbGUoYFxuICAgIC8vLyAhaGlkZVxuICAgIGltcG9ydCAqIGFzIGFzcyBmcm9tICdteV9hc3NlbWJseSc7XG4gICAgY29uc3QgYSA9IG5ldyBhc3MuQ2xhc3NBKCk7XG4gICAgLy8vICFzaG93XG4gICAgYS5zb21lTWV0aG9kKCk7XG4gIGApO1xuICBleHBlY3QodHJhbnNsYXRvci5mcW5zUmVmZXJlbmNlZCgpKS50b0VxdWFsKFsnbXlfYXNzZW1ibHkuQ2xhc3NBI3NvbWVNZXRob2QnXSk7XG59KTtcblxudGVzdCgnZGV0ZWN0IHR5cGVzIG9mIHBhcmFtZXRlciB1c2VkIGluIG1ldGhvZCBjYWxscycsICgpID0+IHtcbiAgY29uc3QgdHJhbnNsYXRvciA9IGFzc2VtYmx5LnN1Y2Nlc3NmdWxseUNvbXBpbGUoYFxuICAgIC8vLyAhaGlkZVxuICAgIGltcG9ydCAqIGFzIGFzcyBmcm9tICdteV9hc3NlbWJseSc7XG4gICAgY29uc3QgYiA9IG5ldyBhc3MuQ2xhc3NCKCk7XG4gICAgLy8vICFzaG93XG4gICAgYi5hcmd1bWVudE1ldGhvZCh7IHZhbHVlOiAnaGVsbG8nIH0pO1xuICBgKTtcbiAgZXhwZWN0KHRyYW5zbGF0b3IuZnFuc1JlZmVyZW5jZWQoKSkudG9FcXVhbChbJ215X2Fzc2VtYmx5LkJlZUFyZ3MnLCAnbXlfYXNzZW1ibHkuQ2xhc3NCI2FyZ3VtZW50TWV0aG9kJ10pO1xufSk7XG5cbnRlc3QoJ2RldGVjdCBuZXN0ZWQgdHlwZXMgb2YgcGFyYW1ldGVyIHVzZWQgaW4gbWV0aG9kIGNhbGxzJywgKCkgPT4ge1xuICBjb25zdCB0cmFuc2xhdG9yID0gYXNzZW1ibHkuc3VjY2Vzc2Z1bGx5Q29tcGlsZShgXG4gICAgLy8vICFoaWRlXG4gICAgaW1wb3J0ICogYXMgYXNzIGZyb20gJ215X2Fzc2VtYmx5JztcbiAgICBjb25zdCBiID0gbmV3IGFzcy5DbGFzc0IoKTtcbiAgICAvLy8gIXNob3dcbiAgICBiLmFyZ3VtZW50TWV0aG9kKHsgdmFsdWU6ICdoZWxsbycsIG5lc3RlZDogeyB4OiAzIH0gfSk7XG4gIGApO1xuICBleHBlY3QodHJhbnNsYXRvci5mcW5zUmVmZXJlbmNlZCgpKS50b0NvbnRhaW4oJ215X2Fzc2VtYmx5Lk5lc3RlZFR5cGUnKTtcbn0pO1xuXG50ZXN0KCdkZXRlY3QgdHlwZXMgaW4gc3VibW9kdWxlcycsICgpID0+IHtcbiAgY29uc3QgdHJhbnNsYXRvciA9IGFzc2VtYmx5LnN1Y2Nlc3NmdWxseUNvbXBpbGUoYFxuICAgIGltcG9ydCB7IHN1Ym1vZCBhcyBzdWJieSB9IGZyb20gJ215X2Fzc2VtYmx5JztcbiAgICBjb25zdCBiID0gbmV3IHN1YmJ5LlN1Ym1vZHVsZUNsYXNzKCk7XG4gIGApO1xuICBleHBlY3QodHJhbnNsYXRvci5mcW5zUmVmZXJlbmNlZCgpKS50b0NvbnRhaW4oJ215X2Fzc2VtYmx5LnN1Ym1vZC5TdWJtb2R1bGVDbGFzcycpO1xufSk7XG4iXX0=