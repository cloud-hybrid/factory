"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const markdown_1 = require("../../lib/markdown/markdown");
const markdown_renderer_1 = require("../../lib/markdown/markdown-renderer");
const structure_renderer_1 = require("../../lib/markdown/structure-renderer");
const DEBUG = false;
test('can roundtrip markdown', () => {
    expectOutput(`
# Hello

Yes please.

> this
>
> works
`, `
# Hello

Yes please.

> this
>
> works
`);
});
test('can roundtrip lists', () => {
    expectOutput(`
* A list.
* Another list.
  * A nested list.

1. We might have numbers.
2. Yes it's a numbered list.
  `, `
* A list.
* Another list.

  * A nested list.

1. We might have numbers.
2. Yes it's a numbered list.
  `);
});
test('list with paragraphs', () => {
    expectOutput(`
* A list.
* Another list.

  Para2.
  `, `
* A list.
* Another list.

  Para2.
  `);
});
test('can roundtrip complex hyperlink texts', () => {
    expectOutput(`
This is a [hyperlink](https://amazonaws.com).

![Image though](fun.gif).

This is a [` +
        '`' +
        'monospace hyperlink' +
        '`' +
        `](https://amazonaws.com).
  `, `
This is a [hyperlink](https://amazonaws.com).

![Image though](fun.gif).

This is a [` +
        '`' +
        'monospace hyperlink' +
        '`' +
        `](https://amazonaws.com).
  `);
});
test('fenced code block', () => {
    expectOutput(['before', '```ts', 'banana', '  second', '```', 'after'].join('\n'), ['before', '', '```ts', 'banana', '  second', '```', '', 'after'].join('\n'));
});
test('indented code block', () => {
    expectOutput(['before', '', '    banana', '      second', '', 'after'].join('\n'), ['before', '', '```', 'banana', '  second', '```', '', 'after'].join('\n'));
});
test('code block followed by heading leaves paragraph marker', () => {
    expectOutput(['```', 'code_here', '```', '', '# Heading'].join('\n'), ['```', 'code_here', '```', '', '# Heading'].join('\n'));
});
test('emphases', () => {
    expectOutput(`
Text with *emphasis* and **strongness**.

Other style _emphasis_ and __strongness__.
  `, `
Text with *emphasis* and **strongness**.

Other style *emphasis* and **strongness**.
  `);
});
test('headings', () => {
    expectOutput(`
## Heading 2
### Heading 3
  `, `
## Heading 2

### Heading 3
  `);
});
test('HTML comments', () => {
    expectOutput(`
<!--HERE IS A COMMENT-->
  `, `
<!--HERE IS A COMMENT-->
  `);
});
function expectOutput(source, expected) {
    if (DEBUG) {
        const struct = new structure_renderer_1.StructureRenderer();
        // tslint:disable-next-line:no-console
        console.log(markdown_1.transformMarkdown(source, struct));
    }
    const output = markdown_1.transformMarkdown(source, new markdown_renderer_1.MarkdownRenderer());
    expect(output.trim()).toEqual(expected.trim());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmR0cmlwLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyb3VuZHRyaXAudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDBEQUFnRTtBQUNoRSw0RUFBd0U7QUFDeEUsOEVBQTBFO0FBRTFFLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQztBQUVwQixJQUFJLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLFlBQVksQ0FDVjs7Ozs7Ozs7Q0FRSCxFQUNHOzs7Ozs7OztDQVFILENBQ0UsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUMvQixZQUFZLENBQ1Y7Ozs7Ozs7R0FPRCxFQUNDOzs7Ozs7OztHQVFELENBQ0EsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtJQUNoQyxZQUFZLENBQ1Y7Ozs7O0dBS0QsRUFDQzs7Ozs7R0FLRCxDQUNBLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7SUFDakQsWUFBWSxDQUNWOzs7OztZQUtRO1FBQ04sR0FBRztRQUNILHFCQUFxQjtRQUNyQixHQUFHO1FBQ0g7R0FDSCxFQUNDOzs7OztZQUtRO1FBQ04sR0FBRztRQUNILHFCQUFxQjtRQUNyQixHQUFHO1FBQ0g7R0FDSCxDQUNBLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7SUFDN0IsWUFBWSxDQUNWLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ3BFLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDN0UsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUMvQixZQUFZLENBQ1YsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDcEUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUMzRSxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsd0RBQXdELEVBQUUsR0FBRyxFQUFFO0lBQ2xFLFlBQVksQ0FDVixDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ3ZELENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDeEQsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7SUFDcEIsWUFBWSxDQUNWOzs7O0dBSUQsRUFDQzs7OztHQUlELENBQ0EsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7SUFDcEIsWUFBWSxDQUNWOzs7R0FHRCxFQUNDOzs7O0dBSUQsQ0FDQSxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtJQUN6QixZQUFZLENBQ1Y7O0dBRUQsRUFDQzs7R0FFRCxDQUNBLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILFNBQVMsWUFBWSxDQUFDLE1BQWMsRUFBRSxRQUFnQjtJQUNwRCxJQUFJLEtBQUssRUFBRTtRQUNULE1BQU0sTUFBTSxHQUFHLElBQUksc0NBQWlCLEVBQUUsQ0FBQztRQUN2QyxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBaUIsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUNoRDtJQUVELE1BQU0sTUFBTSxHQUFHLDRCQUFpQixDQUFDLE1BQU0sRUFBRSxJQUFJLG9DQUFnQixFQUFFLENBQUMsQ0FBQztJQUNqRSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ2pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cmFuc2Zvcm1NYXJrZG93biB9IGZyb20gJy4uLy4uL2xpYi9tYXJrZG93bi9tYXJrZG93bic7XG5pbXBvcnQgeyBNYXJrZG93blJlbmRlcmVyIH0gZnJvbSAnLi4vLi4vbGliL21hcmtkb3duL21hcmtkb3duLXJlbmRlcmVyJztcbmltcG9ydCB7IFN0cnVjdHVyZVJlbmRlcmVyIH0gZnJvbSAnLi4vLi4vbGliL21hcmtkb3duL3N0cnVjdHVyZS1yZW5kZXJlcic7XG5cbmNvbnN0IERFQlVHID0gZmFsc2U7XG5cbnRlc3QoJ2NhbiByb3VuZHRyaXAgbWFya2Rvd24nLCAoKSA9PiB7XG4gIGV4cGVjdE91dHB1dChcbiAgICBgXG4jIEhlbGxvXG5cblllcyBwbGVhc2UuXG5cbj4gdGhpc1xuPlxuPiB3b3Jrc1xuYCxcbiAgICBgXG4jIEhlbGxvXG5cblllcyBwbGVhc2UuXG5cbj4gdGhpc1xuPlxuPiB3b3Jrc1xuYCxcbiAgKTtcbn0pO1xuXG50ZXN0KCdjYW4gcm91bmR0cmlwIGxpc3RzJywgKCkgPT4ge1xuICBleHBlY3RPdXRwdXQoXG4gICAgYFxuKiBBIGxpc3QuXG4qIEFub3RoZXIgbGlzdC5cbiAgKiBBIG5lc3RlZCBsaXN0LlxuXG4xLiBXZSBtaWdodCBoYXZlIG51bWJlcnMuXG4yLiBZZXMgaXQncyBhIG51bWJlcmVkIGxpc3QuXG4gIGAsXG4gICAgYFxuKiBBIGxpc3QuXG4qIEFub3RoZXIgbGlzdC5cblxuICAqIEEgbmVzdGVkIGxpc3QuXG5cbjEuIFdlIG1pZ2h0IGhhdmUgbnVtYmVycy5cbjIuIFllcyBpdCdzIGEgbnVtYmVyZWQgbGlzdC5cbiAgYCxcbiAgKTtcbn0pO1xuXG50ZXN0KCdsaXN0IHdpdGggcGFyYWdyYXBocycsICgpID0+IHtcbiAgZXhwZWN0T3V0cHV0KFxuICAgIGBcbiogQSBsaXN0LlxuKiBBbm90aGVyIGxpc3QuXG5cbiAgUGFyYTIuXG4gIGAsXG4gICAgYFxuKiBBIGxpc3QuXG4qIEFub3RoZXIgbGlzdC5cblxuICBQYXJhMi5cbiAgYCxcbiAgKTtcbn0pO1xuXG50ZXN0KCdjYW4gcm91bmR0cmlwIGNvbXBsZXggaHlwZXJsaW5rIHRleHRzJywgKCkgPT4ge1xuICBleHBlY3RPdXRwdXQoXG4gICAgYFxuVGhpcyBpcyBhIFtoeXBlcmxpbmtdKGh0dHBzOi8vYW1hem9uYXdzLmNvbSkuXG5cbiFbSW1hZ2UgdGhvdWdoXShmdW4uZ2lmKS5cblxuVGhpcyBpcyBhIFtgICtcbiAgICAgICdgJyArXG4gICAgICAnbW9ub3NwYWNlIGh5cGVybGluaycgK1xuICAgICAgJ2AnICtcbiAgICAgIGBdKGh0dHBzOi8vYW1hem9uYXdzLmNvbSkuXG4gIGAsXG4gICAgYFxuVGhpcyBpcyBhIFtoeXBlcmxpbmtdKGh0dHBzOi8vYW1hem9uYXdzLmNvbSkuXG5cbiFbSW1hZ2UgdGhvdWdoXShmdW4uZ2lmKS5cblxuVGhpcyBpcyBhIFtgICtcbiAgICAgICdgJyArXG4gICAgICAnbW9ub3NwYWNlIGh5cGVybGluaycgK1xuICAgICAgJ2AnICtcbiAgICAgIGBdKGh0dHBzOi8vYW1hem9uYXdzLmNvbSkuXG4gIGAsXG4gICk7XG59KTtcblxudGVzdCgnZmVuY2VkIGNvZGUgYmxvY2snLCAoKSA9PiB7XG4gIGV4cGVjdE91dHB1dChcbiAgICBbJ2JlZm9yZScsICdgYGB0cycsICdiYW5hbmEnLCAnICBzZWNvbmQnLCAnYGBgJywgJ2FmdGVyJ10uam9pbignXFxuJyksXG4gICAgWydiZWZvcmUnLCAnJywgJ2BgYHRzJywgJ2JhbmFuYScsICcgIHNlY29uZCcsICdgYGAnLCAnJywgJ2FmdGVyJ10uam9pbignXFxuJyksXG4gICk7XG59KTtcblxudGVzdCgnaW5kZW50ZWQgY29kZSBibG9jaycsICgpID0+IHtcbiAgZXhwZWN0T3V0cHV0KFxuICAgIFsnYmVmb3JlJywgJycsICcgICAgYmFuYW5hJywgJyAgICAgIHNlY29uZCcsICcnLCAnYWZ0ZXInXS5qb2luKCdcXG4nKSxcbiAgICBbJ2JlZm9yZScsICcnLCAnYGBgJywgJ2JhbmFuYScsICcgIHNlY29uZCcsICdgYGAnLCAnJywgJ2FmdGVyJ10uam9pbignXFxuJyksXG4gICk7XG59KTtcblxudGVzdCgnY29kZSBibG9jayBmb2xsb3dlZCBieSBoZWFkaW5nIGxlYXZlcyBwYXJhZ3JhcGggbWFya2VyJywgKCkgPT4ge1xuICBleHBlY3RPdXRwdXQoXG4gICAgWydgYGAnLCAnY29kZV9oZXJlJywgJ2BgYCcsICcnLCAnIyBIZWFkaW5nJ10uam9pbignXFxuJyksXG4gICAgWydgYGAnLCAnY29kZV9oZXJlJywgJ2BgYCcsICcnLCAnIyBIZWFkaW5nJ10uam9pbignXFxuJyksXG4gICk7XG59KTtcblxudGVzdCgnZW1waGFzZXMnLCAoKSA9PiB7XG4gIGV4cGVjdE91dHB1dChcbiAgICBgXG5UZXh0IHdpdGggKmVtcGhhc2lzKiBhbmQgKipzdHJvbmduZXNzKiouXG5cbk90aGVyIHN0eWxlIF9lbXBoYXNpc18gYW5kIF9fc3Ryb25nbmVzc19fLlxuICBgLFxuICAgIGBcblRleHQgd2l0aCAqZW1waGFzaXMqIGFuZCAqKnN0cm9uZ25lc3MqKi5cblxuT3RoZXIgc3R5bGUgKmVtcGhhc2lzKiBhbmQgKipzdHJvbmduZXNzKiouXG4gIGAsXG4gICk7XG59KTtcblxudGVzdCgnaGVhZGluZ3MnLCAoKSA9PiB7XG4gIGV4cGVjdE91dHB1dChcbiAgICBgXG4jIyBIZWFkaW5nIDJcbiMjIyBIZWFkaW5nIDNcbiAgYCxcbiAgICBgXG4jIyBIZWFkaW5nIDJcblxuIyMjIEhlYWRpbmcgM1xuICBgLFxuICApO1xufSk7XG5cbnRlc3QoJ0hUTUwgY29tbWVudHMnLCAoKSA9PiB7XG4gIGV4cGVjdE91dHB1dChcbiAgICBgXG48IS0tSEVSRSBJUyBBIENPTU1FTlQtLT5cbiAgYCxcbiAgICBgXG48IS0tSEVSRSBJUyBBIENPTU1FTlQtLT5cbiAgYCxcbiAgKTtcbn0pO1xuXG5mdW5jdGlvbiBleHBlY3RPdXRwdXQoc291cmNlOiBzdHJpbmcsIGV4cGVjdGVkOiBzdHJpbmcpIHtcbiAgaWYgKERFQlVHKSB7XG4gICAgY29uc3Qgc3RydWN0ID0gbmV3IFN0cnVjdHVyZVJlbmRlcmVyKCk7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyh0cmFuc2Zvcm1NYXJrZG93bihzb3VyY2UsIHN0cnVjdCkpO1xuICB9XG5cbiAgY29uc3Qgb3V0cHV0ID0gdHJhbnNmb3JtTWFya2Rvd24oc291cmNlLCBuZXcgTWFya2Rvd25SZW5kZXJlcigpKTtcbiAgZXhwZWN0KG91dHB1dC50cmltKCkpLnRvRXF1YWwoZXhwZWN0ZWQudHJpbSgpKTtcbn1cbiJdfQ==