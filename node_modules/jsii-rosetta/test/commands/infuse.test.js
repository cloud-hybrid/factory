"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const lib_1 = require("../../lib");
const extract_1 = require("../../lib/commands/extract");
const infuse_1 = require("../../lib/commands/infuse");
const assemblies_1 = require("../../lib/jsii/assemblies");
const testutil_1 = require("../testutil");
const DUMMY_README = `
  Here is an example of how to use ClassA:

  \`\`\`ts some=metadata
  import * as ass from 'my_assembly';
  const aClass = new ass.ClassA();
  aClass.someMethod();
  \`\`\`
`;
const TABLET_FILE = 'text.tabl.json';
let assembly;
beforeEach(async () => {
    // Create an assembly in a temp directory
    assembly = await testutil_1.TestJsiiModule.fromSource({
        'index.ts': `
      export class ClassA {
        public someMethod() {
        }
      }
      export class ClassB {
        public argumentMethod(args: BeeArgs) {
          Array.isArray(args);
        }
      }
      export interface BeeArgs { readonly value: string; readonly nested?: NestedType; }
      export interface NestedType { readonly x: number; }
      `,
        'README.md': DUMMY_README,
    }, {
        name: 'my_assembly',
        jsii: testutil_1.DUMMY_JSII_CONFIG,
    });
    // Create a tabletFile in the same directory
    await extract_1.extractSnippets([assembly.moduleDirectory], {
        cacheToFile: path.join(assembly.moduleDirectory, TABLET_FILE),
        includeCompilerDiagnostics: false,
        validateAssemblies: false,
    });
});
afterEach(async () => assembly.cleanup());
test('examples are added in the assembly', async () => {
    var _a;
    await infuse_1.infuse([assembly.moduleDirectory]);
    const assemblies = await assemblies_1.loadAssemblies([assembly.moduleDirectory], false);
    const types = assemblies[0].assembly.types;
    expect(types).toBeDefined();
    expect((_a = types['my_assembly.ClassA'].docs) === null || _a === void 0 ? void 0 : _a.example).toBeDefined();
});
test('infuse copies example metadata', async () => {
    var _a, _b, _c;
    await infuse_1.infuse([assembly.moduleDirectory]);
    // THEN: the metadata that used to be on the README snippet is also on the class example
    const updatedAssembly = (await fs.readJson(path.join(assembly.moduleDirectory, '.jsii')));
    const typeDocs = (_b = (_a = updatedAssembly.types) === null || _a === void 0 ? void 0 : _a['my_assembly.ClassA']) === null || _b === void 0 ? void 0 : _b.docs;
    expect((_c = typeDocs === null || typeDocs === void 0 ? void 0 : typeDocs.custom) === null || _c === void 0 ? void 0 : _c.exampleMetadata).toEqual('some=metadata infused');
});
test('examples are added to the tablet under new keys', async () => {
    const originalTabletFile = path.join(assembly.moduleDirectory, TABLET_FILE);
    const updatedTabletFile = path.join(assembly.moduleDirectory, 'tablet2.tabl.json');
    const originalDefaultTablet = await lib_1.LanguageTablet.fromFile(path.join(assembly.moduleDirectory, lib_1.DEFAULT_TABLET_NAME));
    await infuse_1.infuse([assembly.moduleDirectory], {
        cacheFromFile: originalTabletFile,
        cacheToFile: updatedTabletFile,
    });
    const originalCache = await lib_1.LanguageTablet.fromFile(originalTabletFile);
    const updatedCache = await lib_1.LanguageTablet.fromFile(updatedTabletFile);
    const updatedDefaultTablet = await lib_1.LanguageTablet.fromFile(path.join(assembly.moduleDirectory, lib_1.DEFAULT_TABLET_NAME));
    expect(updatedDefaultTablet.count).toEqual(originalDefaultTablet.count + 1);
    expect(updatedCache.count).toEqual(originalCache.count);
    expect(updatedCache.snippetKeys).not.toEqual(originalCache.snippetKeys);
});
test('can log to output file', async () => {
    await infuse_1.infuse([assembly.moduleDirectory], {
        logFile: path.join(assembly.moduleDirectory, infuse_1.DEFAULT_INFUSION_RESULTS_NAME),
    });
    // assert that the output file exists and there is some information in the file.
    const stats = await fs.stat(path.join(assembly.moduleDirectory, infuse_1.DEFAULT_INFUSION_RESULTS_NAME));
    expect(stats.isFile()).toBeTruthy();
    expect(stats.size).toBeGreaterThan(0);
});
//# sourceMappingURL=data:application/json;base64,