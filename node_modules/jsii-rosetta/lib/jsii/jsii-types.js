"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeObjectLiteral = exports.determineJsiiType = void 0;
const ts = require("typescript");
const types_1 = require("../typescript/types");
const jsii_utils_1 = require("./jsii-utils");
function determineJsiiType(typeChecker, type) {
    var _a, _b;
    // this means the snippet didn't have enough info for the TypeScript compiler to figure out the type -
    // so, just render the fallback
    if (type.intrinsicName === 'error') {
        return { kind: 'unknown' };
    }
    type = type.getNonNullableType();
    const mapValuesType = types_1.mapElementType(type, typeChecker);
    if (mapValuesType.result === 'map') {
        return {
            kind: 'map',
            elementType: mapValuesType.elementType
                ? determineJsiiType(typeChecker, mapValuesType.elementType)
                : { kind: 'builtIn', builtIn: 'any' },
        };
    }
    if (((_a = type.symbol) === null || _a === void 0 ? void 0 : _a.name) === 'Array') {
        const typeRef = type;
        if (((_b = typeRef.typeArguments) === null || _b === void 0 ? void 0 : _b.length) === 1) {
            return {
                kind: 'list',
                elementType: determineJsiiType(typeChecker, typeRef.typeArguments[0]),
            };
        }
        return {
            kind: 'list',
            elementType: { kind: 'builtIn', builtIn: 'any' },
        };
    }
    // User-defined or aliased type
    if (type.aliasSymbol) {
        return { kind: 'namedType', name: type.aliasSymbol.name };
    }
    if (type.symbol) {
        return { kind: 'namedType', name: type.symbol.name };
    }
    const typeScriptBuiltInType = types_1.builtInTypeName(type);
    if (typeScriptBuiltInType) {
        return { kind: 'builtIn', builtIn: typeScriptBuiltInType };
    }
    if (type.isUnion() || type.isIntersection()) {
        return {
            kind: 'error',
            message: `Type unions or intersections are not supported in examples, got: ${typeChecker.typeToString(type)}`,
        };
    }
    return { kind: 'unknown' };
}
exports.determineJsiiType = determineJsiiType;
function analyzeObjectLiteral(typeChecker, node) {
    var _a;
    const type = types_1.inferredTypeOfExpression(typeChecker, node);
    if (!type) {
        return { kind: 'unknown' };
    }
    const call = findEnclosingCallExpression(node);
    const isDeclaredCall = !!(call && ((_a = typeChecker.getResolvedSignature(call)) === null || _a === void 0 ? void 0 : _a.declaration));
    if (jsii_utils_1.hasAnyFlag(type.flags, ts.TypeFlags.Any)) {
        // The type checker by itself won't tell us the difference between an `any` that
        // was literally declared as a type in the code, vs an `any` it assumes because it
        // can't find a function's type declaration.
        //
        // Search for the function's declaration and only if we can't find it,
        // the type is actually unknown (otherwise it's a literal 'any').
        return isDeclaredCall ? { kind: 'map' } : { kind: 'unknown' };
    }
    // If the type is a union between a struct and something else, return the first possible struct
    const structCandidates = type.isUnion() ? type.types : [type];
    for (const candidate of structCandidates) {
        const structType = jsii_utils_1.analyzeStructType(typeChecker, candidate);
        if (structType) {
            return structType;
        }
    }
    return { kind: 'map' };
}
exports.analyzeObjectLiteral = analyzeObjectLiteral;
function findEnclosingCallExpression(node) {
    while (node) {
        if (ts.isCallLikeExpression(node)) {
            return node;
        }
        node = node.parent;
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,