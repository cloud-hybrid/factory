"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findContainingSubmodule = exports.findTypeLookupAssembly = exports.replaceAssembly = exports.allTypeScriptSnippets = exports.allSnippetSources = exports.loadAllDefaultTablets = exports.loadAssemblies = exports.EXAMPLE_METADATA_JSDOCTAG = void 0;
const spec = require("@jsii/spec");
const crypto = require("crypto");
const fs = require("fs-extra");
const path = require("path");
const fixtures_1 = require("../fixtures");
const extract_snippets_1 = require("../markdown/extract-snippets");
const snippet_1 = require("../snippet");
const strict_1 = require("../strict");
const tablets_1 = require("../tablets/tablets");
const util_1 = require("../util");
// eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports
const sortJson = require('sort-json');
/**
 * The JSDoc tag users can use to associate non-visible metadata with an example
 *
 * In a Markdown section, metadata goes after the code block fence, where it will
 * be attached to the example but invisible.
 *
 *    ```ts metadata=goes here
 *
 * But in doc comments, '@example' already delineates the example, and any metadata
 * in there added by the '///' tags becomes part of the visible code (there is no
 * place to put hidden information).
 *
 * We introduce the '@exampleMetadata' tag to put that additional information.
 */
exports.EXAMPLE_METADATA_JSDOCTAG = 'exampleMetadata';
/**
 * Load assemblies by filename or directory
 */
async function loadAssemblies(assemblyLocations, validateAssemblies) {
    return Promise.all(assemblyLocations.map(loadAssembly));
    async function loadAssembly(location) {
        const stat = await fs.stat(location);
        if (stat.isDirectory()) {
            return loadAssembly(path.join(location, '.jsii'));
        }
        return {
            assembly: await loadAssemblyFromFile(location, validateAssemblies),
            directory: path.dirname(location),
        };
    }
}
exports.loadAssemblies = loadAssemblies;
async function loadAssemblyFromFile(filename, validate) {
    const contents = await fs.readJSON(filename, { encoding: 'utf-8' });
    return validate ? spec.validateAssembly(contents) : contents;
}
/**
 * Load the default tablets for every assembly, if available
 *
 * Returns a map of { directory -> tablet }.
 */
async function loadAllDefaultTablets(asms) {
    return util_1.mkDict(await Promise.all(asms.map(async (a) => [a.directory, await tablets_1.LanguageTablet.fromOptionalFile(path.join(a.directory, tablets_1.DEFAULT_TABLET_NAME))])));
}
exports.loadAllDefaultTablets = loadAllDefaultTablets;
/**
 * Return all markdown and example snippets from the given assembly
 */
function allSnippetSources(assembly) {
    var _a;
    const ret = [];
    if (assembly.readme) {
        ret.push({
            type: 'markdown',
            markdown: assembly.readme.markdown,
            location: { api: 'moduleReadme', moduleFqn: assembly.name },
        });
    }
    for (const [submoduleFqn, submodule] of Object.entries((_a = assembly.submodules) !== null && _a !== void 0 ? _a : {})) {
        if (submodule.readme) {
            ret.push({
                type: 'markdown',
                markdown: submodule.readme.markdown,
                location: { api: 'moduleReadme', moduleFqn: submoduleFqn },
            });
        }
    }
    if (assembly.types) {
        Object.values(assembly.types).forEach((type) => {
            var _a, _b;
            emitDocs(type.docs, { api: 'type', fqn: type.fqn });
            if (spec.isEnumType(type)) {
                type.members.forEach((m) => emitDocs(m.docs, { api: 'member', fqn: type.fqn, memberName: m.name }));
            }
            if (spec.isClassType(type)) {
                emitDocsForCallable(type.initializer, type.fqn);
            }
            if (spec.isClassOrInterfaceType(type)) {
                ((_a = type.methods) !== null && _a !== void 0 ? _a : []).forEach((m) => emitDocsForCallable(m, type.fqn, m.name));
                ((_b = type.properties) !== null && _b !== void 0 ? _b : []).forEach((m) => emitDocs(m.docs, { api: 'member', fqn: type.fqn, memberName: m.name }));
            }
        });
    }
    return ret;
    function emitDocsForCallable(callable, fqn, memberName) {
        var _a;
        if (!callable) {
            return;
        }
        emitDocs(callable.docs, memberName ? { api: 'member', fqn, memberName } : { api: 'initializer', fqn });
        for (const parameter of (_a = callable.parameters) !== null && _a !== void 0 ? _a : []) {
            emitDocs(parameter.docs, {
                api: 'parameter',
                fqn: fqn,
                methodName: memberName !== null && memberName !== void 0 ? memberName : snippet_1.INITIALIZER_METHOD_NAME,
                parameterName: parameter.name,
            });
        }
    }
    function emitDocs(docs, location) {
        var _a;
        if (!docs) {
            return;
        }
        if (docs.remarks) {
            ret.push({
                type: 'markdown',
                markdown: docs.remarks,
                location,
            });
        }
        if (docs.example) {
            ret.push({
                type: 'example',
                source: docs.example,
                metadata: util_1.fmap((_a = docs.custom) === null || _a === void 0 ? void 0 : _a[exports.EXAMPLE_METADATA_JSDOCTAG], snippet_1.parseMetadataLine),
                location,
            });
        }
    }
}
exports.allSnippetSources = allSnippetSources;
function allTypeScriptSnippets(assemblies, loose = false) {
    var _a;
    const ret = new Array();
    for (const { assembly, directory } of assemblies) {
        const strict = strict_1.enforcesStrictMode(assembly);
        for (const source of allSnippetSources(assembly)) {
            switch (source.type) {
                case 'example':
                    // If an example is an infused example, we do not care about compiler errors.
                    // We are relying on the tablet cache to have this example stored already.
                    const [strictForExample, looseForExample] = ((_a = source.metadata) === null || _a === void 0 ? void 0 : _a.infused) !== undefined ? [false, true] : [strict, loose];
                    const location = { api: source.location, field: { field: 'example' } };
                    const snippet = snippet_1.updateParameters(snippet_1.typeScriptSnippetFromSource(source.source, location, strictForExample), {
                        [snippet_1.SnippetParameters.$PROJECT_DIRECTORY]: directory,
                        ...source.metadata,
                    });
                    ret.push(fixtures_1.fixturize(snippet, looseForExample));
                    break;
                case 'markdown':
                    for (const snippet of extract_snippets_1.extractTypescriptSnippetsFromMarkdown(source.markdown, source.location, strict)) {
                        const withDirectory = snippet_1.updateParameters(snippet, {
                            [snippet_1.SnippetParameters.$PROJECT_DIRECTORY]: directory,
                        });
                        ret.push(fixtures_1.fixturize(withDirectory, loose));
                    }
            }
        }
    }
    return ret;
}
exports.allTypeScriptSnippets = allTypeScriptSnippets;
/**
 * Replaces the file where the original assembly file *should* be found with a new assembly file.
 * Recalculates the fingerprint of the assembly to avoid tampering detection.
 */
async function replaceAssembly(assembly, directory) {
    const fileName = path.join(directory, '.jsii');
    await fs.writeJson(fileName, _fingerprint(assembly), {
        encoding: 'utf8',
        spaces: 2,
    });
}
exports.replaceAssembly = replaceAssembly;
/**
 * This function is copied from `packages/jsii/lib/assembler.ts`.
 * We should make sure not to change one without changing the other as well.
 */
function _fingerprint(assembly) {
    delete assembly.fingerprint;
    assembly = sortJson(assembly);
    const fingerprint = crypto.createHash('sha256').update(JSON.stringify(assembly)).digest('base64');
    return { ...assembly, fingerprint };
}
const MAX_ASM_CACHE = 3;
const ASM_CACHE = [];
/**
 * Recursively searches for a .jsii file in the directory.
 * When file is found, checks cache to see if we already
 * stored the assembly in memory. If not, we synchronously
 * load the assembly into memory.
 */
function findTypeLookupAssembly(startingDirectory) {
    const pjLocation = findPackageJsonLocation(path.resolve(startingDirectory));
    if (!pjLocation) {
        return undefined;
    }
    const directory = path.dirname(pjLocation);
    const fromCache = ASM_CACHE.find((c) => c.directory === directory);
    if (fromCache) {
        return fromCache;
    }
    const loaded = loadLookupAssembly(directory);
    if (!loaded) {
        return undefined;
    }
    while (ASM_CACHE.length >= MAX_ASM_CACHE) {
        ASM_CACHE.pop();
    }
    ASM_CACHE.unshift(loaded);
    return loaded;
}
exports.findTypeLookupAssembly = findTypeLookupAssembly;
function loadLookupAssembly(directory) {
    var _a, _b;
    const assemblyFile = path.join(directory, '.jsii');
    if (!fs.pathExistsSync(assemblyFile)) {
        return undefined;
    }
    const packageJson = fs.readJSONSync(path.join(directory, 'package.json'), { encoding: 'utf-8' });
    const assembly = fs.readJSONSync(assemblyFile, { encoding: 'utf-8' });
    const symbolIdMap = util_1.mkDict([
        ...Object.values((_a = assembly.types) !== null && _a !== void 0 ? _a : {}).map((type) => { var _a; return [(_a = type.symbolId) !== null && _a !== void 0 ? _a : '', type.fqn]; }),
        ...Object.entries((_b = assembly.submodules) !== null && _b !== void 0 ? _b : {}).map(([fqn, mod]) => { var _a; return [(_a = mod.symbolId) !== null && _a !== void 0 ? _a : '', fqn]; }),
    ]);
    return {
        packageJson,
        assembly,
        directory,
        symbolIdMap,
    };
}
function findPackageJsonLocation(currentPath) {
    // eslint-disable-next-line no-constant-condition
    while (true) {
        const candidate = path.join(currentPath, 'package.json');
        if (fs.existsSync(candidate)) {
            return candidate;
        }
        const parentPath = path.resolve(currentPath, '..');
        if (parentPath === currentPath) {
            return undefined;
        }
        currentPath = parentPath;
    }
}
/**
 * Find the jsii [sub]module that contains the given FQN
 *
 * @returns `undefined` if the type is a member of the assembly root.
 */
function findContainingSubmodule(assembly, fqn) {
    var _a;
    const submoduleNames = Object.keys((_a = assembly.submodules) !== null && _a !== void 0 ? _a : {});
    util_1.sortBy(submoduleNames, (s) => [-s.length]); // Longest first
    for (const s of submoduleNames) {
        if (fqn.startsWith(`${s}.`)) {
            return s;
        }
    }
    return undefined;
}
exports.findContainingSubmodule = findContainingSubmodule;
//# sourceMappingURL=data:application/json;base64,