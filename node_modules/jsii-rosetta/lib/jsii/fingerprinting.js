"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeFingerprinter = void 0;
const spec = require("@jsii/spec");
const crypto = require("crypto");
/**
 * Return a fingerprint for a type.
 *
 * The fingerprint will change if the API of the given type changes.
 *
 * The fingerprint is an approximation, it's not exhaustive. It will not trace
 * into types from assemblies it can't see, for example. For the purposes of Rosetta,
 * we'll assume this is Good Enoughâ„¢.
 */
class TypeFingerprinter {
    constructor(assemblies) {
        this.cache = new Map();
        this.assemblies = new Map();
        for (const assembly of assemblies) {
            this.assemblies.set(assembly.name, assembly);
        }
    }
    /**
     * Return a single fingerprint that encompasses all fqns in the list
     */
    fingerprintAll(fqns) {
        const hash = crypto.createHash('sha256');
        for (const fqn of fqns) {
            hash.update(this.fingerprintType(fqn));
        }
        return hash.digest('hex');
    }
    /**
     * Return the fingerprint for the given FQN in the assembly of this fingerprinter
     *
     * The fingerprint is always going to contain the FQN, even if the type doesn't exist
     * in this assembly.
     */
    fingerprintType(fqn) {
        return this.doFingerprint(fqn, new Set([fqn]));
    }
    doFingerprint(fqn, recursionBreaker) {
        var _a, _b, _c, _d, _e;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const self = this;
        const existing = this.cache.get(fqn);
        if (existing) {
            return existing;
        }
        const hash = crypto.createHash('sha256');
        hash.update(fqn);
        const type = this.findType(fqn);
        if (type) {
            hash.update(type.kind);
            switch (type.kind) {
                case spec.TypeKind.Enum:
                    for (const member of sortedByName(type.members)) {
                        hash.update(member.name);
                    }
                    break;
                case spec.TypeKind.Class:
                case spec.TypeKind.Interface:
                    if (type.kind === spec.TypeKind.Class) {
                        visitType(type.base);
                        visitCallable(type.initializer);
                    }
                    for (const prop of sortedByName((_a = type.properties) !== null && _a !== void 0 ? _a : [])) {
                        hash.update(prop.name);
                        visitBools(prop.immutable, prop.static, prop.optional, prop.protected);
                        visitTypeReference(prop.type);
                    }
                    for (const method of sortedByName((_b = type.methods) !== null && _b !== void 0 ? _b : [])) {
                        hash.update(method.name);
                        visitCallable(method);
                        visitBools((_c = method.returns) === null || _c === void 0 ? void 0 : _c.optional);
                        visitTypeReference((_d = method.returns) === null || _d === void 0 ? void 0 : _d.type);
                    }
                    for (const implint of (_e = type.interfaces) !== null && _e !== void 0 ? _e : []) {
                        visitType(implint);
                    }
                    break;
            }
        }
        const ret = hash.digest('hex');
        this.cache.set(fqn, ret);
        return ret;
        function visitType(fqn) {
            if (!fqn) {
                return;
            }
            if (recursionBreaker.has(fqn)) {
                hash.update('$RECURSION$');
                return;
            }
            recursionBreaker.add(fqn);
            hash.update(self.doFingerprint(fqn, recursionBreaker));
            recursionBreaker.delete(fqn);
        }
        function visitCallable(callable) {
            var _a;
            if (!callable) {
                return;
            }
            visitBools(callable.protected);
            for (const param of (_a = callable.parameters) !== null && _a !== void 0 ? _a : []) {
                visitBools(param.optional, param.variadic);
                visitTypeReference(param.type);
            }
        }
        function visitTypeReference(typeRef) {
            if (!typeRef) {
                return;
            }
            if (spec.isPrimitiveTypeReference(typeRef)) {
                hash.update(typeRef.primitive);
            }
            if (spec.isNamedTypeReference(typeRef)) {
                visitType(typeRef.fqn);
            }
            if (spec.isCollectionTypeReference(typeRef)) {
                hash.update(typeRef.collection.kind);
                visitTypeReference(typeRef.collection.elementtype);
            }
            if (spec.isUnionTypeReference(typeRef)) {
                for (const type of typeRef.union.types) {
                    visitTypeReference(type);
                }
            }
        }
        function visitBools(...vs) {
            hash.update(vs.map((v) => (v ? '1' : '0')).join(''));
        }
    }
    findType(fqn) {
        var _a, _b;
        const assemblyName = fqn.split('.')[0];
        return (_b = (_a = this.assemblies.get(assemblyName)) === null || _a === void 0 ? void 0 : _a.types) === null || _b === void 0 ? void 0 : _b[fqn];
    }
}
exports.TypeFingerprinter = TypeFingerprinter;
function sortedByName(xs) {
    xs.sort((a, b) => a.name.localeCompare(b.name));
    return xs;
}
//# sourceMappingURL=data:application/json;base64,