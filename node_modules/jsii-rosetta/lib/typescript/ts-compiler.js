"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.STANDARD_COMPILER_OPTIONS = exports.TypeScriptCompiler = void 0;
const ts = require("typescript");
class TypeScriptCompiler {
    constructor() {
        this.realHost = ts.createCompilerHost(exports.STANDARD_COMPILER_OPTIONS, true);
        /**
         * A compiler-scoped cache to avoid having to re-parse the same library files for every compilation
         */
        this.fileCache = new Map();
    }
    createInMemoryCompilerHost(sourcePath, sourceContents, currentDirectory) {
        const realHost = this.realHost;
        const sourceFile = ts.createSourceFile(sourcePath, sourceContents, ts.ScriptTarget.Latest);
        return {
            ...realHost,
            fileExists: (filePath) => filePath === sourcePath || this.fileCache.has(filePath) || realHost.fileExists(filePath),
            getCurrentDirectory: currentDirectory != null ? () => currentDirectory : realHost.getCurrentDirectory,
            getSourceFile: (fileName, languageVersion, onError, shouldCreateNewSourceFile) => {
                if (fileName === sourcePath) {
                    return sourceFile;
                }
                const existing = this.fileCache.get(fileName);
                if (existing) {
                    return existing;
                }
                const parsed = realHost.getSourceFile(fileName, languageVersion, onError, shouldCreateNewSourceFile);
                this.fileCache.set(fileName, parsed);
                return parsed;
            },
            readFile: (filePath) => (filePath === sourcePath ? sourceContents : realHost.readFile(filePath)),
            writeFile: () => void undefined,
        };
    }
    compileInMemory(filename, contents, currentDirectory) {
        if (!filename.endsWith('.ts')) {
            // Necessary or the TypeScript compiler won't compile the file.
            filename += '.ts';
        }
        const program = ts.createProgram({
            rootNames: [filename],
            options: exports.STANDARD_COMPILER_OPTIONS,
            host: this.createInMemoryCompilerHost(filename, contents, currentDirectory),
        });
        const rootFile = program.getSourceFile(filename);
        if (rootFile == null) {
            throw new Error(`Oopsie -- couldn't find root file back: ${filename}`);
        }
        return { program, rootFile };
    }
}
exports.TypeScriptCompiler = TypeScriptCompiler;
exports.STANDARD_COMPILER_OPTIONS = {
    alwaysStrict: true,
    charset: 'utf8',
    declaration: true,
    experimentalDecorators: true,
    inlineSourceMap: true,
    inlineSources: true,
    lib: ['lib.es2016.d.ts', 'lib.es2017.object.d.ts', 'lib.es2017.string.d.ts'],
    module: ts.ModuleKind.CommonJS,
    noEmitOnError: true,
    noFallthroughCasesInSwitch: true,
    noImplicitAny: true,
    noImplicitReturns: true,
    noImplicitThis: true,
    noUnusedLocals: false,
    noUnusedParameters: false,
    resolveJsonModule: true,
    strict: true,
    strictNullChecks: true,
    strictPropertyInitialization: true,
    stripInternal: true,
    target: ts.ScriptTarget.ES2019,
    // Incremental builds
    incremental: true,
    tsBuildInfoFile: '.tsbuildinfo',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHMtY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cy1jb21waWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBaUM7QUFFakMsTUFBYSxrQkFBa0I7SUFBL0I7UUFDbUIsYUFBUSxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxpQ0FBeUIsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVuRjs7V0FFRztRQUNjLGNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBcUMsQ0FBQztJQXFENUUsQ0FBQztJQW5EUSwwQkFBMEIsQ0FDL0IsVUFBa0IsRUFDbEIsY0FBc0IsRUFDdEIsZ0JBQXlCO1FBRXpCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDL0IsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxjQUFjLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUzRixPQUFPO1lBQ0wsR0FBRyxRQUFRO1lBQ1gsVUFBVSxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FDdkIsUUFBUSxLQUFLLFVBQVUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUMxRixtQkFBbUIsRUFBRSxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsbUJBQW1CO1lBQ3JHLGFBQWEsRUFBRSxDQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLEVBQUU7Z0JBQy9FLElBQUksUUFBUSxLQUFLLFVBQVUsRUFBRTtvQkFDM0IsT0FBTyxVQUFVLENBQUM7aUJBQ25CO2dCQUVELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUM5QyxJQUFJLFFBQVEsRUFBRTtvQkFDWixPQUFPLFFBQVEsQ0FBQztpQkFDakI7Z0JBRUQsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO2dCQUNyRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ3JDLE9BQU8sTUFBTSxDQUFDO1lBQ2hCLENBQUM7WUFDRCxRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2hHLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLFNBQVM7U0FDaEMsQ0FBQztJQUNKLENBQUM7SUFFTSxlQUFlLENBQUMsUUFBZ0IsRUFBRSxRQUFnQixFQUFFLGdCQUF5QjtRQUNsRixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM3QiwrREFBK0Q7WUFDL0QsUUFBUSxJQUFJLEtBQUssQ0FBQztTQUNuQjtRQUVELE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7WUFDL0IsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDO1lBQ3JCLE9BQU8sRUFBRSxpQ0FBeUI7WUFDbEMsSUFBSSxFQUFFLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixDQUFDO1NBQzVFLENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakQsSUFBSSxRQUFRLElBQUksSUFBSSxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDeEU7UUFFRCxPQUFPLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7Q0FDRjtBQTNERCxnREEyREM7QUFPWSxRQUFBLHlCQUF5QixHQUF1QjtJQUMzRCxZQUFZLEVBQUUsSUFBSTtJQUNsQixPQUFPLEVBQUUsTUFBTTtJQUNmLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLHNCQUFzQixFQUFFLElBQUk7SUFDNUIsZUFBZSxFQUFFLElBQUk7SUFDckIsYUFBYSxFQUFFLElBQUk7SUFDbkIsR0FBRyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsd0JBQXdCLEVBQUUsd0JBQXdCLENBQUM7SUFDNUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUTtJQUM5QixhQUFhLEVBQUUsSUFBSTtJQUNuQiwwQkFBMEIsRUFBRSxJQUFJO0lBQ2hDLGFBQWEsRUFBRSxJQUFJO0lBQ25CLGlCQUFpQixFQUFFLElBQUk7SUFDdkIsY0FBYyxFQUFFLElBQUk7SUFDcEIsY0FBYyxFQUFFLEtBQUs7SUFDckIsa0JBQWtCLEVBQUUsS0FBSztJQUN6QixpQkFBaUIsRUFBRSxJQUFJO0lBQ3ZCLE1BQU0sRUFBRSxJQUFJO0lBQ1osZ0JBQWdCLEVBQUUsSUFBSTtJQUN0Qiw0QkFBNEIsRUFBRSxJQUFJO0lBQ2xDLGFBQWEsRUFBRSxJQUFJO0lBQ25CLE1BQU0sRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU07SUFDOUIscUJBQXFCO0lBQ3JCLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLGVBQWUsRUFBRSxjQUFjO0NBQ2hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0cyBmcm9tICd0eXBlc2NyaXB0JztcblxuZXhwb3J0IGNsYXNzIFR5cGVTY3JpcHRDb21waWxlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgcmVhbEhvc3QgPSB0cy5jcmVhdGVDb21waWxlckhvc3QoU1RBTkRBUkRfQ09NUElMRVJfT1BUSU9OUywgdHJ1ZSk7XG5cbiAgLyoqXG4gICAqIEEgY29tcGlsZXItc2NvcGVkIGNhY2hlIHRvIGF2b2lkIGhhdmluZyB0byByZS1wYXJzZSB0aGUgc2FtZSBsaWJyYXJ5IGZpbGVzIGZvciBldmVyeSBjb21waWxhdGlvblxuICAgKi9cbiAgcHJpdmF0ZSByZWFkb25seSBmaWxlQ2FjaGUgPSBuZXcgTWFwPHN0cmluZywgdHMuU291cmNlRmlsZSB8IHVuZGVmaW5lZD4oKTtcblxuICBwdWJsaWMgY3JlYXRlSW5NZW1vcnlDb21waWxlckhvc3QoXG4gICAgc291cmNlUGF0aDogc3RyaW5nLFxuICAgIHNvdXJjZUNvbnRlbnRzOiBzdHJpbmcsXG4gICAgY3VycmVudERpcmVjdG9yeT86IHN0cmluZyxcbiAgKTogdHMuQ29tcGlsZXJIb3N0IHtcbiAgICBjb25zdCByZWFsSG9zdCA9IHRoaXMucmVhbEhvc3Q7XG4gICAgY29uc3Qgc291cmNlRmlsZSA9IHRzLmNyZWF0ZVNvdXJjZUZpbGUoc291cmNlUGF0aCwgc291cmNlQ29udGVudHMsIHRzLlNjcmlwdFRhcmdldC5MYXRlc3QpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlYWxIb3N0LFxuICAgICAgZmlsZUV4aXN0czogKGZpbGVQYXRoKSA9PlxuICAgICAgICBmaWxlUGF0aCA9PT0gc291cmNlUGF0aCB8fCB0aGlzLmZpbGVDYWNoZS5oYXMoZmlsZVBhdGgpIHx8IHJlYWxIb3N0LmZpbGVFeGlzdHMoZmlsZVBhdGgpLFxuICAgICAgZ2V0Q3VycmVudERpcmVjdG9yeTogY3VycmVudERpcmVjdG9yeSAhPSBudWxsID8gKCkgPT4gY3VycmVudERpcmVjdG9yeSA6IHJlYWxIb3N0LmdldEN1cnJlbnREaXJlY3RvcnksXG4gICAgICBnZXRTb3VyY2VGaWxlOiAoZmlsZU5hbWUsIGxhbmd1YWdlVmVyc2lvbiwgb25FcnJvciwgc2hvdWxkQ3JlYXRlTmV3U291cmNlRmlsZSkgPT4ge1xuICAgICAgICBpZiAoZmlsZU5hbWUgPT09IHNvdXJjZVBhdGgpIHtcbiAgICAgICAgICByZXR1cm4gc291cmNlRmlsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy5maWxlQ2FjaGUuZ2V0KGZpbGVOYW1lKTtcbiAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyc2VkID0gcmVhbEhvc3QuZ2V0U291cmNlRmlsZShmaWxlTmFtZSwgbGFuZ3VhZ2VWZXJzaW9uLCBvbkVycm9yLCBzaG91bGRDcmVhdGVOZXdTb3VyY2VGaWxlKTtcbiAgICAgICAgdGhpcy5maWxlQ2FjaGUuc2V0KGZpbGVOYW1lLCBwYXJzZWQpO1xuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgICAgfSxcbiAgICAgIHJlYWRGaWxlOiAoZmlsZVBhdGgpID0+IChmaWxlUGF0aCA9PT0gc291cmNlUGF0aCA/IHNvdXJjZUNvbnRlbnRzIDogcmVhbEhvc3QucmVhZEZpbGUoZmlsZVBhdGgpKSxcbiAgICAgIHdyaXRlRmlsZTogKCkgPT4gdm9pZCB1bmRlZmluZWQsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBjb21waWxlSW5NZW1vcnkoZmlsZW5hbWU6IHN0cmluZywgY29udGVudHM6IHN0cmluZywgY3VycmVudERpcmVjdG9yeT86IHN0cmluZyk6IENvbXBpbGF0aW9uUmVzdWx0IHtcbiAgICBpZiAoIWZpbGVuYW1lLmVuZHNXaXRoKCcudHMnKSkge1xuICAgICAgLy8gTmVjZXNzYXJ5IG9yIHRoZSBUeXBlU2NyaXB0IGNvbXBpbGVyIHdvbid0IGNvbXBpbGUgdGhlIGZpbGUuXG4gICAgICBmaWxlbmFtZSArPSAnLnRzJztcbiAgICB9XG5cbiAgICBjb25zdCBwcm9ncmFtID0gdHMuY3JlYXRlUHJvZ3JhbSh7XG4gICAgICByb290TmFtZXM6IFtmaWxlbmFtZV0sXG4gICAgICBvcHRpb25zOiBTVEFOREFSRF9DT01QSUxFUl9PUFRJT05TLFxuICAgICAgaG9zdDogdGhpcy5jcmVhdGVJbk1lbW9yeUNvbXBpbGVySG9zdChmaWxlbmFtZSwgY29udGVudHMsIGN1cnJlbnREaXJlY3RvcnkpLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgcm9vdEZpbGUgPSBwcm9ncmFtLmdldFNvdXJjZUZpbGUoZmlsZW5hbWUpO1xuICAgIGlmIChyb290RmlsZSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE9vcHNpZSAtLSBjb3VsZG4ndCBmaW5kIHJvb3QgZmlsZSBiYWNrOiAke2ZpbGVuYW1lfWApO1xuICAgIH1cblxuICAgIHJldHVybiB7IHByb2dyYW0sIHJvb3RGaWxlIH07XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21waWxhdGlvblJlc3VsdCB7XG4gIHByb2dyYW06IHRzLlByb2dyYW07XG4gIHJvb3RGaWxlOiB0cy5Tb3VyY2VGaWxlO1xufVxuXG5leHBvcnQgY29uc3QgU1RBTkRBUkRfQ09NUElMRVJfT1BUSU9OUzogdHMuQ29tcGlsZXJPcHRpb25zID0ge1xuICBhbHdheXNTdHJpY3Q6IHRydWUsXG4gIGNoYXJzZXQ6ICd1dGY4JyxcbiAgZGVjbGFyYXRpb246IHRydWUsXG4gIGV4cGVyaW1lbnRhbERlY29yYXRvcnM6IHRydWUsXG4gIGlubGluZVNvdXJjZU1hcDogdHJ1ZSxcbiAgaW5saW5lU291cmNlczogdHJ1ZSxcbiAgbGliOiBbJ2xpYi5lczIwMTYuZC50cycsICdsaWIuZXMyMDE3Lm9iamVjdC5kLnRzJywgJ2xpYi5lczIwMTcuc3RyaW5nLmQudHMnXSxcbiAgbW9kdWxlOiB0cy5Nb2R1bGVLaW5kLkNvbW1vbkpTLFxuICBub0VtaXRPbkVycm9yOiB0cnVlLFxuICBub0ZhbGx0aHJvdWdoQ2FzZXNJblN3aXRjaDogdHJ1ZSxcbiAgbm9JbXBsaWNpdEFueTogdHJ1ZSxcbiAgbm9JbXBsaWNpdFJldHVybnM6IHRydWUsXG4gIG5vSW1wbGljaXRUaGlzOiB0cnVlLFxuICBub1VudXNlZExvY2FsczogZmFsc2UsIC8vIEltcG9ydGFudCwgYmVjb21lcyBzdXBlciBhbm5veWluZyB3aXRob3V0IHRoaXNcbiAgbm9VbnVzZWRQYXJhbWV0ZXJzOiBmYWxzZSwgLy8gSW1wb3J0YW50LCBiZWNvbWVzIHN1cGVyIGFubm95aW5nIHdpdGhvdXQgdGhpc1xuICByZXNvbHZlSnNvbk1vZHVsZTogdHJ1ZSxcbiAgc3RyaWN0OiB0cnVlLFxuICBzdHJpY3ROdWxsQ2hlY2tzOiB0cnVlLFxuICBzdHJpY3RQcm9wZXJ0eUluaXRpYWxpemF0aW9uOiB0cnVlLFxuICBzdHJpcEludGVybmFsOiB0cnVlLFxuICB0YXJnZXQ6IHRzLlNjcmlwdFRhcmdldC5FUzIwMTksXG4gIC8vIEluY3JlbWVudGFsIGJ1aWxkc1xuICBpbmNyZW1lbnRhbDogdHJ1ZSxcbiAgdHNCdWlsZEluZm9GaWxlOiAnLnRzYnVpbGRpbmZvJyxcbn07XG4iXX0=