import * as ts from 'typescript';
import { JsiiSymbol } from '../jsii/jsii-utils';
import { AstRenderer } from '../renderer';
/**
 * Our own unification of import statements
 */
export interface ImportStatement {
    readonly node: ts.Node;
    readonly packageName: string;
    readonly imports: FullImport | SelectiveImport;
    readonly moduleSymbol?: JsiiSymbol;
}
export declare type FullImport = {
    readonly import: 'full';
    readonly alias: string;
};
export declare type SelectiveImport = {
    readonly import: 'selective';
    readonly elements: ImportBinding[];
};
export interface ImportBinding {
    readonly sourceName: string;
    readonly alias?: string;
    /**
     * The JSII Symbol the import refers to
     */
    readonly importedSymbol?: JsiiSymbol;
}
export declare function analyzeImportEquals(node: ts.ImportEqualsDeclaration, context: AstRenderer<any>): ImportStatement;
export declare function analyzeImportDeclaration(node: ts.ImportDeclaration, context: AstRenderer<any>): ImportStatement;
