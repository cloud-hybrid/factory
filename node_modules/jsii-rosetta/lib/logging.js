"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.debug = exports.info = exports.error = exports.warn = exports.configure = exports.level = exports.LEVEL_VERBOSE = exports.LEVEL_INFO = exports.Level = void 0;
const util = require("util");
var Level;
(function (Level) {
    Level[Level["ERROR"] = -2] = "ERROR";
    Level[Level["WARN"] = -1] = "WARN";
    Level[Level["QUIET"] = 0] = "QUIET";
    Level[Level["INFO"] = 1] = "INFO";
    Level[Level["VERBOSE"] = 2] = "VERBOSE";
})(Level = exports.Level || (exports.Level = {}));
exports.LEVEL_INFO = Level.INFO;
exports.LEVEL_VERBOSE = Level.VERBOSE;
/** The minimal logging level for messages to be emitted. */
exports.level = Level.QUIET;
function configure({ level: newLevel }) {
    exports.level = newLevel;
}
exports.configure = configure;
function warn(fmt, ...args) {
    log(Level.WARN, fmt, ...args);
}
exports.warn = warn;
function error(fmt, ...args) {
    log(Level.ERROR, fmt, ...args);
}
exports.error = error;
function info(fmt, ...args) {
    log(Level.INFO, fmt, ...args);
}
exports.info = info;
function debug(fmt, ...args) {
    log(Level.VERBOSE, fmt, ...args);
}
exports.debug = debug;
function log(messageLevel, fmt, ...args) {
    if (exports.level >= messageLevel) {
        const levelName = Level[messageLevel];
        // `console.error` will automatically be transported from worker child to worker parent,
        // process.stderr.write() won't.
        console.error(`[jsii-rosetta] [${levelName}] ${util.format(fmt, ...args)}`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvZ2dpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQTZCO0FBRTdCLElBQVksS0FNWDtBQU5ELFdBQVksS0FBSztJQUNmLG9DQUFVLENBQUE7SUFDVixrQ0FBUyxDQUFBO0lBQ1QsbUNBQVMsQ0FBQTtJQUNULGlDQUFRLENBQUE7SUFDUix1Q0FBVyxDQUFBO0FBQ2IsQ0FBQyxFQU5XLEtBQUssR0FBTCxhQUFLLEtBQUwsYUFBSyxRQU1oQjtBQUVZLFFBQUEsVUFBVSxHQUFXLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDaEMsUUFBQSxhQUFhLEdBQVcsS0FBSyxDQUFDLE9BQU8sQ0FBQztBQUVuRCw0REFBNEQ7QUFDakQsUUFBQSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztBQUUvQixTQUFnQixTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFvQjtJQUM3RCxhQUFLLEdBQUcsUUFBUSxDQUFDO0FBQ25CLENBQUM7QUFGRCw4QkFFQztBQUVELFNBQWdCLElBQUksQ0FBQyxHQUFXLEVBQUUsR0FBRyxJQUFXO0lBQzlDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFGRCxvQkFFQztBQUVELFNBQWdCLEtBQUssQ0FBQyxHQUFXLEVBQUUsR0FBRyxJQUFXO0lBQy9DLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFGRCxzQkFFQztBQUVELFNBQWdCLElBQUksQ0FBQyxHQUFXLEVBQUUsR0FBRyxJQUFXO0lBQzlDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFGRCxvQkFFQztBQUVELFNBQWdCLEtBQUssQ0FBQyxHQUFXLEVBQUUsR0FBRyxJQUFXO0lBQy9DLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFGRCxzQkFFQztBQUVELFNBQVMsR0FBRyxDQUFDLFlBQW1CLEVBQUUsR0FBVyxFQUFFLEdBQUcsSUFBVztJQUMzRCxJQUFJLGFBQUssSUFBSSxZQUFZLEVBQUU7UUFDekIsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3RDLHdGQUF3RjtRQUN4RixnQ0FBZ0M7UUFDaEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsU0FBUyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzdFO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHV0aWwgZnJvbSAndXRpbCc7XG5cbmV4cG9ydCBlbnVtIExldmVsIHtcbiAgRVJST1IgPSAtMixcbiAgV0FSTiA9IC0xLFxuICBRVUlFVCA9IDAsXG4gIElORk8gPSAxLFxuICBWRVJCT1NFID0gMixcbn1cblxuZXhwb3J0IGNvbnN0IExFVkVMX0lORk86IG51bWJlciA9IExldmVsLklORk87XG5leHBvcnQgY29uc3QgTEVWRUxfVkVSQk9TRTogbnVtYmVyID0gTGV2ZWwuVkVSQk9TRTtcblxuLyoqIFRoZSBtaW5pbWFsIGxvZ2dpbmcgbGV2ZWwgZm9yIG1lc3NhZ2VzIHRvIGJlIGVtaXR0ZWQuICovXG5leHBvcnQgbGV0IGxldmVsID0gTGV2ZWwuUVVJRVQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmUoeyBsZXZlbDogbmV3TGV2ZWwgfTogeyBsZXZlbDogTGV2ZWwgfSkge1xuICBsZXZlbCA9IG5ld0xldmVsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2FybihmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgbG9nKExldmVsLldBUk4sIGZtdCwgLi4uYXJncyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcnJvcihmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgbG9nKExldmVsLkVSUk9SLCBmbXQsIC4uLmFyZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5mbyhmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgbG9nKExldmVsLklORk8sIGZtdCwgLi4uYXJncyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJ1ZyhmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgbG9nKExldmVsLlZFUkJPU0UsIGZtdCwgLi4uYXJncyk7XG59XG5cbmZ1bmN0aW9uIGxvZyhtZXNzYWdlTGV2ZWw6IExldmVsLCBmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgaWYgKGxldmVsID49IG1lc3NhZ2VMZXZlbCkge1xuICAgIGNvbnN0IGxldmVsTmFtZSA9IExldmVsW21lc3NhZ2VMZXZlbF07XG4gICAgLy8gYGNvbnNvbGUuZXJyb3JgIHdpbGwgYXV0b21hdGljYWxseSBiZSB0cmFuc3BvcnRlZCBmcm9tIHdvcmtlciBjaGlsZCB0byB3b3JrZXIgcGFyZW50LFxuICAgIC8vIHByb2Nlc3Muc3RkZXJyLndyaXRlKCkgd29uJ3QuXG4gICAgY29uc29sZS5lcnJvcihgW2pzaWktcm9zZXR0YV0gWyR7bGV2ZWxOYW1lfV0gJHt1dGlsLmZvcm1hdChmbXQsIC4uLmFyZ3MpfWApO1xuICB9XG59XG4iXX0=