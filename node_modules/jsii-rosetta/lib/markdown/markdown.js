"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cmNodeChildren = exports.prefixLines = exports.visitCommonMarkTree = exports.renderCommonMarkTree = exports.transformMarkdown = void 0;
const cm = require("commonmark");
function transformMarkdown(source, renderer, transform) {
    const parser = new cm.Parser();
    const doc = parser.parse(source);
    if (transform) {
        visitCommonMarkTree(doc, transform);
    }
    return renderCommonMarkTree(doc, renderer);
}
exports.transformMarkdown = transformMarkdown;
function renderCommonMarkTree(node, renderer) {
    const context = {
        recurse(n) {
            return renderCommonMarkTree(n, renderer);
        },
        content() {
            return this.children().join('');
        },
        children() {
            const parts = [];
            for (const child of cmNodeChildren(node)) {
                parts.push(renderCommonMarkTree(child, renderer));
            }
            return parts;
        },
    };
    return renderer[node.type](node, context);
}
exports.renderCommonMarkTree = renderCommonMarkTree;
function visitCommonMarkTree(node, visitor) {
    visitor[node.type](node);
    for (const child of cmNodeChildren(node)) {
        visitCommonMarkTree(child, visitor);
    }
}
exports.visitCommonMarkTree = visitCommonMarkTree;
function prefixLines(prefix, x) {
    return x
        .split('\n')
        .map((l) => prefix + l)
        .join('\n');
}
exports.prefixLines = prefixLines;
function* cmNodeChildren(node) {
    for (let child = node.firstChild; child !== null; child = child.next) {
        yield child;
    }
}
exports.cmNodeChildren = cmNodeChildren;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtYXJrZG93bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBaUM7QUFFakMsU0FBZ0IsaUJBQWlCLENBQUMsTUFBYyxFQUFFLFFBQTRCLEVBQUUsU0FBNkI7SUFDM0csTUFBTSxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDL0IsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxJQUFJLFNBQVMsRUFBRTtRQUNiLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztLQUNyQztJQUNELE9BQU8sb0JBQW9CLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFQRCw4Q0FPQztBQStCRCxTQUFnQixvQkFBb0IsQ0FBQyxJQUFhLEVBQUUsUUFBNEI7SUFDOUUsTUFBTSxPQUFPLEdBQW9CO1FBQy9CLE9BQU8sQ0FBQyxDQUFVO1lBQ2hCLE9BQU8sb0JBQW9CLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFFRCxPQUFPO1lBQ0wsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFFRCxRQUFRO1lBQ04sTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ2pCLEtBQUssTUFBTSxLQUFLLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN4QyxLQUFLLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO2FBQ25EO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO0tBQ0YsQ0FBQztJQUVGLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQXBCRCxvREFvQkM7QUFFRCxTQUFnQixtQkFBbUIsQ0FBQyxJQUFhLEVBQUUsT0FBMEI7SUFDM0UsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixLQUFLLE1BQU0sS0FBSyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN4QyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDckM7QUFDSCxDQUFDO0FBTEQsa0RBS0M7QUFFRCxTQUFnQixXQUFXLENBQUMsTUFBYyxFQUFFLENBQVM7SUFDbkQsT0FBTyxDQUFDO1NBQ0wsS0FBSyxDQUFDLElBQUksQ0FBQztTQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEIsQ0FBQztBQUxELGtDQUtDO0FBRUQsUUFBZSxDQUFDLENBQUMsY0FBYyxDQUFDLElBQWE7SUFDM0MsS0FBSyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssS0FBSyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUU7UUFDcEUsTUFBTSxLQUFLLENBQUM7S0FDYjtBQUNILENBQUM7QUFKRCx3Q0FJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNtIGZyb20gJ2NvbW1vbm1hcmsnO1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWFya2Rvd24oc291cmNlOiBzdHJpbmcsIHJlbmRlcmVyOiBDb21tb25NYXJrUmVuZGVyZXIsIHRyYW5zZm9ybT86IENvbW1vbk1hcmtWaXNpdG9yKSB7XG4gIGNvbnN0IHBhcnNlciA9IG5ldyBjbS5QYXJzZXIoKTtcbiAgY29uc3QgZG9jID0gcGFyc2VyLnBhcnNlKHNvdXJjZSk7XG4gIGlmICh0cmFuc2Zvcm0pIHtcbiAgICB2aXNpdENvbW1vbk1hcmtUcmVlKGRvYywgdHJhbnNmb3JtKTtcbiAgfVxuICByZXR1cm4gcmVuZGVyQ29tbW9uTWFya1RyZWUoZG9jLCByZW5kZXJlcik7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyZXJDb250ZXh0IHtcbiAgcmVjdXJzZShub2RlOiBjbS5Ob2RlKTogc3RyaW5nO1xuICBjaGlsZHJlbigpOiBzdHJpbmdbXTtcbiAgY29udGVudCgpOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbW9uTWFya1JlbmRlcmVyIHtcbiAgYmxvY2tfcXVvdGUobm9kZTogY20uTm9kZSwgY29udGV4dDogUmVuZGVyZXJDb250ZXh0KTogc3RyaW5nO1xuICBjb2RlKG5vZGU6IGNtLk5vZGUsIGNvbnRleHQ6IFJlbmRlcmVyQ29udGV4dCk6IHN0cmluZztcbiAgY29kZV9ibG9jayhub2RlOiBjbS5Ob2RlLCBjb250ZXh0OiBSZW5kZXJlckNvbnRleHQpOiBzdHJpbmc7XG4gIHRleHQobm9kZTogY20uTm9kZSwgY29udGV4dDogUmVuZGVyZXJDb250ZXh0KTogc3RyaW5nO1xuICBzb2Z0YnJlYWsobm9kZTogY20uTm9kZSwgY29udGV4dDogUmVuZGVyZXJDb250ZXh0KTogc3RyaW5nO1xuICBsaW5lYnJlYWsobm9kZTogY20uTm9kZSwgY29udGV4dDogUmVuZGVyZXJDb250ZXh0KTogc3RyaW5nO1xuICBlbXBoKG5vZGU6IGNtLk5vZGUsIGNvbnRleHQ6IFJlbmRlcmVyQ29udGV4dCk6IHN0cmluZztcbiAgc3Ryb25nKG5vZGU6IGNtLk5vZGUsIGNvbnRleHQ6IFJlbmRlcmVyQ29udGV4dCk6IHN0cmluZztcbiAgaHRtbF9pbmxpbmUobm9kZTogY20uTm9kZSwgY29udGV4dDogUmVuZGVyZXJDb250ZXh0KTogc3RyaW5nO1xuICBodG1sX2Jsb2NrKG5vZGU6IGNtLk5vZGUsIGNvbnRleHQ6IFJlbmRlcmVyQ29udGV4dCk6IHN0cmluZztcbiAgbGluayhub2RlOiBjbS5Ob2RlLCBjb250ZXh0OiBSZW5kZXJlckNvbnRleHQpOiBzdHJpbmc7XG4gIGltYWdlKG5vZGU6IGNtLk5vZGUsIGNvbnRleHQ6IFJlbmRlcmVyQ29udGV4dCk6IHN0cmluZztcbiAgZG9jdW1lbnQobm9kZTogY20uTm9kZSwgY29udGV4dDogUmVuZGVyZXJDb250ZXh0KTogc3RyaW5nO1xuICBwYXJhZ3JhcGgobm9kZTogY20uTm9kZSwgY29udGV4dDogUmVuZGVyZXJDb250ZXh0KTogc3RyaW5nO1xuICBsaXN0KG5vZGU6IGNtLk5vZGUsIGNvbnRleHQ6IFJlbmRlcmVyQ29udGV4dCk6IHN0cmluZztcbiAgaXRlbShub2RlOiBjbS5Ob2RlLCBjb250ZXh0OiBSZW5kZXJlckNvbnRleHQpOiBzdHJpbmc7XG4gIGhlYWRpbmcobm9kZTogY20uTm9kZSwgY29udGV4dDogUmVuZGVyZXJDb250ZXh0KTogc3RyaW5nO1xuICB0aGVtYXRpY19icmVhayhub2RlOiBjbS5Ob2RlLCBjb250ZXh0OiBSZW5kZXJlckNvbnRleHQpOiBzdHJpbmc7XG4gIGN1c3RvbV9ibG9jayhub2RlOiBjbS5Ob2RlLCBjb250ZXh0OiBSZW5kZXJlckNvbnRleHQpOiBzdHJpbmc7XG4gIGN1c3RvbV9pbmxpbmUobm9kZTogY20uTm9kZSwgY29udGV4dDogUmVuZGVyZXJDb250ZXh0KTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyQ29tbW9uTWFya1RyZWUobm9kZTogY20uTm9kZSwgcmVuZGVyZXI6IENvbW1vbk1hcmtSZW5kZXJlcikge1xuICBjb25zdCBjb250ZXh0OiBSZW5kZXJlckNvbnRleHQgPSB7XG4gICAgcmVjdXJzZShuOiBjbS5Ob2RlKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiByZW5kZXJDb21tb25NYXJrVHJlZShuLCByZW5kZXJlcik7XG4gICAgfSxcblxuICAgIGNvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbigpLmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICBjaGlsZHJlbigpIHtcbiAgICAgIGNvbnN0IHBhcnRzID0gW107XG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNtTm9kZUNoaWxkcmVuKG5vZGUpKSB7XG4gICAgICAgIHBhcnRzLnB1c2gocmVuZGVyQ29tbW9uTWFya1RyZWUoY2hpbGQsIHJlbmRlcmVyKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFydHM7XG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gcmVuZGVyZXJbbm9kZS50eXBlXShub2RlLCBjb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZpc2l0Q29tbW9uTWFya1RyZWUobm9kZTogY20uTm9kZSwgdmlzaXRvcjogQ29tbW9uTWFya1Zpc2l0b3IpIHtcbiAgdmlzaXRvcltub2RlLnR5cGVdKG5vZGUpO1xuICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNtTm9kZUNoaWxkcmVuKG5vZGUpKSB7XG4gICAgdmlzaXRDb21tb25NYXJrVHJlZShjaGlsZCwgdmlzaXRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZWZpeExpbmVzKHByZWZpeDogc3RyaW5nLCB4OiBzdHJpbmcpIHtcbiAgcmV0dXJuIHhcbiAgICAuc3BsaXQoJ1xcbicpXG4gICAgLm1hcCgobCkgPT4gcHJlZml4ICsgbClcbiAgICAuam9pbignXFxuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiogY21Ob2RlQ2hpbGRyZW4obm9kZTogY20uTm9kZSk6IEl0ZXJhYmxlSXRlcmF0b3I8Y20uTm9kZT4ge1xuICBmb3IgKGxldCBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDsgY2hpbGQgIT09IG51bGw7IGNoaWxkID0gY2hpbGQubmV4dCkge1xuICAgIHlpZWxkIGNoaWxkO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbW9uTWFya1Zpc2l0b3Ige1xuICBibG9ja19xdW90ZShub2RlOiBjbS5Ob2RlKTogdm9pZDtcbiAgY29kZShub2RlOiBjbS5Ob2RlKTogdm9pZDtcbiAgY29kZV9ibG9jayhub2RlOiBjbS5Ob2RlKTogdm9pZDtcbiAgdGV4dChub2RlOiBjbS5Ob2RlKTogdm9pZDtcbiAgc29mdGJyZWFrKG5vZGU6IGNtLk5vZGUpOiB2b2lkO1xuICBsaW5lYnJlYWsobm9kZTogY20uTm9kZSk6IHZvaWQ7XG4gIGVtcGgobm9kZTogY20uTm9kZSk6IHZvaWQ7XG4gIHN0cm9uZyhub2RlOiBjbS5Ob2RlKTogdm9pZDtcbiAgaHRtbF9pbmxpbmUobm9kZTogY20uTm9kZSk6IHZvaWQ7XG4gIGh0bWxfYmxvY2sobm9kZTogY20uTm9kZSk6IHZvaWQ7XG4gIGxpbmsobm9kZTogY20uTm9kZSk6IHZvaWQ7XG4gIGltYWdlKG5vZGU6IGNtLk5vZGUpOiB2b2lkO1xuICBkb2N1bWVudChub2RlOiBjbS5Ob2RlKTogdm9pZDtcbiAgcGFyYWdyYXBoKG5vZGU6IGNtLk5vZGUpOiB2b2lkO1xuICBsaXN0KG5vZGU6IGNtLk5vZGUpOiB2b2lkO1xuICBpdGVtKG5vZGU6IGNtLk5vZGUpOiB2b2lkO1xuICBoZWFkaW5nKG5vZGU6IGNtLk5vZGUpOiB2b2lkO1xuICB0aGVtYXRpY19icmVhayhub2RlOiBjbS5Ob2RlKTogdm9pZDtcbiAgY3VzdG9tX2Jsb2NrKG5vZGU6IGNtLk5vZGUpOiB2b2lkO1xuICBjdXN0b21faW5saW5lKG5vZGU6IGNtLk5vZGUpOiB2b2lkO1xufVxuIl19