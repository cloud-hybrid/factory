"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.markDownToXmlDoc = exports.markDownToJavaDoc = exports.markDownToStructure = void 0;
const javadoc_renderer_1 = require("./javadoc-renderer");
const markdown_1 = require("./markdown");
const structure_renderer_1 = require("./structure-renderer");
const xml_comment_renderer_1 = require("./xml-comment-renderer");
/**
 * All the visitors in this module expose CommonMark types in their API
 *
 * We want to keep CommonMark as a private dependency (so we don't have to
 * mark it as peerDependency and can keep its @types in devDependencies),
 * so we re-expose the main functionality needed by pacmak as functions
 * that operate on basic types here.
 */
function markDownToStructure(source) {
    return markdown_1.transformMarkdown(source, new structure_renderer_1.StructureRenderer());
}
exports.markDownToStructure = markDownToStructure;
function markDownToJavaDoc(source) {
    return markdown_1.transformMarkdown(source, new javadoc_renderer_1.JavaDocRenderer());
}
exports.markDownToJavaDoc = markDownToJavaDoc;
function markDownToXmlDoc(source) {
    return markdown_1.transformMarkdown(source, new xml_comment_renderer_1.CSharpXmlCommentRenderer());
}
exports.markDownToXmlDoc = markDownToXmlDoc;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx5REFBcUQ7QUFDckQseUNBQStDO0FBQy9DLDZEQUF5RDtBQUN6RCxpRUFBa0U7QUFFbEU7Ozs7Ozs7R0FPRztBQUVILFNBQWdCLG1CQUFtQixDQUFDLE1BQWM7SUFDaEQsT0FBTyw0QkFBaUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxzQ0FBaUIsRUFBRSxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUZELGtEQUVDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsTUFBYztJQUM5QyxPQUFPLDRCQUFpQixDQUFDLE1BQU0sRUFBRSxJQUFJLGtDQUFlLEVBQUUsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFGRCw4Q0FFQztBQUVELFNBQWdCLGdCQUFnQixDQUFDLE1BQWM7SUFDN0MsT0FBTyw0QkFBaUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSwrQ0FBd0IsRUFBRSxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUZELDRDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSmF2YURvY1JlbmRlcmVyIH0gZnJvbSAnLi9qYXZhZG9jLXJlbmRlcmVyJztcbmltcG9ydCB7IHRyYW5zZm9ybU1hcmtkb3duIH0gZnJvbSAnLi9tYXJrZG93bic7XG5pbXBvcnQgeyBTdHJ1Y3R1cmVSZW5kZXJlciB9IGZyb20gJy4vc3RydWN0dXJlLXJlbmRlcmVyJztcbmltcG9ydCB7IENTaGFycFhtbENvbW1lbnRSZW5kZXJlciB9IGZyb20gJy4veG1sLWNvbW1lbnQtcmVuZGVyZXInO1xuXG4vKipcbiAqIEFsbCB0aGUgdmlzaXRvcnMgaW4gdGhpcyBtb2R1bGUgZXhwb3NlIENvbW1vbk1hcmsgdHlwZXMgaW4gdGhlaXIgQVBJXG4gKlxuICogV2Ugd2FudCB0byBrZWVwIENvbW1vbk1hcmsgYXMgYSBwcml2YXRlIGRlcGVuZGVuY3kgKHNvIHdlIGRvbid0IGhhdmUgdG9cbiAqIG1hcmsgaXQgYXMgcGVlckRlcGVuZGVuY3kgYW5kIGNhbiBrZWVwIGl0cyBAdHlwZXMgaW4gZGV2RGVwZW5kZW5jaWVzKSxcbiAqIHNvIHdlIHJlLWV4cG9zZSB0aGUgbWFpbiBmdW5jdGlvbmFsaXR5IG5lZWRlZCBieSBwYWNtYWsgYXMgZnVuY3Rpb25zXG4gKiB0aGF0IG9wZXJhdGUgb24gYmFzaWMgdHlwZXMgaGVyZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWFya0Rvd25Ub1N0cnVjdHVyZShzb3VyY2U6IHN0cmluZykge1xuICByZXR1cm4gdHJhbnNmb3JtTWFya2Rvd24oc291cmNlLCBuZXcgU3RydWN0dXJlUmVuZGVyZXIoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXJrRG93blRvSmF2YURvYyhzb3VyY2U6IHN0cmluZykge1xuICByZXR1cm4gdHJhbnNmb3JtTWFya2Rvd24oc291cmNlLCBuZXcgSmF2YURvY1JlbmRlcmVyKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFya0Rvd25Ub1htbERvYyhzb3VyY2U6IHN0cmluZykge1xuICByZXR1cm4gdHJhbnNmb3JtTWFya2Rvd24oc291cmNlLCBuZXcgQ1NoYXJwWG1sQ29tbWVudFJlbmRlcmVyKCkpO1xufVxuIl19