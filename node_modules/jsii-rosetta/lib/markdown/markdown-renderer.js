"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stripTrailingWhitespace = exports.stripPara = exports.collapsePara = exports.para = exports.MarkdownRenderer = void 0;
const markdown_1 = require("./markdown");
/**
 * A renderer that will render a CommonMark tree back to MarkDown
 */
class MarkdownRenderer {
    block_quote(_node, context) {
        return para(markdown_1.prefixLines('> ', collapsePara(context.content())));
    }
    code(node, _context) {
        return `\`${node.literal}\``;
    }
    code_block(node, _context) {
        var _a;
        return para(`\`\`\`${(_a = node.info) !== null && _a !== void 0 ? _a : ''}\n${node.literal}\`\`\``);
    }
    text(node, _context) {
        var _a;
        return (_a = node.literal) !== null && _a !== void 0 ? _a : '';
    }
    softbreak(_node, _context) {
        return '\n';
    }
    linebreak(_node, _context) {
        return '\\\n';
    }
    emph(_node, context) {
        return `*${context.content()}*`;
    }
    strong(_node, context) {
        return `**${context.content()}**`;
    }
    html_inline(node, _context) {
        var _a;
        return (_a = node.literal) !== null && _a !== void 0 ? _a : '';
    }
    html_block(node, _context) {
        var _a;
        return (_a = node.literal) !== null && _a !== void 0 ? _a : '';
    }
    link(node, context) {
        var _a;
        return `[${context.content()}](${(_a = node.destination) !== null && _a !== void 0 ? _a : ''})`;
    }
    image(node, context) {
        var _a;
        return `![${context.content()}](${(_a = node.destination) !== null && _a !== void 0 ? _a : ''})`;
    }
    document(_node, context) {
        return stripTrailingWhitespace(collapsePara(context.content()));
    }
    paragraph(_node, context) {
        return para(context.content());
    }
    list(node, context) {
        // A list is not wrapped in a paragraph, but items may contain paragraphs.
        // All elements of a list are definitely 'item's.
        const items = [];
        let i = 1;
        for (const item of markdown_1.cmNodeChildren(node)) {
            const firstLinePrefix = determineItemPrefix(node, i);
            const hangingPrefix = ' '.repeat(firstLinePrefix.length);
            const rendered = context.recurse(item);
            // Prefix the first line with a different text than subsequent lines
            const prefixed = firstLinePrefix + markdown_1.prefixLines(hangingPrefix, rendered).substr(hangingPrefix.length);
            items.push(prefixed);
            i += 1;
        }
        return para(items.join('\n'));
    }
    item(_node, context) {
        return collapsePara(context.content());
    }
    heading(node, context) {
        return para(`${'#'.repeat(node.level)} ${context.content()}`);
    }
    thematic_break(_node, _context) {
        return '---\n';
    }
    custom_block(_node, context) {
        return `<custom>${context.content()}</custom>`;
    }
    custom_inline(_node, context) {
        return `<custom>${context.content()}</custom>`;
    }
}
exports.MarkdownRenderer = MarkdownRenderer;
const PARA_BREAK = '\u001d';
function para(x) {
    return `${PARA_BREAK}${x}${PARA_BREAK}`;
}
exports.para = para;
/**
 * Collapse paragraph markers
 */
function collapsePara(x, brk = '\n\n') {
    /* eslint-disable no-control-regex */
    return x
        .replace(/^\u001d+/, '')
        .replace(/\u001d+$/, '')
        .replace(/\u001d+/g, brk);
    /* eslint-enable no-control-regex */
}
exports.collapsePara = collapsePara;
/**
 * Strip paragraph markers from start and end
 */
function stripPara(x) {
    /* eslint-disable-next-line no-control-regex */
    return x.replace(/^\u001d+/, '').replace(/\u001d+$/, '');
}
exports.stripPara = stripPara;
function determineItemPrefix(listNode, index) {
    if (listNode.listType === 'bullet') {
        return '* ';
    }
    return `${index}${listNode.listDelimiter} `;
}
function stripTrailingWhitespace(x) {
    return x.replace(/[ \t]+$/gm, '');
}
exports.stripTrailingWhitespace = stripTrailingWhitespace;
//# sourceMappingURL=data:application/json;base64,