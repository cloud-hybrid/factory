"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _diagnostics;
Object.defineProperty(exports, "__esModule", { value: true });
exports.rosettaDiagFromTypescript = exports.SnippetTranslator = exports.makeRosettaDiagnostic = exports.Translator = exports.translateTypeScript = void 0;
const ts = require("typescript");
const util_1 = require("util");
const languages_1 = require("./languages");
const record_references_1 = require("./languages/record-references");
const logging = require("./logging");
const o_tree_1 = require("./o-tree");
const renderer_1 = require("./renderer");
const snippet_1 = require("./snippet");
const key_1 = require("./tablets/key");
const schema_1 = require("./tablets/schema");
const tablets_1 = require("./tablets/tablets");
const syntax_kind_counter_1 = require("./typescript/syntax-kind-counter");
const ts_compiler_1 = require("./typescript/ts-compiler");
const visible_spans_1 = require("./typescript/visible-spans");
const util_2 = require("./util");
function translateTypeScript(source, visitor, options = {}) {
    const translator = new SnippetTranslator({ visibleSource: source.contents, location: { api: { api: 'file', fileName: source.fileName } } }, options);
    const translated = translator.renderUsing(visitor);
    return {
        translation: translated,
        diagnostics: translator.diagnostics.map(rosettaDiagFromTypescript),
    };
}
exports.translateTypeScript = translateTypeScript;
/**
 * Translate one or more TypeScript snippets into other languages
 *
 * Can be configured to fully typecheck the samples, or perform only syntactical
 * translation.
 */
class Translator {
    constructor(includeCompilerDiagnostics) {
        this.includeCompilerDiagnostics = includeCompilerDiagnostics;
        this.compiler = new ts_compiler_1.TypeScriptCompiler();
        // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility
        _diagnostics.set(this, []);
    }
    translate(snip, languages = Object.values(languages_1.TargetLanguage)) {
        var _a, _b;
        logging.debug(`Translating ${key_1.snippetKey(snip)} ${util_1.inspect((_a = snip.parameters) !== null && _a !== void 0 ? _a : {})}`);
        const translator = this.translatorFor(snip);
        const translations = util_2.mkDict(languages.map((lang) => {
            const languageConverterFactory = languages_1.TARGET_LANGUAGES[lang];
            const translated = translator.renderUsing(languageConverterFactory.createVisitor());
            return [lang, { source: translated, version: languageConverterFactory.version }];
        }));
        if (((_b = snip.parameters) === null || _b === void 0 ? void 0 : _b.infused) === undefined) {
            __classPrivateFieldGet(this, _diagnostics).push(...translator.diagnostics);
        }
        return tablets_1.TranslatedSnippet.fromSchema({
            translations: {
                ...translations,
                [schema_1.ORIGINAL_SNIPPET_KEY]: { source: snip.visibleSource, version: '0' },
            },
            location: snip.location,
            didCompile: translator.didSuccessfullyCompile,
            fqnsReferenced: translator.fqnsReferenced(),
            fullSource: snippet_1.completeSource(snip),
            syntaxKindCounter: translator.syntaxKindCounter(),
        });
    }
    get diagnostics() {
        return ts.sortAndDeduplicateDiagnostics(__classPrivateFieldGet(this, _diagnostics)).map(rosettaDiagFromTypescript);
    }
    /**
     * Return the snippet translator for the given snippet
     *
     * We used to cache these, but each translator holds on to quite a bit of memory,
     * so we don't do that anymore.
     */
    translatorFor(snippet) {
        const translator = new SnippetTranslator(snippet, {
            compiler: this.compiler,
            includeCompilerDiagnostics: this.includeCompilerDiagnostics,
        });
        return translator;
    }
}
exports.Translator = Translator;
_diagnostics = new WeakMap();
function makeRosettaDiagnostic(isError, formattedMessage) {
    return { isError, formattedMessage, isFromStrictAssembly: false };
}
exports.makeRosettaDiagnostic = makeRosettaDiagnostic;
/**
 * Translate a single TypeScript snippet
 */
class SnippetTranslator {
    constructor(snippet, options = {}) {
        var _a, _b, _c, _d, _e;
        this.options = options;
        this.translateDiagnostics = [];
        this.compileDiagnostics = [];
        const compiler = (_a = options.compiler) !== null && _a !== void 0 ? _a : new ts_compiler_1.TypeScriptCompiler();
        const source = snippet_1.completeSource(snippet);
        const fakeCurrentDirectory = (_c = (_b = snippet.parameters) === null || _b === void 0 ? void 0 : _b[snippet_1.SnippetParameters.$COMPILATION_DIRECTORY]) !== null && _c !== void 0 ? _c : (_d = snippet.parameters) === null || _d === void 0 ? void 0 : _d[snippet_1.SnippetParameters.$PROJECT_DIRECTORY];
        this.compilation = compiler.compileInMemory(removeSlashes(snippet_1.formatLocation(snippet.location)), source, fakeCurrentDirectory);
        // Respect '/// !hide' and '/// !show' directives
        this.visibleSpans = visible_spans_1.Spans.visibleSpansFromSource(source);
        // This makes it about 5x slower, so only do it on demand
        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
        this.tryCompile = (_e = (options.includeCompilerDiagnostics || snippet.strict)) !== null && _e !== void 0 ? _e : false;
        if (this.tryCompile) {
            const program = this.compilation.program;
            const diagnostics = [
                ...neverThrowing(program.getGlobalDiagnostics)(),
                ...neverThrowing(program.getSyntacticDiagnostics)(this.compilation.rootFile),
                ...neverThrowing(program.getDeclarationDiagnostics)(this.compilation.rootFile),
                ...neverThrowing(program.getSemanticDiagnostics)(this.compilation.rootFile),
            ];
            if (snippet.strict) {
                // In a strict assembly, so we'll need to brand all diagnostics here...
                diagnostics.forEach(util_2.annotateStrictDiagnostic);
            }
            this.compileDiagnostics.push(...diagnostics);
        }
        /**
         * Intercepts all exceptions thrown by the wrapped call, and logs them to
         * console.error instead of re-throwing, then returns an empty array. This
         * is here to avoid compiler crashes due to broken code examples that cause
         * the TypeScript compiler to hit a "Debug Failure".
         */
        function neverThrowing(call) {
            return (...args) => {
                try {
                    return call(...args);
                }
                catch (err) {
                    const isExpectedTypescriptError = err.message.includes('Debug Failure');
                    if (!isExpectedTypescriptError) {
                        console.error(`Failed to execute ${call.name}: ${err}`);
                    }
                    return [];
                }
            };
        }
    }
    /**
     * Returns a boolean if compilation was attempted, and undefined if it was not.
     */
    get didSuccessfullyCompile() {
        return this.tryCompile ? this.compileDiagnostics.length === 0 : undefined;
    }
    renderUsing(visitor) {
        const converter = new renderer_1.AstRenderer(this.compilation.rootFile, this.compilation.program.getTypeChecker(), visitor, this.options);
        const converted = converter.convert(this.compilation.rootFile);
        this.translateDiagnostics.push(...filterVisibleDiagnostics(converter.diagnostics, this.visibleSpans));
        return o_tree_1.renderTree(converted, { visibleSpans: this.visibleSpans });
    }
    syntaxKindCounter() {
        const kindCounter = new syntax_kind_counter_1.SyntaxKindCounter(this.visibleSpans);
        return kindCounter.countKinds(this.compilation.rootFile);
    }
    fqnsReferenced() {
        const visitor = new record_references_1.RecordReferencesVisitor(this.visibleSpans);
        const converter = new renderer_1.AstRenderer(this.compilation.rootFile, this.compilation.program.getTypeChecker(), visitor, this.options);
        converter.convert(this.compilation.rootFile);
        return visitor.fqnsReferenced();
    }
    get diagnostics() {
        return ts.sortAndDeduplicateDiagnostics(this.compileDiagnostics.concat(this.translateDiagnostics));
    }
}
exports.SnippetTranslator = SnippetTranslator;
/**
 * Hide diagnostics that are rosetta-sourced if they are reported against a non-visible span
 */
function filterVisibleDiagnostics(diags, visibleSpans) {
    return diags.filter((d) => d.source !== 'rosetta' || d.start === undefined || visibleSpans.containsPosition(d.start));
}
/**
 * Turn TypeScript diagnostics into Rosetta diagnostics
 */
function rosettaDiagFromTypescript(diag) {
    return {
        isError: diag.category === ts.DiagnosticCategory.Error,
        isFromStrictAssembly: util_2.hasStrictBranding(diag),
        formattedMessage: ts.formatDiagnosticsWithColorAndContext([diag], DIAG_HOST),
    };
}
exports.rosettaDiagFromTypescript = rosettaDiagFromTypescript;
const DIAG_HOST = {
    getCurrentDirectory() {
        return '.';
    },
    getCanonicalFileName(fileName) {
        return fileName;
    },
    getNewLine() {
        return '\n';
    },
};
/**
 * Remove slashes from a "where" description, as the TS compiler will interpret it as a directory
 * and we can't have that for compiling literate files
 */
function removeSlashes(x) {
    return x.replace(/\/|\\/g, '.');
}
//# sourceMappingURL=data:application/json;base64,