"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trimCache = void 0;
const assemblies_1 = require("../jsii/assemblies");
const logging = require("../logging");
const key_1 = require("../tablets/key");
const tablets_1 = require("../tablets/tablets");
const util_1 = require("../util");
async function trimCache(options) {
    logging.info(`Loading ${options.assemblyLocations.length} assemblies`);
    const assemblies = await assemblies_1.loadAssemblies(options.assemblyLocations, false);
    const snippets = Array.from(assemblies_1.allTypeScriptSnippets(assemblies));
    const original = await tablets_1.LanguageTablet.fromFile(options.cacheFile);
    const updated = new tablets_1.LanguageTablet();
    updated.addSnippets(...snippets.map((snip) => original.tryGetSnippet(key_1.snippetKey(snip))).filter(util_1.isDefined));
    await updated.save(options.cacheFile);
    // eslint-disable-next-line prettier/prettier
    logging.info(`${options.cacheFile}: ${updated.count} snippets remaining (${original.count} - ${updated.count} trimmed)`);
}
exports.trimCache = trimCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJpbS1jYWNoZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRyaW0tY2FjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbURBQTJFO0FBQzNFLHNDQUFzQztBQUN0Qyx3Q0FBNEM7QUFDNUMsZ0RBQW9EO0FBQ3BELGtDQUFvQztBQWM3QixLQUFLLFVBQVUsU0FBUyxDQUFDLE9BQXlCO0lBQ3ZELE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxPQUFPLENBQUMsaUJBQWlCLENBQUMsTUFBTSxhQUFhLENBQUMsQ0FBQztJQUN2RSxNQUFNLFVBQVUsR0FBRyxNQUFNLDJCQUFjLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTFFLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsa0NBQXFCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUUvRCxNQUFNLFFBQVEsR0FBRyxNQUFNLHdCQUFjLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNsRSxNQUFNLE9BQU8sR0FBRyxJQUFJLHdCQUFjLEVBQUUsQ0FBQztJQUNyQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxnQkFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsZ0JBQVMsQ0FBQyxDQUFDLENBQUM7SUFDM0csTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV0Qyw2Q0FBNkM7SUFDN0MsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxTQUFTLEtBQUssT0FBTyxDQUFDLEtBQUssd0JBQXdCLFFBQVEsQ0FBQyxLQUFLLE1BQU0sT0FBTyxDQUFDLEtBQUssV0FBVyxDQUFDLENBQUM7QUFDM0gsQ0FBQztBQWJELDhCQWFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9hZEFzc2VtYmxpZXMsIGFsbFR5cGVTY3JpcHRTbmlwcGV0cyB9IGZyb20gJy4uL2pzaWkvYXNzZW1ibGllcyc7XG5pbXBvcnQgKiBhcyBsb2dnaW5nIGZyb20gJy4uL2xvZ2dpbmcnO1xuaW1wb3J0IHsgc25pcHBldEtleSB9IGZyb20gJy4uL3RhYmxldHMva2V5JztcbmltcG9ydCB7IExhbmd1YWdlVGFibGV0IH0gZnJvbSAnLi4vdGFibGV0cy90YWJsZXRzJztcbmltcG9ydCB7IGlzRGVmaW5lZCB9IGZyb20gJy4uL3V0aWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyaW1DYWNoZU9wdGlvbnMge1xuICAvKipcbiAgICogTG9jYXRpb25zIG9mIGFzc2VtYmxpZXMgdG8gc2VhcmNoIGZvciBzbmlwcGV0c1xuICAgKi9cbiAgcmVhZG9ubHkgYXNzZW1ibHlMb2NhdGlvbnM6IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBDYWNoZSB0byB0cmltXG4gICAqL1xuICByZWFkb25seSBjYWNoZUZpbGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRyaW1DYWNoZShvcHRpb25zOiBUcmltQ2FjaGVPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gIGxvZ2dpbmcuaW5mbyhgTG9hZGluZyAke29wdGlvbnMuYXNzZW1ibHlMb2NhdGlvbnMubGVuZ3RofSBhc3NlbWJsaWVzYCk7XG4gIGNvbnN0IGFzc2VtYmxpZXMgPSBhd2FpdCBsb2FkQXNzZW1ibGllcyhvcHRpb25zLmFzc2VtYmx5TG9jYXRpb25zLCBmYWxzZSk7XG5cbiAgY29uc3Qgc25pcHBldHMgPSBBcnJheS5mcm9tKGFsbFR5cGVTY3JpcHRTbmlwcGV0cyhhc3NlbWJsaWVzKSk7XG5cbiAgY29uc3Qgb3JpZ2luYWwgPSBhd2FpdCBMYW5ndWFnZVRhYmxldC5mcm9tRmlsZShvcHRpb25zLmNhY2hlRmlsZSk7XG4gIGNvbnN0IHVwZGF0ZWQgPSBuZXcgTGFuZ3VhZ2VUYWJsZXQoKTtcbiAgdXBkYXRlZC5hZGRTbmlwcGV0cyguLi5zbmlwcGV0cy5tYXAoKHNuaXApID0+IG9yaWdpbmFsLnRyeUdldFNuaXBwZXQoc25pcHBldEtleShzbmlwKSkpLmZpbHRlcihpc0RlZmluZWQpKTtcbiAgYXdhaXQgdXBkYXRlZC5zYXZlKG9wdGlvbnMuY2FjaGVGaWxlKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJldHRpZXIvcHJldHRpZXJcbiAgbG9nZ2luZy5pbmZvKGAke29wdGlvbnMuY2FjaGVGaWxlfTogJHt1cGRhdGVkLmNvdW50fSBzbmlwcGV0cyByZW1haW5pbmcgKCR7b3JpZ2luYWwuY291bnR9IC0gJHt1cGRhdGVkLmNvdW50fSB0cmltbWVkKWApO1xufVxuIl19