"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pacmak = exports.TargetName = void 0;
const jsii_reflect_1 = require("jsii-reflect");
const jsii_rosetta_1 = require("jsii-rosetta");
const logging = require("./logging");
const npm_modules_1 = require("./npm-modules");
const targets_1 = require("./targets");
Object.defineProperty(exports, "TargetName", { enumerable: true, get: function () { return targets_1.TargetName; } });
const timer_1 = require("./timer");
const util_1 = require("./util");
var logging_1 = require("./logging");
Object.defineProperty(exports, "configureLogging", { enumerable: true, get: function () { return logging_1.configure; } });
/**
 * Generates code in the desired targets.
 */
async function pacmak({ argv = {}, clean = true, codeOnly = false, fingerprint = true, force = false, forceSubdirectory = true, forceTarget = false, inputDirectories, outputDirectory, parallel = true, recurse = false, rosettaTablet, targets = Object.values(targets_1.TargetName), timers = new timer_1.Timers(), rosettaUnknownSnippets = undefined, updateNpmIgnoreFiles = false, validateAssemblies = false, }) {
    const rosetta = new jsii_rosetta_1.Rosetta({ unknownSnippets: rosettaUnknownSnippets });
    if (rosettaTablet) {
        await rosetta.loadTabletFromFile(rosettaTablet);
    }
    const modulesToPackageSorted = await npm_modules_1.findJsiiModules(inputDirectories, recurse);
    const modulesToPackageFlat = util_1.flatten(modulesToPackageSorted);
    logging.info(`Found ${modulesToPackageFlat.length} modules to package`);
    if (modulesToPackageFlat.length === 0) {
        logging.warn('Nothing to do');
        return;
    }
    if (outputDirectory) {
        for (const mod of modulesToPackageFlat) {
            mod.outputDirectory = outputDirectory;
        }
    }
    else if (updateNpmIgnoreFiles) {
        // if outdir is coming from package.json, verify it is excluded by .npmignore. if it is explicitly
        // defined via --out, don't perform this verification.
        await npm_modules_1.updateAllNpmIgnores(modulesToPackageFlat);
    }
    await timers.recordAsync('npm pack', () => {
        logging.info('Packaging NPM bundles');
        return Promise.all(modulesToPackageFlat.map((m) => m.npmPack()));
    });
    await timers.recordAsync('load jsii', () => {
        logging.info('Loading jsii assemblies and translations');
        const system = new jsii_reflect_1.TypeSystem();
        return Promise.all(modulesToPackageFlat.map(async (m) => {
            await m.load(system, validateAssemblies);
            return rosetta.addAssembly(m.assembly.spec, m.moduleDirectory);
        }));
    });
    try {
        const targetSets = sliceTargets(modulesToPackageSorted, targets, forceTarget);
        if (targetSets.every((s) => s.modulesSorted.length === 0)) {
            throw new Error(`None of the requested packages had any targets to build for '${targets.join(', ')}' (use --force-target to force)`);
        }
        const perLanguageDirectory = targetSets.length > 1 || forceSubdirectory;
        // We run all target sets in parallel for minimal wall clock time
        await Promise.all(mapParallelOrSerial(targetSets, async (targetSet) => {
            logging.info(`Packaging '${targetSet.targetType}' for ${describePackages(targetSet)}`);
            return timers
                .recordAsync(targetSet.targetType, () => buildTargetsForLanguage(targetSet.targetType, targetSet.modulesSorted, {
                argv,
                clean,
                codeOnly,
                fingerprint,
                force,
                perLanguageDirectory,
                rosetta,
            }))
                .then(() => logging.info(`${targetSet.targetType} finished`), (err) => {
                logging.warn(`${targetSet.targetType} failed`);
                return Promise.reject(err);
            });
        }, { parallel }));
    }
    finally {
        if (clean) {
            logging.debug('Cleaning up');
            await timers.recordAsync('cleanup', () => Promise.all(modulesToPackageFlat.map((m) => m.cleanup())));
        }
        else {
            logging.info('Temporary directories retained (--no-clean)');
        }
    }
    logging.info(`Packaged. ${timers.display()}`);
}
exports.pacmak = pacmak;
//#endregion
//#region Building
async function buildTargetsForLanguage(targetLanguage, modules, { argv, clean, codeOnly, fingerprint, force, perLanguageDirectory, rosetta, }) {
    // ``argv.target`` is guaranteed valid by ``yargs`` through the ``choices`` directive.
    const factory = targets_1.ALL_BUILDERS[targetLanguage];
    if (!factory) {
        throw new Error(`Unsupported target: '${targetLanguage}'`);
    }
    return factory(modules, {
        clean: clean,
        codeOnly: codeOnly,
        rosetta,
        force: force,
        fingerprint: fingerprint,
        arguments: argv,
        languageSubdirectory: perLanguageDirectory,
    }).buildModules();
}
function sliceTargets(modulesSorted, requestedTargets, force) {
    const ret = new Array();
    for (const target of requestedTargets) {
        ret.push({
            targetType: target,
            modulesSorted: modulesSorted
                .map((modules) => modules.filter((m) => force || m.availableTargets.includes(target)))
                .filter((ms) => ms.length > 0),
        });
    }
    return ret;
}
//#endregion
//#region Parallelization
function mapParallelOrSerial(collection, mapper, { parallel }) {
    const result = new Array();
    for (const item of collection) {
        result.push(result.length === 0 || parallel
            ? // Running parallel, or first element
                mapper(item)
            : // Wait for the previous promise, then make the next one
                result[result.length - 1].then(() => mapper(item), (error) => Promise.reject(error)));
    }
    return result;
}
//#endregion
//#region Misc. Utilities
function describePackages(target) {
    const modules = util_1.flatten(target.modulesSorted);
    if (modules.length > 0 && modules.length < 5) {
        return modules.map((m) => m.name).join(', ');
    }
    return `${modules.length} modules`;
}
//#endregion
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBMEM7QUFDMUMsK0NBQTJEO0FBRTNELHFDQUFxQztBQUNyQywrQ0FBcUU7QUFFckUsdUNBQXFEO0FBTzVDLDJGQVBjLG9CQUFVLE9BT2Q7QUFObkIsbUNBQWlDO0FBRWpDLGlDQUFpQztBQUtqQyxxQ0FBMEQ7QUFBakQsMkdBQUEsU0FBUyxPQUFvQjtBQUV0Qzs7R0FFRztBQUNJLEtBQUssVUFBVSxNQUFNLENBQUMsRUFDM0IsSUFBSSxHQUFHLEVBQUUsRUFDVCxLQUFLLEdBQUcsSUFBSSxFQUNaLFFBQVEsR0FBRyxLQUFLLEVBQ2hCLFdBQVcsR0FBRyxJQUFJLEVBQ2xCLEtBQUssR0FBRyxLQUFLLEVBQ2IsaUJBQWlCLEdBQUcsSUFBSSxFQUN4QixXQUFXLEdBQUcsS0FBSyxFQUNuQixnQkFBZ0IsRUFDaEIsZUFBZSxFQUNmLFFBQVEsR0FBRyxJQUFJLEVBQ2YsT0FBTyxHQUFHLEtBQUssRUFDZixhQUFhLEVBQ2IsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQVUsQ0FBQyxFQUNuQyxNQUFNLEdBQUcsSUFBSSxjQUFNLEVBQUUsRUFDckIsc0JBQXNCLEdBQUcsU0FBUyxFQUNsQyxvQkFBb0IsR0FBRyxLQUFLLEVBQzVCLGtCQUFrQixHQUFHLEtBQUssR0FDWjtJQUNkLE1BQU0sT0FBTyxHQUFHLElBQUksc0JBQU8sQ0FBQyxFQUFFLGVBQWUsRUFBRSxzQkFBc0IsRUFBRSxDQUFDLENBQUM7SUFDekUsSUFBSSxhQUFhLEVBQUU7UUFDakIsTUFBTSxPQUFPLENBQUMsa0JBQWtCLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDakQ7SUFFRCxNQUFNLHNCQUFzQixHQUFHLE1BQU0sNkJBQWUsQ0FDbEQsZ0JBQWdCLEVBQ2hCLE9BQU8sQ0FDUixDQUFDO0lBQ0YsTUFBTSxvQkFBb0IsR0FBRyxjQUFPLENBQUMs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QUksUUFBUTtZQUM3QixDQUFDLENBQUMscUNBQXFDO2dCQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLHdEQUF3RDtnQkFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUM1QixHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQ2xCLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUNqQyxDQUNOLENBQUM7S0FDSDtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxZQUFZO0FBRVoseUJBQXlCO0FBRXpCLFNBQVMsZ0JBQWdCLENBQUMsTUFBaUI7SUFDekMsTUFBTSxPQUFPLEdBQUcsY0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM5QyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzVDLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM5QztJQUNELE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxVQUFVLENBQUM7QUFDckMsQ0FBQztBQUVELFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUeXBlU3lzdGVtIH0gZnJvbSAnanNpaS1yZWZsZWN0JztcbmltcG9ydCB7IFJvc2V0dGEsIFVua25vd25TbmlwcGV0TW9kZSB9IGZyb20gJ2pzaWktcm9zZXR0YSc7XG5cbmltcG9ydCAqIGFzIGxvZ2dpbmcgZnJvbSAnLi9sb2dnaW5nJztcbmltcG9ydCB7IGZpbmRKc2lpTW9kdWxlcywgdXBkYXRlQWxsTnBtSWdub3JlcyB9IGZyb20gJy4vbnBtLW1vZHVsZXMnO1xuaW1wb3J0IHsgSnNpaU1vZHVsZSB9IGZyb20gJy4vcGFja2FnaW5nJztcbmltcG9ydCB7IEFMTF9CVUlMREVSUywgVGFyZ2V0TmFtZSB9IGZyb20gJy4vdGFyZ2V0cyc7XG5pbXBvcnQgeyBUaW1lcnMgfSBmcm9tICcuL3RpbWVyJztcbmltcG9ydCB7IFRvcG9zb3J0ZWQgfSBmcm9tICcuL3RvcG9zb3J0JztcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICcuL3V0aWwnO1xuXG4vLyNyZWdpb24gRXhwb3J0ZWQgQVBJc1xuXG5leHBvcnQgeyBUYXJnZXROYW1lIH07XG5leHBvcnQgeyBjb25maWd1cmUgYXMgY29uZmlndXJlTG9nZ2luZyB9IGZyb20gJy4vbG9nZ2luZyc7XG5cbi8qKlxuICogR2VuZXJhdGVzIGNvZGUgaW4gdGhlIGRlc2lyZWQgdGFyZ2V0cy5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBhY21hayh7XG4gIGFyZ3YgPSB7fSxcbiAgY2xlYW4gPSB0cnVlLFxuICBjb2RlT25seSA9IGZhbHNlLFxuICBmaW5nZXJwcmludCA9IHRydWUsXG4gIGZvcmNlID0gZmFsc2UsXG4gIGZvcmNlU3ViZGlyZWN0b3J5ID0gdHJ1ZSxcbiAgZm9yY2VUYXJnZXQgPSBmYWxzZSxcbiAgaW5wdXREaXJlY3RvcmllcyxcbiAgb3V0cHV0RGlyZWN0b3J5LFxuICBwYXJhbGxlbCA9IHRydWUsXG4gIHJlY3Vyc2UgPSBmYWxzZSxcbiAgcm9zZXR0YVRhYmxldCxcbiAgdGFyZ2V0cyA9IE9iamVjdC52YWx1ZXMoVGFyZ2V0TmFtZSksXG4gIHRpbWVycyA9IG5ldyBUaW1lcnMoKSxcbiAgcm9zZXR0YVVua25vd25TbmlwcGV0cyA9IHVuZGVmaW5lZCxcbiAgdXBkYXRlTnBtSWdub3JlRmlsZXMgPSBmYWxzZSxcbiAgdmFsaWRhdGVBc3NlbWJsaWVzID0gZmFsc2UsXG59OiBQYWNtYWtPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHJvc2V0dGEgPSBuZXcgUm9zZXR0YSh7IHVua25vd25TbmlwcGV0czogcm9zZXR0YVVua25vd25TbmlwcGV0cyB9KTtcbiAgaWYgKHJvc2V0dGFUYWJsZXQpIHtcbiAgICBhd2FpdCByb3NldHRhLmxvYWRUYWJsZXRGcm9tRmlsZShyb3NldHRhVGFibGV0KTtcbiAgfVxuXG4gIGNvbnN0IG1vZHVsZXNUb1BhY2thZ2VTb3J0ZWQgPSBhd2FpdCBmaW5kSnNpaU1vZHVsZXMoXG4gICAgaW5wdXREaXJlY3RvcmllcyxcbiAgICByZWN1cnNlLFxuICApO1xuICBjb25zdCBtb2R1bGVzVG9QYWNrYWdlRmxhdCA9IGZsYXR0ZW4obW9kdWxlc1RvUGFja2FnZVNvcnRlZCk7XG5cbiAgbG9nZ2luZy5pbmZvKGBGb3VuZCAke21vZHVsZXNUb1BhY2thZ2VGbGF0Lmxlbmd0aH0gbW9kdWxlcyB0byBwYWNrYWdlYCk7XG4gIGlmIChtb2R1bGVzVG9QYWNrYWdlRmxhdC5sZW5ndGggPT09IDApIHtcbiAgICBsb2dnaW5nLndhcm4oJ05vdGhpbmcgdG8gZG8nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAob3V0cHV0RGlyZWN0b3J5KSB7XG4gICAgZm9yIChjb25zdCBtb2Qgb2YgbW9kdWxlc1RvUGFja2FnZUZsYXQpIHtcbiAgICAgIG1vZC5vdXRwdXREaXJlY3RvcnkgPSBvdXRwdXREaXJlY3Rvcnk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHVwZGF0ZU5wbUlnbm9yZUZpbGVzKSB7XG4gICAgLy8gaWYgb3V0ZGlyIGlzIGNvbWluZyBmcm9tIHBhY2thZ2UuanNvbiwgdmVyaWZ5IGl0IGlzIGV4Y2x1ZGVkIGJ5IC5ucG1pZ25vcmUuIGlmIGl0IGlzIGV4cGxpY2l0bHlcbiAgICAvLyBkZWZpbmVkIHZpYSAtLW91dCwgZG9uJ3QgcGVyZm9ybSB0aGlzIHZlcmlmaWNhdGlvbi5cbiAgICBhd2FpdCB1cGRhdGVBbGxOcG1JZ25vcmVzKG1vZHVsZXNUb1BhY2thZ2VGbGF0KTtcbiAgfVxuXG4gIGF3YWl0IHRpbWVycy5yZWNvcmRBc3luYygnbnBtIHBhY2snLCAoKSA9PiB7XG4gICAgbG9nZ2luZy5pbmZvKCdQYWNrYWdpbmcgTlBNIGJ1bmRsZXMnKTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwobW9kdWxlc1RvUGFja2FnZUZsYXQubWFwKChtKSA9PiBtLm5wbVBhY2soKSkpO1xuICB9KTtcblxuICBhd2FpdCB0aW1lcnMucmVjb3JkQXN5bmMoJ2xvYWQganNpaScsICgpID0+IHtcbiAgICBsb2dnaW5nLmluZm8oJ0xvYWRpbmcganNpaSBhc3NlbWJsaWVzIGFuZCB0cmFuc2xhdGlvbnMnKTtcbiAgICBjb25zdCBzeXN0ZW0gPSBuZXcgVHlwZVN5c3RlbSgpO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgIG1vZHVsZXNUb1BhY2thZ2VGbGF0Lm1hcChhc3luYyAobSkgPT4ge1xuICAgICAgICBhd2FpdCBtLmxvYWQoc3lzdGVtLCB2YWxpZGF0ZUFzc2VtYmxpZXMpO1xuICAgICAgICByZXR1cm4gcm9zZXR0YS5hZGRBc3NlbWJseShtLmFzc2VtYmx5LnNwZWMsIG0ubW9kdWxlRGlyZWN0b3J5KTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH0pO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgdGFyZ2V0U2V0cyA9IHNsaWNlVGFyZ2V0cyhcbiAgICAgIG1vZHVsZXNUb1BhY2thZ2VTb3J0ZWQsXG4gICAgICB0YXJnZXRzLFxuICAgICAgZm9yY2VUYXJnZXQsXG4gICAgKTtcbiAgICBpZiAodGFyZ2V0U2V0cy5ldmVyeSgocykgPT4gcy5tb2R1bGVzU29ydGVkLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYE5vbmUgb2YgdGhlIHJlcXVlc3RlZCBwYWNrYWdlcyBoYWQgYW55IHRhcmdldHMgdG8gYnVpbGQgZm9yICcke3RhcmdldHMuam9pbihcbiAgICAgICAgICAnLCAnLFxuICAgICAgICApfScgKHVzZSAtLWZvcmNlLXRhcmdldCB0byBmb3JjZSlgLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBwZXJMYW5ndWFnZURpcmVjdG9yeSA9IHRhcmdldFNldHMubGVuZ3RoID4gMSB8fCBmb3JjZVN1YmRpcmVjdG9yeTtcblxuICAgIC8vIFdlIHJ1biBhbGwgdGFyZ2V0IHNldHMgaW4gcGFyYWxsZWwgZm9yIG1pbmltYWwgd2FsbCBjbG9jayB0aW1lXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICBtYXBQYXJhbGxlbE9yU2VyaWFsKFxuICAgICAgICB0YXJnZXRTZXRzLFxuICAgICAgICBhc3luYyAodGFyZ2V0U2V0KSA9PiB7XG4gICAgICAgICAgbG9nZ2luZy5pbmZvKFxuICAgICAgICAgICAgYFBhY2thZ2luZyAnJHt0YXJnZXRTZXQudGFyZ2V0VHlwZX0nIGZvciAke2Rlc2NyaWJlUGFja2FnZXMoXG4gICAgICAgICAgICAgIHRhcmdldFNldCxcbiAgICAgICAgICAgICl9YCxcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiB0aW1lcnNcbiAgICAgICAgICAgIC5yZWNvcmRBc3luYyh0YXJnZXRTZXQudGFyZ2V0VHlwZSwgKCkgPT5cbiAgICAgICAgICAgICAgYnVpbGRUYXJnZXRzRm9yTGFuZ3VhZ2UoXG4gICAgICAgICAgICAgICAgdGFyZ2V0U2V0LnRhcmdldFR5cGUsXG4gICAgICAgICAgICAgICAgdGFyZ2V0U2V0Lm1vZHVsZXNTb3J0ZWQsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgYXJndixcbiAgICAgICAgICAgICAgICAgIGNsZWFuLFxuICAgICAgICAgICAgICAgICAgY29kZU9ubHksXG4gICAgICAgICAgICAgICAgICBmaW5nZXJwcmludCxcbiAgICAgICAgICAgICAgICAgIGZvcmNlLFxuICAgICAgICAgICAgICAgICAgcGVyTGFuZ3VhZ2VEaXJlY3RvcnksXG4gICAgICAgICAgICAgICAgICByb3NldHRhLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgKCkgPT4gbG9nZ2luZy5pbmZvKGAke3RhcmdldFNldC50YXJnZXRUeXBlfSBmaW5pc2hlZGApLFxuICAgICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgbG9nZ2luZy53YXJuKGAke3RhcmdldFNldC50YXJnZXRUeXBlfSBmYWlsZWRgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIHsgcGFyYWxsZWwgfSxcbiAgICAgICksXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAoY2xlYW4pIHtcbiAgICAgIGxvZ2dpbmcuZGVidWcoJ0NsZWFuaW5nIHVwJyk7XG4gICAgICBhd2FpdCB0aW1lcnMucmVjb3JkQXN5bmMoJ2NsZWFudXAnLCAoKSA9PlxuICAgICAgICBQcm9taXNlLmFsbChtb2R1bGVzVG9QYWNrYWdlRmxhdC5tYXAoKG0pID0+IG0uY2xlYW51cCgpKSksXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnaW5nLmluZm8oJ1RlbXBvcmFyeSBkaXJlY3RvcmllcyByZXRhaW5lZCAoLS1uby1jbGVhbiknKTtcbiAgICB9XG4gIH1cblxuICBsb2dnaW5nLmluZm8oYFBhY2thZ2VkLiAke3RpbWVycy5kaXNwbGF5KCl9YCk7XG59XG5cbi8qKlxuICogT3B0aW9ucyBwcm92aWRlZCB0byB0aGUgYHBhY21ha2AgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGFjbWFrT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBbGwgY29tbWFuZC1saW5lIGFyZ3VtZW50cyB0aGF0IHdlcmUgcHJvdmlkZWQuIFRoaXMgaW5jbHVkZXMgdGFyZ2V0LXNwZWNpZmljIHBhcmFtZXRlcnMsIHRoZVxuICAgKiBoYW5kbGluZyBvZiB3aGljaCBpcyB1cCB0byB0aGUgY29kZSBnZW5lcmF0b3JzLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgcmVhZG9ubHkgYXJndj86IHsgcmVhZG9ubHkgW25hbWU6IHN0cmluZ106IGFueSB9O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGNsZWFuIHVwIHRlbXBvcmFyeSBkaXJlY3RvcmllcyB1cG9uIGNvbXBsZXRpb24uXG4gICAqXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIHJlYWRvbmx5IGNsZWFuPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciB0byBnZW5lcmF0ZSBzb3VyY2UgY29kZSBvbmx5IChhcyBvcHBvc2VkIHRvIGJ1aWx0IHBhY2thZ2VzKS5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IGNvZGVPbmx5PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciB0byBvcHBvcnR1bmlzdGljYWxseSBpbmNsdWRlIGEgZmluZ2VycHJpbnQgaW4gZ2VuZXJhdGVkIGNvZGUsIHRvIGF2b2lkIHJlLWdlbmVyYXRpbmdcbiAgICogY29kZSBpZiB0aGUgc291cmNlIGFzc2VtYmx5IGhhcyBub3QgY2hhbmdlZC5cbiAgICpcbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgcmVhZG9ubHkgZmluZ2VycHJpbnQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGFsd2F5cyByZS1nZW5lcmF0ZSBjb2RlLCBldmVuIGlmIHRoZSBmaW5nZXJwcmludCBoYXMgbm90IGNoYW5nZWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZWFkb25seSBmb3JjZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBlbWl0IGNvZGUgaW4gYSBwZXItbGFuZ3VhZ2Ugc3ViZGlyZWN0b3J5LCBldmVuIGlmIHRoZXJlIGlzIG9ubHkgb25lIHRhcmdldCBsYW5ndWFnZS5cbiAgICpcbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgcmVhZG9ubHkgZm9yY2VTdWJkaXJlY3Rvcnk/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBbHdheXMgdHJ5IHRvIGdlbmVyYXRlIGNvZGUgZm9yIHRoZSBzZWxlY3RlZCB0YXJnZXRzLCBldmVuIGlmIHRob3NlIGFyZSBub3QgY29uZmlndXJlZC4gVXNlIHRoaXMgb3B0aW9uIGF0IHlvdXIgb3duXG4gICAqIHJpc2ssIGFzIHRoZXJlIGFyZSBzaWduaWZpY2FudCBjaGFuY2VzIGNvZGUgZ2VuZXJhdG9ycyBjYW5ub3Qgb3BlcmF0ZSB3aXRob3V0IGFueSBjb25maWd1cmF0aW9uLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgZm9yY2VUYXJnZXQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBkaXJlY3RvcmllcyB0byBiZSBjb25zaWRlcmVkIGZvciBpbnB1dCBhc3NlbWJsaWVzLlxuICAgKi9cbiAgcmVhZG9ubHkgaW5wdXREaXJlY3RvcmllczogcmVhZG9ubHkgc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoZSBkaXJlY3RvcnkgaW4gd2hpY2ggdG8gb3V0cHV0IGdlbmVyYXRlZCBwYWNrYWdlcyBvciBjb2RlIChpZiAgYGNvZGVPbmx5YCBpcyBgdHJ1ZWApLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIENvbmZpZ3VyZWQgaW4gYHBhY2thZ2UuanNvbmBcbiAgICovXG4gIHJlYWRvbmx5IG91dHB1dERpcmVjdG9yeT86IHN0cmluZztcblxuICAvKipcbiAgICogV2hldGhlciB0byBwYXJhbGxlbGl6ZSBjb2RlIGdlbmVyYXRpb24uIFR1cm5pbmcgdGhpcyB0byBgZmFsc2VgIGNhbiBiZSBiZW5lZmljaWFsIGluIGNlcnRhaW4gcmVzb3VyY2UtY29uc3RyYWluZWRcbiAgICogZW52aXJvbm1lbnRzLCBzdWNoIGFzIGZyZWUgQ0kvQ0Qgb2ZmZXJpbmdzLCBhcyBpdCByZWR1Y2VzIHRoZSBwcmVzc3VyZSBvbiBJTy5cbiAgICpcbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgcmVhZG9ubHkgcGFyYWxsZWw/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY3Vyc2l2ZWx5IGdlbmVyYXRlIGZvciB0aGUgc2VsZWN0ZWQgcGFja2FnZXMnIGRlcGVuZGVuY2llcy5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IHJlY3Vyc2U/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBIb3cgcm9zZXR0YSBzaG91bGQgdHJlYXQgc25pcHBldHMgdGhhdCBjYW5ub3QgYmUgbG9hZGVkIGZyb20gYSB0cmFuc2xhdGlvbiB0YWJsZXQuXG4gICAqXG4gICAqIEBkZWZhdWx0IFVua25vd25TbmlwcGV0TW9kZS5WRVJCQVRJTVxuICAgKi9cbiAgcmVhZG9ubHkgcm9zZXR0YVVua25vd25TbmlwcGV0cz86IFVua25vd25TbmlwcGV0TW9kZTtcblxuICAvKipcbiAgICogQSBSb3NldHRhIHRhYmxldCBmaWxlIHdoZXJlIHRyYW5zbGF0aW9ucyBmb3IgY29kZSBleGFtcGxlcyBjYW4gYmUgZm91bmQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgcmVhZG9ubHkgcm9zZXR0YVRhYmxldD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgdGFyZ2V0cyBmb3Igd2hpY2ggY29kZSBzaG91bGQgYmUgZ2VuZXJhdGVkLiBVbmxlc3MgYGZvcmNlVGFyZ2V0YCBpcyBgdHJ1ZWAsIGEgZ2l2ZW4gdGFyZ2V0IHdpbGwgb25seVxuICAgKiBiZSBnZW5lcmF0ZWQgZm9yIGFzc2VtYmxpZXMgdGhhdCBoYXZlIGNvbmZpZ3VyZWQgaXQuXG4gICAqXG4gICAqIEBkZWZhdWx0IE9iamVjdC52YWx1ZXMoVGFyZ2V0TmFtZSlcbiAgICovXG4gIHJlYWRvbmx5IHRhcmdldHM/OiByZWFkb25seSBUYXJnZXROYW1lW107XG5cbiAgLyoqXG4gICAqIEEgYFRpbWVyc2Agb2JqZWN0LCBpZiB5b3UgYXJlIGludGVyZXN0ZWQgaW4gaW5jbHVkaW5nIHRoZSByb3NldHRhIHJ1biBpbiBhIGxhcmdlciBzZXQgb2YgdGltZWQgb3BlcmF0aW9ucy5cbiAgICovXG4gIHJlYWRvbmx5IHRpbWVycz86IFRpbWVycztcblxuICAvKipcbiAgICogV2hldGhlciB0byB1cGRhdGUgLm5wbWlnbm9yZSBmaWxlcyBpZiBgb3V0cHV0RGlyZWN0b3J5YCBjb21lcyBmcm9tIHRoZSBgcGFja2FnZS5qc29uYCBmaWxlcy5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IHVwZGF0ZU5wbUlnbm9yZUZpbGVzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hldGhlciBhc3NlbWJsaWVzIHNob3VsZCBiZSB2YWxpZGF0ZWQgb3Igbm90LiBWYWxpZGF0aW9uIGNhbiBiZSBleHBlbnNpdmUgYW5kIGNhbiBiZSBza2lwcGVkIGlmIHRoZSBhc3NlbWJsaWVzXG4gICAqIGNhbiBiZSBhc3N1bWVkIHRvIGJlIHZhbGlkLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcmVhZG9ubHkgdmFsaWRhdGVBc3NlbWJsaWVzPzogYm9vbGVhbjtcbn1cblxuLy8jZW5kcmVnaW9uXG5cbi8vI3JlZ2lvbiBCdWlsZGluZ1xuXG5hc3luYyBmdW5jdGlvbiBidWlsZFRhcmdldHNGb3JMYW5ndWFnZShcbiAgdGFyZ2V0TGFuZ3VhZ2U6IHN0cmluZyxcbiAgbW9kdWxlczogVG9wb3NvcnRlZDxKc2lpTW9kdWxlPixcbiAge1xuICAgIGFyZ3YsXG4gICAgY2xlYW4sXG4gICAgY29kZU9ubHksXG4gICAgZmluZ2VycHJpbnQsXG4gICAgZm9yY2UsXG4gICAgcGVyTGFuZ3VhZ2VEaXJlY3RvcnksXG4gICAgcm9zZXR0YSxcbiAgfToge1xuICAgIGFyZ3Y6IHsgcmVhZG9ubHkgW25hbWU6IHN0cmluZ106IGFueSB9O1xuICAgIGNsZWFuOiBib29sZWFuO1xuICAgIGNvZGVPbmx5OiBib29sZWFuO1xuICAgIGZpbmdlcnByaW50OiBib29sZWFuO1xuICAgIGZvcmNlOiBib29sZWFuO1xuICAgIHBlckxhbmd1YWdlRGlyZWN0b3J5OiBib29sZWFuO1xuICAgIHJvc2V0dGE6IFJvc2V0dGE7XG4gIH0sXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgLy8gYGBhcmd2LnRhcmdldGBgIGlzIGd1YXJhbnRlZWQgdmFsaWQgYnkgYGB5YXJnc2BgIHRocm91Z2ggdGhlIGBgY2hvaWNlc2BgIGRpcmVjdGl2ZS5cbiAgY29uc3QgZmFjdG9yeSA9IEFMTF9CVUlMREVSU1t0YXJnZXRMYW5ndWFnZSBhcyBUYXJnZXROYW1lXTtcbiAgaWYgKCFmYWN0b3J5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCB0YXJnZXQ6ICcke3RhcmdldExhbmd1YWdlfSdgKTtcbiAgfVxuXG4gIHJldHVybiBmYWN0b3J5KG1vZHVsZXMsIHtcbiAgICBjbGVhbjogY2xlYW4sXG4gICAgY29kZU9ubHk6IGNvZGVPbmx5LFxuICAgIHJvc2V0dGEsXG4gICAgZm9yY2U6IGZvcmNlLFxuICAgIGZpbmdlcnByaW50OiBmaW5nZXJwcmludCxcbiAgICBhcmd1bWVudHM6IGFyZ3YsXG4gICAgbGFuZ3VhZ2VTdWJkaXJlY3Rvcnk6IHBlckxhbmd1YWdlRGlyZWN0b3J5LFxuICB9KS5idWlsZE1vZHVsZXMoKTtcbn1cblxuLy8jZW5kcmVnaW9uXG5cbi8vI3JlZ2lvbiBUYXJnZXQgU2xpY2luZ1xuXG4vKipcbiAqIEEgc2V0IG9mIHBhY2thZ2VzICh0YXJnZXRzKSB0cmFuc2xhdGVkIGludG8gdGhlIHNhbWUgbGFuZ3VhZ2VcbiAqL1xuaW50ZXJmYWNlIFRhcmdldFNldCB7XG4gIHRhcmdldFR5cGU6IHN0cmluZztcblxuICAvLyBTb3J0ZWQgaW50byB0b3Bvc29ydGVkIHRyYW5jaGVzXG4gIG1vZHVsZXNTb3J0ZWQ6IFRvcG9zb3J0ZWQ8SnNpaU1vZHVsZT47XG59XG5cbmZ1bmN0aW9uIHNsaWNlVGFyZ2V0cyhcbiAgbW9kdWxlc1NvcnRlZDogVG9wb3NvcnRlZDxKc2lpTW9kdWxlPixcbiAgcmVxdWVzdGVkVGFyZ2V0czogcmVhZG9ubHkgVGFyZ2V0TmFtZVtdLFxuICBmb3JjZTogYm9vbGVhbixcbik6IHJlYWRvbmx5IFRhcmdldFNldFtdIHtcbiAgY29uc3QgcmV0ID0gbmV3IEFycmF5PFRhcmdldFNldD4oKTtcbiAgZm9yIChjb25zdCB0YXJnZXQgb2YgcmVxdWVzdGVkVGFyZ2V0cykge1xuICAgIHJldC5wdXNoKHtcbiAgICAgIHRhcmdldFR5cGU6IHRhcmdldCxcbiAgICAgIG1vZHVsZXNTb3J0ZWQ6IG1vZHVsZXNTb3J0ZWRcbiAgICAgICAgLm1hcCgobW9kdWxlcykgPT5cbiAgICAgICAgICBtb2R1bGVzLmZpbHRlcigobSkgPT4gZm9yY2UgfHwgbS5hdmFpbGFibGVUYXJnZXRzLmluY2x1ZGVzKHRhcmdldCkpLFxuICAgICAgICApXG4gICAgICAgIC5maWx0ZXIoKG1zKSA9PiBtcy5sZW5ndGggPiAwKSxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vLyNlbmRyZWdpb25cblxuLy8jcmVnaW9uIFBhcmFsbGVsaXphdGlvblxuXG5mdW5jdGlvbiBtYXBQYXJhbGxlbE9yU2VyaWFsPFQsIFI+KFxuICBjb2xsZWN0aW9uOiByZWFkb25seSBUW10sXG4gIG1hcHBlcjogKGl0ZW06IFQpID0+IFByb21pc2U8Uj4sXG4gIHsgcGFyYWxsZWwgfTogeyBwYXJhbGxlbDogYm9vbGVhbiB9LFxuKTogQXJyYXk8UHJvbWlzZTxSPj4ge1xuICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXk8UHJvbWlzZTxSPj4oKTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHQucHVzaChcbiAgICAgIHJlc3VsdC5sZW5ndGggPT09IDAgfHwgcGFyYWxsZWxcbiAgICAgICAgPyAvLyBSdW5uaW5nIHBhcmFsbGVsLCBvciBmaXJzdCBlbGVtZW50XG4gICAgICAgICAgbWFwcGVyKGl0ZW0pXG4gICAgICAgIDogLy8gV2FpdCBmb3IgdGhlIHByZXZpb3VzIHByb21pc2UsIHRoZW4gbWFrZSB0aGUgbmV4dCBvbmVcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdLnRoZW4oXG4gICAgICAgICAgICAoKSA9PiBtYXBwZXIoaXRlbSksXG4gICAgICAgICAgICAoZXJyb3IpID0+IFByb21pc2UucmVqZWN0KGVycm9yKSxcbiAgICAgICAgICApLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8jZW5kcmVnaW9uXG5cbi8vI3JlZ2lvbiBNaXNjLiBVdGlsaXRpZXNcblxuZnVuY3Rpb24gZGVzY3JpYmVQYWNrYWdlcyh0YXJnZXQ6IFRhcmdldFNldCkge1xuICBjb25zdCBtb2R1bGVzID0gZmxhdHRlbih0YXJnZXQubW9kdWxlc1NvcnRlZCk7XG4gIGlmIChtb2R1bGVzLmxlbmd0aCA+IDAgJiYgbW9kdWxlcy5sZW5ndGggPCA1KSB7XG4gICAgcmV0dXJuIG1vZHVsZXMubWFwKChtKSA9PiBtLm5hbWUpLmpvaW4oJywgJyk7XG4gIH1cbiAgcmV0dXJuIGAke21vZHVsZXMubGVuZ3RofSBtb2R1bGVzYDtcbn1cblxuLy8jZW5kcmVnaW9uXG4iXX0=